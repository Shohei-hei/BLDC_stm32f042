
BLDC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c58  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000170  08006d18  08006d18  00016d18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006e88  08006e88  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08006e88  08006e88  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006e88  08006e88  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006e88  08006e88  00016e88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006e8c  08006e8c  00016e8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08006e90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f0  20000010  08006ea0  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000200  08006ea0  00020200  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000134d8  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000286a  00000000  00000000  00033510  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e98  00000000  00000000  00035d80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d60  00000000  00000000  00036c18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000031f7  00000000  00000000  00037978  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012a5d  00000000  00000000  0003ab6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009182f  00000000  00000000  0004d5cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000dedfb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003828  00000000  00000000  000dee50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000010 	.word	0x20000010
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08006d00 	.word	0x08006d00

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000014 	.word	0x20000014
 8000104:	08006d00 	.word	0x08006d00

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_cdrcmple>:
 8000220:	4684      	mov	ip, r0
 8000222:	1c10      	adds	r0, r2, #0
 8000224:	4662      	mov	r2, ip
 8000226:	468c      	mov	ip, r1
 8000228:	1c19      	adds	r1, r3, #0
 800022a:	4663      	mov	r3, ip
 800022c:	e000      	b.n	8000230 <__aeabi_cdcmpeq>
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <__aeabi_cdcmpeq>:
 8000230:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000232:	f001 fe6f 	bl	8001f14 <__ledf2>
 8000236:	2800      	cmp	r0, #0
 8000238:	d401      	bmi.n	800023e <__aeabi_cdcmpeq+0xe>
 800023a:	2100      	movs	r1, #0
 800023c:	42c8      	cmn	r0, r1
 800023e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000240 <__aeabi_dcmpeq>:
 8000240:	b510      	push	{r4, lr}
 8000242:	f001 fdb9 	bl	8001db8 <__eqdf2>
 8000246:	4240      	negs	r0, r0
 8000248:	3001      	adds	r0, #1
 800024a:	bd10      	pop	{r4, pc}

0800024c <__aeabi_dcmplt>:
 800024c:	b510      	push	{r4, lr}
 800024e:	f001 fe61 	bl	8001f14 <__ledf2>
 8000252:	2800      	cmp	r0, #0
 8000254:	db01      	blt.n	800025a <__aeabi_dcmplt+0xe>
 8000256:	2000      	movs	r0, #0
 8000258:	bd10      	pop	{r4, pc}
 800025a:	2001      	movs	r0, #1
 800025c:	bd10      	pop	{r4, pc}
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_dcmple>:
 8000260:	b510      	push	{r4, lr}
 8000262:	f001 fe57 	bl	8001f14 <__ledf2>
 8000266:	2800      	cmp	r0, #0
 8000268:	dd01      	ble.n	800026e <__aeabi_dcmple+0xe>
 800026a:	2000      	movs	r0, #0
 800026c:	bd10      	pop	{r4, pc}
 800026e:	2001      	movs	r0, #1
 8000270:	bd10      	pop	{r4, pc}
 8000272:	46c0      	nop			; (mov r8, r8)

08000274 <__aeabi_dcmpgt>:
 8000274:	b510      	push	{r4, lr}
 8000276:	f001 fddb 	bl	8001e30 <__gedf2>
 800027a:	2800      	cmp	r0, #0
 800027c:	dc01      	bgt.n	8000282 <__aeabi_dcmpgt+0xe>
 800027e:	2000      	movs	r0, #0
 8000280:	bd10      	pop	{r4, pc}
 8000282:	2001      	movs	r0, #1
 8000284:	bd10      	pop	{r4, pc}
 8000286:	46c0      	nop			; (mov r8, r8)

08000288 <__aeabi_dcmpge>:
 8000288:	b510      	push	{r4, lr}
 800028a:	f001 fdd1 	bl	8001e30 <__gedf2>
 800028e:	2800      	cmp	r0, #0
 8000290:	da01      	bge.n	8000296 <__aeabi_dcmpge+0xe>
 8000292:	2000      	movs	r0, #0
 8000294:	bd10      	pop	{r4, pc}
 8000296:	2001      	movs	r0, #1
 8000298:	bd10      	pop	{r4, pc}
 800029a:	46c0      	nop			; (mov r8, r8)

0800029c <__aeabi_cfrcmple>:
 800029c:	4684      	mov	ip, r0
 800029e:	1c08      	adds	r0, r1, #0
 80002a0:	4661      	mov	r1, ip
 80002a2:	e7ff      	b.n	80002a4 <__aeabi_cfcmpeq>

080002a4 <__aeabi_cfcmpeq>:
 80002a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80002a6:	f000 fb67 	bl	8000978 <__lesf2>
 80002aa:	2800      	cmp	r0, #0
 80002ac:	d401      	bmi.n	80002b2 <__aeabi_cfcmpeq+0xe>
 80002ae:	2100      	movs	r1, #0
 80002b0:	42c8      	cmn	r0, r1
 80002b2:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080002b4 <__aeabi_fcmpeq>:
 80002b4:	b510      	push	{r4, lr}
 80002b6:	f000 faeb 	bl	8000890 <__eqsf2>
 80002ba:	4240      	negs	r0, r0
 80002bc:	3001      	adds	r0, #1
 80002be:	bd10      	pop	{r4, pc}

080002c0 <__aeabi_fcmplt>:
 80002c0:	b510      	push	{r4, lr}
 80002c2:	f000 fb59 	bl	8000978 <__lesf2>
 80002c6:	2800      	cmp	r0, #0
 80002c8:	db01      	blt.n	80002ce <__aeabi_fcmplt+0xe>
 80002ca:	2000      	movs	r0, #0
 80002cc:	bd10      	pop	{r4, pc}
 80002ce:	2001      	movs	r0, #1
 80002d0:	bd10      	pop	{r4, pc}
 80002d2:	46c0      	nop			; (mov r8, r8)

080002d4 <__aeabi_fcmple>:
 80002d4:	b510      	push	{r4, lr}
 80002d6:	f000 fb4f 	bl	8000978 <__lesf2>
 80002da:	2800      	cmp	r0, #0
 80002dc:	dd01      	ble.n	80002e2 <__aeabi_fcmple+0xe>
 80002de:	2000      	movs	r0, #0
 80002e0:	bd10      	pop	{r4, pc}
 80002e2:	2001      	movs	r0, #1
 80002e4:	bd10      	pop	{r4, pc}
 80002e6:	46c0      	nop			; (mov r8, r8)

080002e8 <__aeabi_fcmpgt>:
 80002e8:	b510      	push	{r4, lr}
 80002ea:	f000 faf9 	bl	80008e0 <__gesf2>
 80002ee:	2800      	cmp	r0, #0
 80002f0:	dc01      	bgt.n	80002f6 <__aeabi_fcmpgt+0xe>
 80002f2:	2000      	movs	r0, #0
 80002f4:	bd10      	pop	{r4, pc}
 80002f6:	2001      	movs	r0, #1
 80002f8:	bd10      	pop	{r4, pc}
 80002fa:	46c0      	nop			; (mov r8, r8)

080002fc <__aeabi_fcmpge>:
 80002fc:	b510      	push	{r4, lr}
 80002fe:	f000 faef 	bl	80008e0 <__gesf2>
 8000302:	2800      	cmp	r0, #0
 8000304:	da01      	bge.n	800030a <__aeabi_fcmpge+0xe>
 8000306:	2000      	movs	r0, #0
 8000308:	bd10      	pop	{r4, pc}
 800030a:	2001      	movs	r0, #1
 800030c:	bd10      	pop	{r4, pc}
 800030e:	46c0      	nop			; (mov r8, r8)

08000310 <__aeabi_f2uiz>:
 8000310:	219e      	movs	r1, #158	; 0x9e
 8000312:	b510      	push	{r4, lr}
 8000314:	05c9      	lsls	r1, r1, #23
 8000316:	1c04      	adds	r4, r0, #0
 8000318:	f7ff fff0 	bl	80002fc <__aeabi_fcmpge>
 800031c:	2800      	cmp	r0, #0
 800031e:	d103      	bne.n	8000328 <__aeabi_f2uiz+0x18>
 8000320:	1c20      	adds	r0, r4, #0
 8000322:	f000 fe55 	bl	8000fd0 <__aeabi_f2iz>
 8000326:	bd10      	pop	{r4, pc}
 8000328:	219e      	movs	r1, #158	; 0x9e
 800032a:	1c20      	adds	r0, r4, #0
 800032c:	05c9      	lsls	r1, r1, #23
 800032e:	f000 fc87 	bl	8000c40 <__aeabi_fsub>
 8000332:	f000 fe4d 	bl	8000fd0 <__aeabi_f2iz>
 8000336:	2380      	movs	r3, #128	; 0x80
 8000338:	061b      	lsls	r3, r3, #24
 800033a:	469c      	mov	ip, r3
 800033c:	4460      	add	r0, ip
 800033e:	e7f2      	b.n	8000326 <__aeabi_f2uiz+0x16>

08000340 <__aeabi_fadd>:
 8000340:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000342:	4646      	mov	r6, r8
 8000344:	46d6      	mov	lr, sl
 8000346:	464f      	mov	r7, r9
 8000348:	024d      	lsls	r5, r1, #9
 800034a:	0242      	lsls	r2, r0, #9
 800034c:	b5c0      	push	{r6, r7, lr}
 800034e:	0a52      	lsrs	r2, r2, #9
 8000350:	0a6e      	lsrs	r6, r5, #9
 8000352:	0047      	lsls	r7, r0, #1
 8000354:	46b0      	mov	r8, r6
 8000356:	0e3f      	lsrs	r7, r7, #24
 8000358:	004e      	lsls	r6, r1, #1
 800035a:	0fc4      	lsrs	r4, r0, #31
 800035c:	00d0      	lsls	r0, r2, #3
 800035e:	4694      	mov	ip, r2
 8000360:	003b      	movs	r3, r7
 8000362:	4682      	mov	sl, r0
 8000364:	0e36      	lsrs	r6, r6, #24
 8000366:	0fc9      	lsrs	r1, r1, #31
 8000368:	09ad      	lsrs	r5, r5, #6
 800036a:	428c      	cmp	r4, r1
 800036c:	d06d      	beq.n	800044a <__aeabi_fadd+0x10a>
 800036e:	1bb8      	subs	r0, r7, r6
 8000370:	4681      	mov	r9, r0
 8000372:	2800      	cmp	r0, #0
 8000374:	dd4d      	ble.n	8000412 <__aeabi_fadd+0xd2>
 8000376:	2e00      	cmp	r6, #0
 8000378:	d100      	bne.n	800037c <__aeabi_fadd+0x3c>
 800037a:	e088      	b.n	800048e <__aeabi_fadd+0x14e>
 800037c:	2fff      	cmp	r7, #255	; 0xff
 800037e:	d05a      	beq.n	8000436 <__aeabi_fadd+0xf6>
 8000380:	2380      	movs	r3, #128	; 0x80
 8000382:	04db      	lsls	r3, r3, #19
 8000384:	431d      	orrs	r5, r3
 8000386:	464b      	mov	r3, r9
 8000388:	2201      	movs	r2, #1
 800038a:	2b1b      	cmp	r3, #27
 800038c:	dc0a      	bgt.n	80003a4 <__aeabi_fadd+0x64>
 800038e:	002b      	movs	r3, r5
 8000390:	464a      	mov	r2, r9
 8000392:	4649      	mov	r1, r9
 8000394:	40d3      	lsrs	r3, r2
 8000396:	2220      	movs	r2, #32
 8000398:	1a52      	subs	r2, r2, r1
 800039a:	4095      	lsls	r5, r2
 800039c:	002a      	movs	r2, r5
 800039e:	1e55      	subs	r5, r2, #1
 80003a0:	41aa      	sbcs	r2, r5
 80003a2:	431a      	orrs	r2, r3
 80003a4:	4653      	mov	r3, sl
 80003a6:	1a9a      	subs	r2, r3, r2
 80003a8:	0153      	lsls	r3, r2, #5
 80003aa:	d400      	bmi.n	80003ae <__aeabi_fadd+0x6e>
 80003ac:	e0b9      	b.n	8000522 <__aeabi_fadd+0x1e2>
 80003ae:	0192      	lsls	r2, r2, #6
 80003b0:	0996      	lsrs	r6, r2, #6
 80003b2:	0030      	movs	r0, r6
 80003b4:	f002 fcec 	bl	8002d90 <__clzsi2>
 80003b8:	3805      	subs	r0, #5
 80003ba:	4086      	lsls	r6, r0
 80003bc:	4287      	cmp	r7, r0
 80003be:	dd00      	ble.n	80003c2 <__aeabi_fadd+0x82>
 80003c0:	e0d4      	b.n	800056c <__aeabi_fadd+0x22c>
 80003c2:	0033      	movs	r3, r6
 80003c4:	1bc7      	subs	r7, r0, r7
 80003c6:	2020      	movs	r0, #32
 80003c8:	3701      	adds	r7, #1
 80003ca:	40fb      	lsrs	r3, r7
 80003cc:	1bc7      	subs	r7, r0, r7
 80003ce:	40be      	lsls	r6, r7
 80003d0:	0032      	movs	r2, r6
 80003d2:	1e56      	subs	r6, r2, #1
 80003d4:	41b2      	sbcs	r2, r6
 80003d6:	2700      	movs	r7, #0
 80003d8:	431a      	orrs	r2, r3
 80003da:	0753      	lsls	r3, r2, #29
 80003dc:	d004      	beq.n	80003e8 <__aeabi_fadd+0xa8>
 80003de:	230f      	movs	r3, #15
 80003e0:	4013      	ands	r3, r2
 80003e2:	2b04      	cmp	r3, #4
 80003e4:	d000      	beq.n	80003e8 <__aeabi_fadd+0xa8>
 80003e6:	3204      	adds	r2, #4
 80003e8:	0153      	lsls	r3, r2, #5
 80003ea:	d400      	bmi.n	80003ee <__aeabi_fadd+0xae>
 80003ec:	e09c      	b.n	8000528 <__aeabi_fadd+0x1e8>
 80003ee:	1c7b      	adds	r3, r7, #1
 80003f0:	2ffe      	cmp	r7, #254	; 0xfe
 80003f2:	d100      	bne.n	80003f6 <__aeabi_fadd+0xb6>
 80003f4:	e09a      	b.n	800052c <__aeabi_fadd+0x1ec>
 80003f6:	0192      	lsls	r2, r2, #6
 80003f8:	0a52      	lsrs	r2, r2, #9
 80003fa:	4694      	mov	ip, r2
 80003fc:	b2db      	uxtb	r3, r3
 80003fe:	05d8      	lsls	r0, r3, #23
 8000400:	4663      	mov	r3, ip
 8000402:	07e4      	lsls	r4, r4, #31
 8000404:	4318      	orrs	r0, r3
 8000406:	4320      	orrs	r0, r4
 8000408:	bce0      	pop	{r5, r6, r7}
 800040a:	46ba      	mov	sl, r7
 800040c:	46b1      	mov	r9, r6
 800040e:	46a8      	mov	r8, r5
 8000410:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000412:	2800      	cmp	r0, #0
 8000414:	d049      	beq.n	80004aa <__aeabi_fadd+0x16a>
 8000416:	1bf3      	subs	r3, r6, r7
 8000418:	2f00      	cmp	r7, #0
 800041a:	d000      	beq.n	800041e <__aeabi_fadd+0xde>
 800041c:	e0b6      	b.n	800058c <__aeabi_fadd+0x24c>
 800041e:	4652      	mov	r2, sl
 8000420:	2a00      	cmp	r2, #0
 8000422:	d060      	beq.n	80004e6 <__aeabi_fadd+0x1a6>
 8000424:	3b01      	subs	r3, #1
 8000426:	2b00      	cmp	r3, #0
 8000428:	d100      	bne.n	800042c <__aeabi_fadd+0xec>
 800042a:	e0fc      	b.n	8000626 <__aeabi_fadd+0x2e6>
 800042c:	2eff      	cmp	r6, #255	; 0xff
 800042e:	d000      	beq.n	8000432 <__aeabi_fadd+0xf2>
 8000430:	e0b4      	b.n	800059c <__aeabi_fadd+0x25c>
 8000432:	000c      	movs	r4, r1
 8000434:	4642      	mov	r2, r8
 8000436:	2a00      	cmp	r2, #0
 8000438:	d078      	beq.n	800052c <__aeabi_fadd+0x1ec>
 800043a:	2080      	movs	r0, #128	; 0x80
 800043c:	03c0      	lsls	r0, r0, #15
 800043e:	4310      	orrs	r0, r2
 8000440:	0242      	lsls	r2, r0, #9
 8000442:	0a53      	lsrs	r3, r2, #9
 8000444:	469c      	mov	ip, r3
 8000446:	23ff      	movs	r3, #255	; 0xff
 8000448:	e7d9      	b.n	80003fe <__aeabi_fadd+0xbe>
 800044a:	1bb9      	subs	r1, r7, r6
 800044c:	2900      	cmp	r1, #0
 800044e:	dd71      	ble.n	8000534 <__aeabi_fadd+0x1f4>
 8000450:	2e00      	cmp	r6, #0
 8000452:	d03f      	beq.n	80004d4 <__aeabi_fadd+0x194>
 8000454:	2fff      	cmp	r7, #255	; 0xff
 8000456:	d0ee      	beq.n	8000436 <__aeabi_fadd+0xf6>
 8000458:	2380      	movs	r3, #128	; 0x80
 800045a:	04db      	lsls	r3, r3, #19
 800045c:	431d      	orrs	r5, r3
 800045e:	2201      	movs	r2, #1
 8000460:	291b      	cmp	r1, #27
 8000462:	dc07      	bgt.n	8000474 <__aeabi_fadd+0x134>
 8000464:	002a      	movs	r2, r5
 8000466:	2320      	movs	r3, #32
 8000468:	40ca      	lsrs	r2, r1
 800046a:	1a59      	subs	r1, r3, r1
 800046c:	408d      	lsls	r5, r1
 800046e:	1e6b      	subs	r3, r5, #1
 8000470:	419d      	sbcs	r5, r3
 8000472:	432a      	orrs	r2, r5
 8000474:	4452      	add	r2, sl
 8000476:	0153      	lsls	r3, r2, #5
 8000478:	d553      	bpl.n	8000522 <__aeabi_fadd+0x1e2>
 800047a:	3701      	adds	r7, #1
 800047c:	2fff      	cmp	r7, #255	; 0xff
 800047e:	d055      	beq.n	800052c <__aeabi_fadd+0x1ec>
 8000480:	2301      	movs	r3, #1
 8000482:	497b      	ldr	r1, [pc, #492]	; (8000670 <__aeabi_fadd+0x330>)
 8000484:	4013      	ands	r3, r2
 8000486:	0852      	lsrs	r2, r2, #1
 8000488:	400a      	ands	r2, r1
 800048a:	431a      	orrs	r2, r3
 800048c:	e7a5      	b.n	80003da <__aeabi_fadd+0x9a>
 800048e:	2d00      	cmp	r5, #0
 8000490:	d02c      	beq.n	80004ec <__aeabi_fadd+0x1ac>
 8000492:	2301      	movs	r3, #1
 8000494:	425b      	negs	r3, r3
 8000496:	469c      	mov	ip, r3
 8000498:	44e1      	add	r9, ip
 800049a:	464b      	mov	r3, r9
 800049c:	2b00      	cmp	r3, #0
 800049e:	d100      	bne.n	80004a2 <__aeabi_fadd+0x162>
 80004a0:	e0ad      	b.n	80005fe <__aeabi_fadd+0x2be>
 80004a2:	2fff      	cmp	r7, #255	; 0xff
 80004a4:	d000      	beq.n	80004a8 <__aeabi_fadd+0x168>
 80004a6:	e76e      	b.n	8000386 <__aeabi_fadd+0x46>
 80004a8:	e7c5      	b.n	8000436 <__aeabi_fadd+0xf6>
 80004aa:	20fe      	movs	r0, #254	; 0xfe
 80004ac:	1c7e      	adds	r6, r7, #1
 80004ae:	4230      	tst	r0, r6
 80004b0:	d160      	bne.n	8000574 <__aeabi_fadd+0x234>
 80004b2:	2f00      	cmp	r7, #0
 80004b4:	d000      	beq.n	80004b8 <__aeabi_fadd+0x178>
 80004b6:	e093      	b.n	80005e0 <__aeabi_fadd+0x2a0>
 80004b8:	4652      	mov	r2, sl
 80004ba:	2a00      	cmp	r2, #0
 80004bc:	d100      	bne.n	80004c0 <__aeabi_fadd+0x180>
 80004be:	e0b6      	b.n	800062e <__aeabi_fadd+0x2ee>
 80004c0:	2d00      	cmp	r5, #0
 80004c2:	d09c      	beq.n	80003fe <__aeabi_fadd+0xbe>
 80004c4:	1b52      	subs	r2, r2, r5
 80004c6:	0150      	lsls	r0, r2, #5
 80004c8:	d400      	bmi.n	80004cc <__aeabi_fadd+0x18c>
 80004ca:	e0c3      	b.n	8000654 <__aeabi_fadd+0x314>
 80004cc:	4653      	mov	r3, sl
 80004ce:	000c      	movs	r4, r1
 80004d0:	1aea      	subs	r2, r5, r3
 80004d2:	e782      	b.n	80003da <__aeabi_fadd+0x9a>
 80004d4:	2d00      	cmp	r5, #0
 80004d6:	d009      	beq.n	80004ec <__aeabi_fadd+0x1ac>
 80004d8:	3901      	subs	r1, #1
 80004da:	2900      	cmp	r1, #0
 80004dc:	d100      	bne.n	80004e0 <__aeabi_fadd+0x1a0>
 80004de:	e08b      	b.n	80005f8 <__aeabi_fadd+0x2b8>
 80004e0:	2fff      	cmp	r7, #255	; 0xff
 80004e2:	d1bc      	bne.n	800045e <__aeabi_fadd+0x11e>
 80004e4:	e7a7      	b.n	8000436 <__aeabi_fadd+0xf6>
 80004e6:	000c      	movs	r4, r1
 80004e8:	4642      	mov	r2, r8
 80004ea:	0037      	movs	r7, r6
 80004ec:	2fff      	cmp	r7, #255	; 0xff
 80004ee:	d0a2      	beq.n	8000436 <__aeabi_fadd+0xf6>
 80004f0:	0252      	lsls	r2, r2, #9
 80004f2:	0a53      	lsrs	r3, r2, #9
 80004f4:	469c      	mov	ip, r3
 80004f6:	b2fb      	uxtb	r3, r7
 80004f8:	e781      	b.n	80003fe <__aeabi_fadd+0xbe>
 80004fa:	21fe      	movs	r1, #254	; 0xfe
 80004fc:	3701      	adds	r7, #1
 80004fe:	4239      	tst	r1, r7
 8000500:	d165      	bne.n	80005ce <__aeabi_fadd+0x28e>
 8000502:	2b00      	cmp	r3, #0
 8000504:	d17e      	bne.n	8000604 <__aeabi_fadd+0x2c4>
 8000506:	2800      	cmp	r0, #0
 8000508:	d100      	bne.n	800050c <__aeabi_fadd+0x1cc>
 800050a:	e0aa      	b.n	8000662 <__aeabi_fadd+0x322>
 800050c:	2d00      	cmp	r5, #0
 800050e:	d100      	bne.n	8000512 <__aeabi_fadd+0x1d2>
 8000510:	e775      	b.n	80003fe <__aeabi_fadd+0xbe>
 8000512:	002a      	movs	r2, r5
 8000514:	4452      	add	r2, sl
 8000516:	2700      	movs	r7, #0
 8000518:	0153      	lsls	r3, r2, #5
 800051a:	d502      	bpl.n	8000522 <__aeabi_fadd+0x1e2>
 800051c:	4b55      	ldr	r3, [pc, #340]	; (8000674 <__aeabi_fadd+0x334>)
 800051e:	3701      	adds	r7, #1
 8000520:	401a      	ands	r2, r3
 8000522:	0753      	lsls	r3, r2, #29
 8000524:	d000      	beq.n	8000528 <__aeabi_fadd+0x1e8>
 8000526:	e75a      	b.n	80003de <__aeabi_fadd+0x9e>
 8000528:	08d2      	lsrs	r2, r2, #3
 800052a:	e7df      	b.n	80004ec <__aeabi_fadd+0x1ac>
 800052c:	2200      	movs	r2, #0
 800052e:	23ff      	movs	r3, #255	; 0xff
 8000530:	4694      	mov	ip, r2
 8000532:	e764      	b.n	80003fe <__aeabi_fadd+0xbe>
 8000534:	2900      	cmp	r1, #0
 8000536:	d0e0      	beq.n	80004fa <__aeabi_fadd+0x1ba>
 8000538:	1bf3      	subs	r3, r6, r7
 800053a:	2f00      	cmp	r7, #0
 800053c:	d03e      	beq.n	80005bc <__aeabi_fadd+0x27c>
 800053e:	2eff      	cmp	r6, #255	; 0xff
 8000540:	d100      	bne.n	8000544 <__aeabi_fadd+0x204>
 8000542:	e777      	b.n	8000434 <__aeabi_fadd+0xf4>
 8000544:	2280      	movs	r2, #128	; 0x80
 8000546:	0001      	movs	r1, r0
 8000548:	04d2      	lsls	r2, r2, #19
 800054a:	4311      	orrs	r1, r2
 800054c:	468a      	mov	sl, r1
 800054e:	2201      	movs	r2, #1
 8000550:	2b1b      	cmp	r3, #27
 8000552:	dc08      	bgt.n	8000566 <__aeabi_fadd+0x226>
 8000554:	4652      	mov	r2, sl
 8000556:	2120      	movs	r1, #32
 8000558:	4650      	mov	r0, sl
 800055a:	40da      	lsrs	r2, r3
 800055c:	1acb      	subs	r3, r1, r3
 800055e:	4098      	lsls	r0, r3
 8000560:	1e43      	subs	r3, r0, #1
 8000562:	4198      	sbcs	r0, r3
 8000564:	4302      	orrs	r2, r0
 8000566:	0037      	movs	r7, r6
 8000568:	1952      	adds	r2, r2, r5
 800056a:	e784      	b.n	8000476 <__aeabi_fadd+0x136>
 800056c:	4a41      	ldr	r2, [pc, #260]	; (8000674 <__aeabi_fadd+0x334>)
 800056e:	1a3f      	subs	r7, r7, r0
 8000570:	4032      	ands	r2, r6
 8000572:	e732      	b.n	80003da <__aeabi_fadd+0x9a>
 8000574:	4653      	mov	r3, sl
 8000576:	1b5e      	subs	r6, r3, r5
 8000578:	0173      	lsls	r3, r6, #5
 800057a:	d42d      	bmi.n	80005d8 <__aeabi_fadd+0x298>
 800057c:	2e00      	cmp	r6, #0
 800057e:	d000      	beq.n	8000582 <__aeabi_fadd+0x242>
 8000580:	e717      	b.n	80003b2 <__aeabi_fadd+0x72>
 8000582:	2200      	movs	r2, #0
 8000584:	2400      	movs	r4, #0
 8000586:	2300      	movs	r3, #0
 8000588:	4694      	mov	ip, r2
 800058a:	e738      	b.n	80003fe <__aeabi_fadd+0xbe>
 800058c:	2eff      	cmp	r6, #255	; 0xff
 800058e:	d100      	bne.n	8000592 <__aeabi_fadd+0x252>
 8000590:	e74f      	b.n	8000432 <__aeabi_fadd+0xf2>
 8000592:	2280      	movs	r2, #128	; 0x80
 8000594:	4650      	mov	r0, sl
 8000596:	04d2      	lsls	r2, r2, #19
 8000598:	4310      	orrs	r0, r2
 800059a:	4682      	mov	sl, r0
 800059c:	2201      	movs	r2, #1
 800059e:	2b1b      	cmp	r3, #27
 80005a0:	dc08      	bgt.n	80005b4 <__aeabi_fadd+0x274>
 80005a2:	4652      	mov	r2, sl
 80005a4:	2420      	movs	r4, #32
 80005a6:	4650      	mov	r0, sl
 80005a8:	40da      	lsrs	r2, r3
 80005aa:	1ae3      	subs	r3, r4, r3
 80005ac:	4098      	lsls	r0, r3
 80005ae:	1e43      	subs	r3, r0, #1
 80005b0:	4198      	sbcs	r0, r3
 80005b2:	4302      	orrs	r2, r0
 80005b4:	000c      	movs	r4, r1
 80005b6:	0037      	movs	r7, r6
 80005b8:	1aaa      	subs	r2, r5, r2
 80005ba:	e6f5      	b.n	80003a8 <__aeabi_fadd+0x68>
 80005bc:	2800      	cmp	r0, #0
 80005be:	d093      	beq.n	80004e8 <__aeabi_fadd+0x1a8>
 80005c0:	3b01      	subs	r3, #1
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d04f      	beq.n	8000666 <__aeabi_fadd+0x326>
 80005c6:	2eff      	cmp	r6, #255	; 0xff
 80005c8:	d1c1      	bne.n	800054e <__aeabi_fadd+0x20e>
 80005ca:	4642      	mov	r2, r8
 80005cc:	e733      	b.n	8000436 <__aeabi_fadd+0xf6>
 80005ce:	2fff      	cmp	r7, #255	; 0xff
 80005d0:	d0ac      	beq.n	800052c <__aeabi_fadd+0x1ec>
 80005d2:	4455      	add	r5, sl
 80005d4:	086a      	lsrs	r2, r5, #1
 80005d6:	e7a4      	b.n	8000522 <__aeabi_fadd+0x1e2>
 80005d8:	4653      	mov	r3, sl
 80005da:	000c      	movs	r4, r1
 80005dc:	1aee      	subs	r6, r5, r3
 80005de:	e6e8      	b.n	80003b2 <__aeabi_fadd+0x72>
 80005e0:	4653      	mov	r3, sl
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d128      	bne.n	8000638 <__aeabi_fadd+0x2f8>
 80005e6:	2d00      	cmp	r5, #0
 80005e8:	d000      	beq.n	80005ec <__aeabi_fadd+0x2ac>
 80005ea:	e722      	b.n	8000432 <__aeabi_fadd+0xf2>
 80005ec:	2380      	movs	r3, #128	; 0x80
 80005ee:	03db      	lsls	r3, r3, #15
 80005f0:	469c      	mov	ip, r3
 80005f2:	2400      	movs	r4, #0
 80005f4:	23ff      	movs	r3, #255	; 0xff
 80005f6:	e702      	b.n	80003fe <__aeabi_fadd+0xbe>
 80005f8:	002a      	movs	r2, r5
 80005fa:	4452      	add	r2, sl
 80005fc:	e73b      	b.n	8000476 <__aeabi_fadd+0x136>
 80005fe:	4653      	mov	r3, sl
 8000600:	1b5a      	subs	r2, r3, r5
 8000602:	e6d1      	b.n	80003a8 <__aeabi_fadd+0x68>
 8000604:	2800      	cmp	r0, #0
 8000606:	d100      	bne.n	800060a <__aeabi_fadd+0x2ca>
 8000608:	e714      	b.n	8000434 <__aeabi_fadd+0xf4>
 800060a:	2d00      	cmp	r5, #0
 800060c:	d100      	bne.n	8000610 <__aeabi_fadd+0x2d0>
 800060e:	e712      	b.n	8000436 <__aeabi_fadd+0xf6>
 8000610:	2380      	movs	r3, #128	; 0x80
 8000612:	03db      	lsls	r3, r3, #15
 8000614:	421a      	tst	r2, r3
 8000616:	d100      	bne.n	800061a <__aeabi_fadd+0x2da>
 8000618:	e70d      	b.n	8000436 <__aeabi_fadd+0xf6>
 800061a:	4641      	mov	r1, r8
 800061c:	4219      	tst	r1, r3
 800061e:	d000      	beq.n	8000622 <__aeabi_fadd+0x2e2>
 8000620:	e709      	b.n	8000436 <__aeabi_fadd+0xf6>
 8000622:	4642      	mov	r2, r8
 8000624:	e707      	b.n	8000436 <__aeabi_fadd+0xf6>
 8000626:	000c      	movs	r4, r1
 8000628:	0037      	movs	r7, r6
 800062a:	1aaa      	subs	r2, r5, r2
 800062c:	e6bc      	b.n	80003a8 <__aeabi_fadd+0x68>
 800062e:	2d00      	cmp	r5, #0
 8000630:	d013      	beq.n	800065a <__aeabi_fadd+0x31a>
 8000632:	000c      	movs	r4, r1
 8000634:	46c4      	mov	ip, r8
 8000636:	e6e2      	b.n	80003fe <__aeabi_fadd+0xbe>
 8000638:	2d00      	cmp	r5, #0
 800063a:	d100      	bne.n	800063e <__aeabi_fadd+0x2fe>
 800063c:	e6fb      	b.n	8000436 <__aeabi_fadd+0xf6>
 800063e:	2380      	movs	r3, #128	; 0x80
 8000640:	03db      	lsls	r3, r3, #15
 8000642:	421a      	tst	r2, r3
 8000644:	d100      	bne.n	8000648 <__aeabi_fadd+0x308>
 8000646:	e6f6      	b.n	8000436 <__aeabi_fadd+0xf6>
 8000648:	4640      	mov	r0, r8
 800064a:	4218      	tst	r0, r3
 800064c:	d000      	beq.n	8000650 <__aeabi_fadd+0x310>
 800064e:	e6f2      	b.n	8000436 <__aeabi_fadd+0xf6>
 8000650:	000c      	movs	r4, r1
 8000652:	e6ef      	b.n	8000434 <__aeabi_fadd+0xf4>
 8000654:	2a00      	cmp	r2, #0
 8000656:	d000      	beq.n	800065a <__aeabi_fadd+0x31a>
 8000658:	e763      	b.n	8000522 <__aeabi_fadd+0x1e2>
 800065a:	2200      	movs	r2, #0
 800065c:	2400      	movs	r4, #0
 800065e:	4694      	mov	ip, r2
 8000660:	e6cd      	b.n	80003fe <__aeabi_fadd+0xbe>
 8000662:	46c4      	mov	ip, r8
 8000664:	e6cb      	b.n	80003fe <__aeabi_fadd+0xbe>
 8000666:	002a      	movs	r2, r5
 8000668:	0037      	movs	r7, r6
 800066a:	4452      	add	r2, sl
 800066c:	e703      	b.n	8000476 <__aeabi_fadd+0x136>
 800066e:	46c0      	nop			; (mov r8, r8)
 8000670:	7dffffff 	.word	0x7dffffff
 8000674:	fbffffff 	.word	0xfbffffff

08000678 <__aeabi_fdiv>:
 8000678:	b5f0      	push	{r4, r5, r6, r7, lr}
 800067a:	464f      	mov	r7, r9
 800067c:	4646      	mov	r6, r8
 800067e:	46d6      	mov	lr, sl
 8000680:	0245      	lsls	r5, r0, #9
 8000682:	b5c0      	push	{r6, r7, lr}
 8000684:	0047      	lsls	r7, r0, #1
 8000686:	1c0c      	adds	r4, r1, #0
 8000688:	0a6d      	lsrs	r5, r5, #9
 800068a:	0e3f      	lsrs	r7, r7, #24
 800068c:	0fc6      	lsrs	r6, r0, #31
 800068e:	2f00      	cmp	r7, #0
 8000690:	d066      	beq.n	8000760 <__aeabi_fdiv+0xe8>
 8000692:	2fff      	cmp	r7, #255	; 0xff
 8000694:	d06c      	beq.n	8000770 <__aeabi_fdiv+0xf8>
 8000696:	2300      	movs	r3, #0
 8000698:	00ea      	lsls	r2, r5, #3
 800069a:	2580      	movs	r5, #128	; 0x80
 800069c:	4699      	mov	r9, r3
 800069e:	469a      	mov	sl, r3
 80006a0:	04ed      	lsls	r5, r5, #19
 80006a2:	4315      	orrs	r5, r2
 80006a4:	3f7f      	subs	r7, #127	; 0x7f
 80006a6:	0260      	lsls	r0, r4, #9
 80006a8:	0061      	lsls	r1, r4, #1
 80006aa:	0a43      	lsrs	r3, r0, #9
 80006ac:	4698      	mov	r8, r3
 80006ae:	0e09      	lsrs	r1, r1, #24
 80006b0:	0fe4      	lsrs	r4, r4, #31
 80006b2:	2900      	cmp	r1, #0
 80006b4:	d048      	beq.n	8000748 <__aeabi_fdiv+0xd0>
 80006b6:	29ff      	cmp	r1, #255	; 0xff
 80006b8:	d010      	beq.n	80006dc <__aeabi_fdiv+0x64>
 80006ba:	2280      	movs	r2, #128	; 0x80
 80006bc:	00d8      	lsls	r0, r3, #3
 80006be:	04d2      	lsls	r2, r2, #19
 80006c0:	4302      	orrs	r2, r0
 80006c2:	4690      	mov	r8, r2
 80006c4:	2000      	movs	r0, #0
 80006c6:	397f      	subs	r1, #127	; 0x7f
 80006c8:	464a      	mov	r2, r9
 80006ca:	0033      	movs	r3, r6
 80006cc:	1a7f      	subs	r7, r7, r1
 80006ce:	4302      	orrs	r2, r0
 80006d0:	496c      	ldr	r1, [pc, #432]	; (8000884 <__aeabi_fdiv+0x20c>)
 80006d2:	0092      	lsls	r2, r2, #2
 80006d4:	588a      	ldr	r2, [r1, r2]
 80006d6:	4063      	eors	r3, r4
 80006d8:	b2db      	uxtb	r3, r3
 80006da:	4697      	mov	pc, r2
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d16d      	bne.n	80007bc <__aeabi_fdiv+0x144>
 80006e0:	2002      	movs	r0, #2
 80006e2:	3fff      	subs	r7, #255	; 0xff
 80006e4:	e033      	b.n	800074e <__aeabi_fdiv+0xd6>
 80006e6:	2300      	movs	r3, #0
 80006e8:	4698      	mov	r8, r3
 80006ea:	0026      	movs	r6, r4
 80006ec:	4645      	mov	r5, r8
 80006ee:	4682      	mov	sl, r0
 80006f0:	4653      	mov	r3, sl
 80006f2:	2b02      	cmp	r3, #2
 80006f4:	d100      	bne.n	80006f8 <__aeabi_fdiv+0x80>
 80006f6:	e07f      	b.n	80007f8 <__aeabi_fdiv+0x180>
 80006f8:	2b03      	cmp	r3, #3
 80006fa:	d100      	bne.n	80006fe <__aeabi_fdiv+0x86>
 80006fc:	e094      	b.n	8000828 <__aeabi_fdiv+0x1b0>
 80006fe:	2b01      	cmp	r3, #1
 8000700:	d017      	beq.n	8000732 <__aeabi_fdiv+0xba>
 8000702:	0038      	movs	r0, r7
 8000704:	307f      	adds	r0, #127	; 0x7f
 8000706:	2800      	cmp	r0, #0
 8000708:	dd5f      	ble.n	80007ca <__aeabi_fdiv+0x152>
 800070a:	076b      	lsls	r3, r5, #29
 800070c:	d004      	beq.n	8000718 <__aeabi_fdiv+0xa0>
 800070e:	230f      	movs	r3, #15
 8000710:	402b      	ands	r3, r5
 8000712:	2b04      	cmp	r3, #4
 8000714:	d000      	beq.n	8000718 <__aeabi_fdiv+0xa0>
 8000716:	3504      	adds	r5, #4
 8000718:	012b      	lsls	r3, r5, #4
 800071a:	d503      	bpl.n	8000724 <__aeabi_fdiv+0xac>
 800071c:	0038      	movs	r0, r7
 800071e:	4b5a      	ldr	r3, [pc, #360]	; (8000888 <__aeabi_fdiv+0x210>)
 8000720:	3080      	adds	r0, #128	; 0x80
 8000722:	401d      	ands	r5, r3
 8000724:	28fe      	cmp	r0, #254	; 0xfe
 8000726:	dc67      	bgt.n	80007f8 <__aeabi_fdiv+0x180>
 8000728:	01ad      	lsls	r5, r5, #6
 800072a:	0a6d      	lsrs	r5, r5, #9
 800072c:	b2c0      	uxtb	r0, r0
 800072e:	e002      	b.n	8000736 <__aeabi_fdiv+0xbe>
 8000730:	001e      	movs	r6, r3
 8000732:	2000      	movs	r0, #0
 8000734:	2500      	movs	r5, #0
 8000736:	05c0      	lsls	r0, r0, #23
 8000738:	4328      	orrs	r0, r5
 800073a:	07f6      	lsls	r6, r6, #31
 800073c:	4330      	orrs	r0, r6
 800073e:	bce0      	pop	{r5, r6, r7}
 8000740:	46ba      	mov	sl, r7
 8000742:	46b1      	mov	r9, r6
 8000744:	46a8      	mov	r8, r5
 8000746:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000748:	2b00      	cmp	r3, #0
 800074a:	d12b      	bne.n	80007a4 <__aeabi_fdiv+0x12c>
 800074c:	2001      	movs	r0, #1
 800074e:	464a      	mov	r2, r9
 8000750:	0033      	movs	r3, r6
 8000752:	494e      	ldr	r1, [pc, #312]	; (800088c <__aeabi_fdiv+0x214>)
 8000754:	4302      	orrs	r2, r0
 8000756:	0092      	lsls	r2, r2, #2
 8000758:	588a      	ldr	r2, [r1, r2]
 800075a:	4063      	eors	r3, r4
 800075c:	b2db      	uxtb	r3, r3
 800075e:	4697      	mov	pc, r2
 8000760:	2d00      	cmp	r5, #0
 8000762:	d113      	bne.n	800078c <__aeabi_fdiv+0x114>
 8000764:	2304      	movs	r3, #4
 8000766:	4699      	mov	r9, r3
 8000768:	3b03      	subs	r3, #3
 800076a:	2700      	movs	r7, #0
 800076c:	469a      	mov	sl, r3
 800076e:	e79a      	b.n	80006a6 <__aeabi_fdiv+0x2e>
 8000770:	2d00      	cmp	r5, #0
 8000772:	d105      	bne.n	8000780 <__aeabi_fdiv+0x108>
 8000774:	2308      	movs	r3, #8
 8000776:	4699      	mov	r9, r3
 8000778:	3b06      	subs	r3, #6
 800077a:	27ff      	movs	r7, #255	; 0xff
 800077c:	469a      	mov	sl, r3
 800077e:	e792      	b.n	80006a6 <__aeabi_fdiv+0x2e>
 8000780:	230c      	movs	r3, #12
 8000782:	4699      	mov	r9, r3
 8000784:	3b09      	subs	r3, #9
 8000786:	27ff      	movs	r7, #255	; 0xff
 8000788:	469a      	mov	sl, r3
 800078a:	e78c      	b.n	80006a6 <__aeabi_fdiv+0x2e>
 800078c:	0028      	movs	r0, r5
 800078e:	f002 faff 	bl	8002d90 <__clzsi2>
 8000792:	2776      	movs	r7, #118	; 0x76
 8000794:	1f43      	subs	r3, r0, #5
 8000796:	409d      	lsls	r5, r3
 8000798:	2300      	movs	r3, #0
 800079a:	427f      	negs	r7, r7
 800079c:	4699      	mov	r9, r3
 800079e:	469a      	mov	sl, r3
 80007a0:	1a3f      	subs	r7, r7, r0
 80007a2:	e780      	b.n	80006a6 <__aeabi_fdiv+0x2e>
 80007a4:	0018      	movs	r0, r3
 80007a6:	f002 faf3 	bl	8002d90 <__clzsi2>
 80007aa:	4642      	mov	r2, r8
 80007ac:	1f43      	subs	r3, r0, #5
 80007ae:	2176      	movs	r1, #118	; 0x76
 80007b0:	409a      	lsls	r2, r3
 80007b2:	4249      	negs	r1, r1
 80007b4:	1a09      	subs	r1, r1, r0
 80007b6:	4690      	mov	r8, r2
 80007b8:	2000      	movs	r0, #0
 80007ba:	e785      	b.n	80006c8 <__aeabi_fdiv+0x50>
 80007bc:	21ff      	movs	r1, #255	; 0xff
 80007be:	2003      	movs	r0, #3
 80007c0:	e782      	b.n	80006c8 <__aeabi_fdiv+0x50>
 80007c2:	001e      	movs	r6, r3
 80007c4:	20ff      	movs	r0, #255	; 0xff
 80007c6:	2500      	movs	r5, #0
 80007c8:	e7b5      	b.n	8000736 <__aeabi_fdiv+0xbe>
 80007ca:	2301      	movs	r3, #1
 80007cc:	1a1b      	subs	r3, r3, r0
 80007ce:	2b1b      	cmp	r3, #27
 80007d0:	dcaf      	bgt.n	8000732 <__aeabi_fdiv+0xba>
 80007d2:	379e      	adds	r7, #158	; 0x9e
 80007d4:	0029      	movs	r1, r5
 80007d6:	40bd      	lsls	r5, r7
 80007d8:	40d9      	lsrs	r1, r3
 80007da:	1e6a      	subs	r2, r5, #1
 80007dc:	4195      	sbcs	r5, r2
 80007de:	430d      	orrs	r5, r1
 80007e0:	076b      	lsls	r3, r5, #29
 80007e2:	d004      	beq.n	80007ee <__aeabi_fdiv+0x176>
 80007e4:	230f      	movs	r3, #15
 80007e6:	402b      	ands	r3, r5
 80007e8:	2b04      	cmp	r3, #4
 80007ea:	d000      	beq.n	80007ee <__aeabi_fdiv+0x176>
 80007ec:	3504      	adds	r5, #4
 80007ee:	016b      	lsls	r3, r5, #5
 80007f0:	d544      	bpl.n	800087c <__aeabi_fdiv+0x204>
 80007f2:	2001      	movs	r0, #1
 80007f4:	2500      	movs	r5, #0
 80007f6:	e79e      	b.n	8000736 <__aeabi_fdiv+0xbe>
 80007f8:	20ff      	movs	r0, #255	; 0xff
 80007fa:	2500      	movs	r5, #0
 80007fc:	e79b      	b.n	8000736 <__aeabi_fdiv+0xbe>
 80007fe:	2580      	movs	r5, #128	; 0x80
 8000800:	2600      	movs	r6, #0
 8000802:	20ff      	movs	r0, #255	; 0xff
 8000804:	03ed      	lsls	r5, r5, #15
 8000806:	e796      	b.n	8000736 <__aeabi_fdiv+0xbe>
 8000808:	2300      	movs	r3, #0
 800080a:	4698      	mov	r8, r3
 800080c:	2080      	movs	r0, #128	; 0x80
 800080e:	03c0      	lsls	r0, r0, #15
 8000810:	4205      	tst	r5, r0
 8000812:	d009      	beq.n	8000828 <__aeabi_fdiv+0x1b0>
 8000814:	4643      	mov	r3, r8
 8000816:	4203      	tst	r3, r0
 8000818:	d106      	bne.n	8000828 <__aeabi_fdiv+0x1b0>
 800081a:	4645      	mov	r5, r8
 800081c:	4305      	orrs	r5, r0
 800081e:	026d      	lsls	r5, r5, #9
 8000820:	0026      	movs	r6, r4
 8000822:	20ff      	movs	r0, #255	; 0xff
 8000824:	0a6d      	lsrs	r5, r5, #9
 8000826:	e786      	b.n	8000736 <__aeabi_fdiv+0xbe>
 8000828:	2080      	movs	r0, #128	; 0x80
 800082a:	03c0      	lsls	r0, r0, #15
 800082c:	4305      	orrs	r5, r0
 800082e:	026d      	lsls	r5, r5, #9
 8000830:	20ff      	movs	r0, #255	; 0xff
 8000832:	0a6d      	lsrs	r5, r5, #9
 8000834:	e77f      	b.n	8000736 <__aeabi_fdiv+0xbe>
 8000836:	4641      	mov	r1, r8
 8000838:	016a      	lsls	r2, r5, #5
 800083a:	0148      	lsls	r0, r1, #5
 800083c:	4282      	cmp	r2, r0
 800083e:	d219      	bcs.n	8000874 <__aeabi_fdiv+0x1fc>
 8000840:	211b      	movs	r1, #27
 8000842:	2500      	movs	r5, #0
 8000844:	3f01      	subs	r7, #1
 8000846:	2601      	movs	r6, #1
 8000848:	0014      	movs	r4, r2
 800084a:	006d      	lsls	r5, r5, #1
 800084c:	0052      	lsls	r2, r2, #1
 800084e:	2c00      	cmp	r4, #0
 8000850:	db01      	blt.n	8000856 <__aeabi_fdiv+0x1de>
 8000852:	4290      	cmp	r0, r2
 8000854:	d801      	bhi.n	800085a <__aeabi_fdiv+0x1e2>
 8000856:	1a12      	subs	r2, r2, r0
 8000858:	4335      	orrs	r5, r6
 800085a:	3901      	subs	r1, #1
 800085c:	2900      	cmp	r1, #0
 800085e:	d1f3      	bne.n	8000848 <__aeabi_fdiv+0x1d0>
 8000860:	1e50      	subs	r0, r2, #1
 8000862:	4182      	sbcs	r2, r0
 8000864:	0038      	movs	r0, r7
 8000866:	307f      	adds	r0, #127	; 0x7f
 8000868:	001e      	movs	r6, r3
 800086a:	4315      	orrs	r5, r2
 800086c:	2800      	cmp	r0, #0
 800086e:	dd00      	ble.n	8000872 <__aeabi_fdiv+0x1fa>
 8000870:	e74b      	b.n	800070a <__aeabi_fdiv+0x92>
 8000872:	e7aa      	b.n	80007ca <__aeabi_fdiv+0x152>
 8000874:	211a      	movs	r1, #26
 8000876:	2501      	movs	r5, #1
 8000878:	1a12      	subs	r2, r2, r0
 800087a:	e7e4      	b.n	8000846 <__aeabi_fdiv+0x1ce>
 800087c:	01ad      	lsls	r5, r5, #6
 800087e:	2000      	movs	r0, #0
 8000880:	0a6d      	lsrs	r5, r5, #9
 8000882:	e758      	b.n	8000736 <__aeabi_fdiv+0xbe>
 8000884:	08006d38 	.word	0x08006d38
 8000888:	f7ffffff 	.word	0xf7ffffff
 800088c:	08006d78 	.word	0x08006d78

08000890 <__eqsf2>:
 8000890:	b570      	push	{r4, r5, r6, lr}
 8000892:	0042      	lsls	r2, r0, #1
 8000894:	024e      	lsls	r6, r1, #9
 8000896:	004c      	lsls	r4, r1, #1
 8000898:	0245      	lsls	r5, r0, #9
 800089a:	0a6d      	lsrs	r5, r5, #9
 800089c:	0e12      	lsrs	r2, r2, #24
 800089e:	0fc3      	lsrs	r3, r0, #31
 80008a0:	0a76      	lsrs	r6, r6, #9
 80008a2:	0e24      	lsrs	r4, r4, #24
 80008a4:	0fc9      	lsrs	r1, r1, #31
 80008a6:	2aff      	cmp	r2, #255	; 0xff
 80008a8:	d00f      	beq.n	80008ca <__eqsf2+0x3a>
 80008aa:	2cff      	cmp	r4, #255	; 0xff
 80008ac:	d011      	beq.n	80008d2 <__eqsf2+0x42>
 80008ae:	2001      	movs	r0, #1
 80008b0:	42a2      	cmp	r2, r4
 80008b2:	d000      	beq.n	80008b6 <__eqsf2+0x26>
 80008b4:	bd70      	pop	{r4, r5, r6, pc}
 80008b6:	42b5      	cmp	r5, r6
 80008b8:	d1fc      	bne.n	80008b4 <__eqsf2+0x24>
 80008ba:	428b      	cmp	r3, r1
 80008bc:	d00d      	beq.n	80008da <__eqsf2+0x4a>
 80008be:	2a00      	cmp	r2, #0
 80008c0:	d1f8      	bne.n	80008b4 <__eqsf2+0x24>
 80008c2:	0028      	movs	r0, r5
 80008c4:	1e45      	subs	r5, r0, #1
 80008c6:	41a8      	sbcs	r0, r5
 80008c8:	e7f4      	b.n	80008b4 <__eqsf2+0x24>
 80008ca:	2001      	movs	r0, #1
 80008cc:	2d00      	cmp	r5, #0
 80008ce:	d1f1      	bne.n	80008b4 <__eqsf2+0x24>
 80008d0:	e7eb      	b.n	80008aa <__eqsf2+0x1a>
 80008d2:	2001      	movs	r0, #1
 80008d4:	2e00      	cmp	r6, #0
 80008d6:	d1ed      	bne.n	80008b4 <__eqsf2+0x24>
 80008d8:	e7e9      	b.n	80008ae <__eqsf2+0x1e>
 80008da:	2000      	movs	r0, #0
 80008dc:	e7ea      	b.n	80008b4 <__eqsf2+0x24>
 80008de:	46c0      	nop			; (mov r8, r8)

080008e0 <__gesf2>:
 80008e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008e2:	0042      	lsls	r2, r0, #1
 80008e4:	0246      	lsls	r6, r0, #9
 80008e6:	024d      	lsls	r5, r1, #9
 80008e8:	004c      	lsls	r4, r1, #1
 80008ea:	0fc3      	lsrs	r3, r0, #31
 80008ec:	0a76      	lsrs	r6, r6, #9
 80008ee:	0e12      	lsrs	r2, r2, #24
 80008f0:	0a6d      	lsrs	r5, r5, #9
 80008f2:	0e24      	lsrs	r4, r4, #24
 80008f4:	0fc8      	lsrs	r0, r1, #31
 80008f6:	2aff      	cmp	r2, #255	; 0xff
 80008f8:	d01f      	beq.n	800093a <__gesf2+0x5a>
 80008fa:	2cff      	cmp	r4, #255	; 0xff
 80008fc:	d010      	beq.n	8000920 <__gesf2+0x40>
 80008fe:	2a00      	cmp	r2, #0
 8000900:	d11f      	bne.n	8000942 <__gesf2+0x62>
 8000902:	4271      	negs	r1, r6
 8000904:	4171      	adcs	r1, r6
 8000906:	2c00      	cmp	r4, #0
 8000908:	d101      	bne.n	800090e <__gesf2+0x2e>
 800090a:	2d00      	cmp	r5, #0
 800090c:	d01e      	beq.n	800094c <__gesf2+0x6c>
 800090e:	2900      	cmp	r1, #0
 8000910:	d10e      	bne.n	8000930 <__gesf2+0x50>
 8000912:	4283      	cmp	r3, r0
 8000914:	d01e      	beq.n	8000954 <__gesf2+0x74>
 8000916:	2102      	movs	r1, #2
 8000918:	1e58      	subs	r0, r3, #1
 800091a:	4008      	ands	r0, r1
 800091c:	3801      	subs	r0, #1
 800091e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000920:	2d00      	cmp	r5, #0
 8000922:	d126      	bne.n	8000972 <__gesf2+0x92>
 8000924:	2a00      	cmp	r2, #0
 8000926:	d1f4      	bne.n	8000912 <__gesf2+0x32>
 8000928:	4271      	negs	r1, r6
 800092a:	4171      	adcs	r1, r6
 800092c:	2900      	cmp	r1, #0
 800092e:	d0f0      	beq.n	8000912 <__gesf2+0x32>
 8000930:	2800      	cmp	r0, #0
 8000932:	d1f4      	bne.n	800091e <__gesf2+0x3e>
 8000934:	2001      	movs	r0, #1
 8000936:	4240      	negs	r0, r0
 8000938:	e7f1      	b.n	800091e <__gesf2+0x3e>
 800093a:	2e00      	cmp	r6, #0
 800093c:	d119      	bne.n	8000972 <__gesf2+0x92>
 800093e:	2cff      	cmp	r4, #255	; 0xff
 8000940:	d0ee      	beq.n	8000920 <__gesf2+0x40>
 8000942:	2c00      	cmp	r4, #0
 8000944:	d1e5      	bne.n	8000912 <__gesf2+0x32>
 8000946:	2d00      	cmp	r5, #0
 8000948:	d1e3      	bne.n	8000912 <__gesf2+0x32>
 800094a:	e7e4      	b.n	8000916 <__gesf2+0x36>
 800094c:	2000      	movs	r0, #0
 800094e:	2e00      	cmp	r6, #0
 8000950:	d0e5      	beq.n	800091e <__gesf2+0x3e>
 8000952:	e7e0      	b.n	8000916 <__gesf2+0x36>
 8000954:	42a2      	cmp	r2, r4
 8000956:	dc05      	bgt.n	8000964 <__gesf2+0x84>
 8000958:	dbea      	blt.n	8000930 <__gesf2+0x50>
 800095a:	42ae      	cmp	r6, r5
 800095c:	d802      	bhi.n	8000964 <__gesf2+0x84>
 800095e:	d3e7      	bcc.n	8000930 <__gesf2+0x50>
 8000960:	2000      	movs	r0, #0
 8000962:	e7dc      	b.n	800091e <__gesf2+0x3e>
 8000964:	4241      	negs	r1, r0
 8000966:	4141      	adcs	r1, r0
 8000968:	4248      	negs	r0, r1
 800096a:	2102      	movs	r1, #2
 800096c:	4008      	ands	r0, r1
 800096e:	3801      	subs	r0, #1
 8000970:	e7d5      	b.n	800091e <__gesf2+0x3e>
 8000972:	2002      	movs	r0, #2
 8000974:	4240      	negs	r0, r0
 8000976:	e7d2      	b.n	800091e <__gesf2+0x3e>

08000978 <__lesf2>:
 8000978:	b5f0      	push	{r4, r5, r6, r7, lr}
 800097a:	0042      	lsls	r2, r0, #1
 800097c:	0246      	lsls	r6, r0, #9
 800097e:	024d      	lsls	r5, r1, #9
 8000980:	004c      	lsls	r4, r1, #1
 8000982:	0fc3      	lsrs	r3, r0, #31
 8000984:	0a76      	lsrs	r6, r6, #9
 8000986:	0e12      	lsrs	r2, r2, #24
 8000988:	0a6d      	lsrs	r5, r5, #9
 800098a:	0e24      	lsrs	r4, r4, #24
 800098c:	0fc8      	lsrs	r0, r1, #31
 800098e:	2aff      	cmp	r2, #255	; 0xff
 8000990:	d00d      	beq.n	80009ae <__lesf2+0x36>
 8000992:	2cff      	cmp	r4, #255	; 0xff
 8000994:	d00f      	beq.n	80009b6 <__lesf2+0x3e>
 8000996:	2a00      	cmp	r2, #0
 8000998:	d123      	bne.n	80009e2 <__lesf2+0x6a>
 800099a:	4271      	negs	r1, r6
 800099c:	4171      	adcs	r1, r6
 800099e:	2c00      	cmp	r4, #0
 80009a0:	d10f      	bne.n	80009c2 <__lesf2+0x4a>
 80009a2:	2d00      	cmp	r5, #0
 80009a4:	d10d      	bne.n	80009c2 <__lesf2+0x4a>
 80009a6:	2000      	movs	r0, #0
 80009a8:	2e00      	cmp	r6, #0
 80009aa:	d014      	beq.n	80009d6 <__lesf2+0x5e>
 80009ac:	e00d      	b.n	80009ca <__lesf2+0x52>
 80009ae:	2e00      	cmp	r6, #0
 80009b0:	d110      	bne.n	80009d4 <__lesf2+0x5c>
 80009b2:	2cff      	cmp	r4, #255	; 0xff
 80009b4:	d115      	bne.n	80009e2 <__lesf2+0x6a>
 80009b6:	2d00      	cmp	r5, #0
 80009b8:	d10c      	bne.n	80009d4 <__lesf2+0x5c>
 80009ba:	2a00      	cmp	r2, #0
 80009bc:	d103      	bne.n	80009c6 <__lesf2+0x4e>
 80009be:	4271      	negs	r1, r6
 80009c0:	4171      	adcs	r1, r6
 80009c2:	2900      	cmp	r1, #0
 80009c4:	d108      	bne.n	80009d8 <__lesf2+0x60>
 80009c6:	4283      	cmp	r3, r0
 80009c8:	d010      	beq.n	80009ec <__lesf2+0x74>
 80009ca:	2102      	movs	r1, #2
 80009cc:	1e58      	subs	r0, r3, #1
 80009ce:	4008      	ands	r0, r1
 80009d0:	3801      	subs	r0, #1
 80009d2:	e000      	b.n	80009d6 <__lesf2+0x5e>
 80009d4:	2002      	movs	r0, #2
 80009d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80009d8:	2800      	cmp	r0, #0
 80009da:	d1fc      	bne.n	80009d6 <__lesf2+0x5e>
 80009dc:	2001      	movs	r0, #1
 80009de:	4240      	negs	r0, r0
 80009e0:	e7f9      	b.n	80009d6 <__lesf2+0x5e>
 80009e2:	2c00      	cmp	r4, #0
 80009e4:	d1ef      	bne.n	80009c6 <__lesf2+0x4e>
 80009e6:	2d00      	cmp	r5, #0
 80009e8:	d1ed      	bne.n	80009c6 <__lesf2+0x4e>
 80009ea:	e7ee      	b.n	80009ca <__lesf2+0x52>
 80009ec:	42a2      	cmp	r2, r4
 80009ee:	dc05      	bgt.n	80009fc <__lesf2+0x84>
 80009f0:	dbf2      	blt.n	80009d8 <__lesf2+0x60>
 80009f2:	42ae      	cmp	r6, r5
 80009f4:	d802      	bhi.n	80009fc <__lesf2+0x84>
 80009f6:	d3ef      	bcc.n	80009d8 <__lesf2+0x60>
 80009f8:	2000      	movs	r0, #0
 80009fa:	e7ec      	b.n	80009d6 <__lesf2+0x5e>
 80009fc:	4241      	negs	r1, r0
 80009fe:	4141      	adcs	r1, r0
 8000a00:	4248      	negs	r0, r1
 8000a02:	2102      	movs	r1, #2
 8000a04:	4008      	ands	r0, r1
 8000a06:	3801      	subs	r0, #1
 8000a08:	e7e5      	b.n	80009d6 <__lesf2+0x5e>
 8000a0a:	46c0      	nop			; (mov r8, r8)

08000a0c <__aeabi_fmul>:
 8000a0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a0e:	4657      	mov	r7, sl
 8000a10:	464e      	mov	r6, r9
 8000a12:	4645      	mov	r5, r8
 8000a14:	46de      	mov	lr, fp
 8000a16:	0244      	lsls	r4, r0, #9
 8000a18:	b5e0      	push	{r5, r6, r7, lr}
 8000a1a:	0045      	lsls	r5, r0, #1
 8000a1c:	1c0f      	adds	r7, r1, #0
 8000a1e:	0a64      	lsrs	r4, r4, #9
 8000a20:	0e2d      	lsrs	r5, r5, #24
 8000a22:	0fc6      	lsrs	r6, r0, #31
 8000a24:	2d00      	cmp	r5, #0
 8000a26:	d047      	beq.n	8000ab8 <__aeabi_fmul+0xac>
 8000a28:	2dff      	cmp	r5, #255	; 0xff
 8000a2a:	d04d      	beq.n	8000ac8 <__aeabi_fmul+0xbc>
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	2080      	movs	r0, #128	; 0x80
 8000a30:	469a      	mov	sl, r3
 8000a32:	469b      	mov	fp, r3
 8000a34:	00e4      	lsls	r4, r4, #3
 8000a36:	04c0      	lsls	r0, r0, #19
 8000a38:	4304      	orrs	r4, r0
 8000a3a:	3d7f      	subs	r5, #127	; 0x7f
 8000a3c:	0278      	lsls	r0, r7, #9
 8000a3e:	0a43      	lsrs	r3, r0, #9
 8000a40:	4699      	mov	r9, r3
 8000a42:	007a      	lsls	r2, r7, #1
 8000a44:	0ffb      	lsrs	r3, r7, #31
 8000a46:	4698      	mov	r8, r3
 8000a48:	0e12      	lsrs	r2, r2, #24
 8000a4a:	464b      	mov	r3, r9
 8000a4c:	d044      	beq.n	8000ad8 <__aeabi_fmul+0xcc>
 8000a4e:	2aff      	cmp	r2, #255	; 0xff
 8000a50:	d011      	beq.n	8000a76 <__aeabi_fmul+0x6a>
 8000a52:	00d8      	lsls	r0, r3, #3
 8000a54:	2380      	movs	r3, #128	; 0x80
 8000a56:	04db      	lsls	r3, r3, #19
 8000a58:	4303      	orrs	r3, r0
 8000a5a:	4699      	mov	r9, r3
 8000a5c:	2000      	movs	r0, #0
 8000a5e:	3a7f      	subs	r2, #127	; 0x7f
 8000a60:	18ad      	adds	r5, r5, r2
 8000a62:	4647      	mov	r7, r8
 8000a64:	4653      	mov	r3, sl
 8000a66:	4077      	eors	r7, r6
 8000a68:	1c69      	adds	r1, r5, #1
 8000a6a:	2b0f      	cmp	r3, #15
 8000a6c:	d83f      	bhi.n	8000aee <__aeabi_fmul+0xe2>
 8000a6e:	4a72      	ldr	r2, [pc, #456]	; (8000c38 <__aeabi_fmul+0x22c>)
 8000a70:	009b      	lsls	r3, r3, #2
 8000a72:	58d3      	ldr	r3, [r2, r3]
 8000a74:	469f      	mov	pc, r3
 8000a76:	35ff      	adds	r5, #255	; 0xff
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d000      	beq.n	8000a7e <__aeabi_fmul+0x72>
 8000a7c:	e079      	b.n	8000b72 <__aeabi_fmul+0x166>
 8000a7e:	4652      	mov	r2, sl
 8000a80:	2302      	movs	r3, #2
 8000a82:	431a      	orrs	r2, r3
 8000a84:	4692      	mov	sl, r2
 8000a86:	2002      	movs	r0, #2
 8000a88:	e7eb      	b.n	8000a62 <__aeabi_fmul+0x56>
 8000a8a:	4647      	mov	r7, r8
 8000a8c:	464c      	mov	r4, r9
 8000a8e:	4683      	mov	fp, r0
 8000a90:	465b      	mov	r3, fp
 8000a92:	2b02      	cmp	r3, #2
 8000a94:	d028      	beq.n	8000ae8 <__aeabi_fmul+0xdc>
 8000a96:	2b03      	cmp	r3, #3
 8000a98:	d100      	bne.n	8000a9c <__aeabi_fmul+0x90>
 8000a9a:	e0c6      	b.n	8000c2a <__aeabi_fmul+0x21e>
 8000a9c:	2b01      	cmp	r3, #1
 8000a9e:	d14f      	bne.n	8000b40 <__aeabi_fmul+0x134>
 8000aa0:	2000      	movs	r0, #0
 8000aa2:	2400      	movs	r4, #0
 8000aa4:	05c0      	lsls	r0, r0, #23
 8000aa6:	07ff      	lsls	r7, r7, #31
 8000aa8:	4320      	orrs	r0, r4
 8000aaa:	4338      	orrs	r0, r7
 8000aac:	bcf0      	pop	{r4, r5, r6, r7}
 8000aae:	46bb      	mov	fp, r7
 8000ab0:	46b2      	mov	sl, r6
 8000ab2:	46a9      	mov	r9, r5
 8000ab4:	46a0      	mov	r8, r4
 8000ab6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000ab8:	2c00      	cmp	r4, #0
 8000aba:	d171      	bne.n	8000ba0 <__aeabi_fmul+0x194>
 8000abc:	2304      	movs	r3, #4
 8000abe:	469a      	mov	sl, r3
 8000ac0:	3b03      	subs	r3, #3
 8000ac2:	2500      	movs	r5, #0
 8000ac4:	469b      	mov	fp, r3
 8000ac6:	e7b9      	b.n	8000a3c <__aeabi_fmul+0x30>
 8000ac8:	2c00      	cmp	r4, #0
 8000aca:	d163      	bne.n	8000b94 <__aeabi_fmul+0x188>
 8000acc:	2308      	movs	r3, #8
 8000ace:	469a      	mov	sl, r3
 8000ad0:	3b06      	subs	r3, #6
 8000ad2:	25ff      	movs	r5, #255	; 0xff
 8000ad4:	469b      	mov	fp, r3
 8000ad6:	e7b1      	b.n	8000a3c <__aeabi_fmul+0x30>
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d150      	bne.n	8000b7e <__aeabi_fmul+0x172>
 8000adc:	4652      	mov	r2, sl
 8000ade:	3301      	adds	r3, #1
 8000ae0:	431a      	orrs	r2, r3
 8000ae2:	4692      	mov	sl, r2
 8000ae4:	2001      	movs	r0, #1
 8000ae6:	e7bc      	b.n	8000a62 <__aeabi_fmul+0x56>
 8000ae8:	20ff      	movs	r0, #255	; 0xff
 8000aea:	2400      	movs	r4, #0
 8000aec:	e7da      	b.n	8000aa4 <__aeabi_fmul+0x98>
 8000aee:	4648      	mov	r0, r9
 8000af0:	0c26      	lsrs	r6, r4, #16
 8000af2:	0424      	lsls	r4, r4, #16
 8000af4:	0c22      	lsrs	r2, r4, #16
 8000af6:	0404      	lsls	r4, r0, #16
 8000af8:	0c24      	lsrs	r4, r4, #16
 8000afa:	464b      	mov	r3, r9
 8000afc:	0020      	movs	r0, r4
 8000afe:	0c1b      	lsrs	r3, r3, #16
 8000b00:	4350      	muls	r0, r2
 8000b02:	4374      	muls	r4, r6
 8000b04:	435a      	muls	r2, r3
 8000b06:	435e      	muls	r6, r3
 8000b08:	1912      	adds	r2, r2, r4
 8000b0a:	0c03      	lsrs	r3, r0, #16
 8000b0c:	189b      	adds	r3, r3, r2
 8000b0e:	429c      	cmp	r4, r3
 8000b10:	d903      	bls.n	8000b1a <__aeabi_fmul+0x10e>
 8000b12:	2280      	movs	r2, #128	; 0x80
 8000b14:	0252      	lsls	r2, r2, #9
 8000b16:	4694      	mov	ip, r2
 8000b18:	4466      	add	r6, ip
 8000b1a:	0400      	lsls	r0, r0, #16
 8000b1c:	041a      	lsls	r2, r3, #16
 8000b1e:	0c00      	lsrs	r0, r0, #16
 8000b20:	1812      	adds	r2, r2, r0
 8000b22:	0194      	lsls	r4, r2, #6
 8000b24:	1e60      	subs	r0, r4, #1
 8000b26:	4184      	sbcs	r4, r0
 8000b28:	0c1b      	lsrs	r3, r3, #16
 8000b2a:	0e92      	lsrs	r2, r2, #26
 8000b2c:	199b      	adds	r3, r3, r6
 8000b2e:	4314      	orrs	r4, r2
 8000b30:	019b      	lsls	r3, r3, #6
 8000b32:	431c      	orrs	r4, r3
 8000b34:	011b      	lsls	r3, r3, #4
 8000b36:	d572      	bpl.n	8000c1e <__aeabi_fmul+0x212>
 8000b38:	2001      	movs	r0, #1
 8000b3a:	0863      	lsrs	r3, r4, #1
 8000b3c:	4004      	ands	r4, r0
 8000b3e:	431c      	orrs	r4, r3
 8000b40:	0008      	movs	r0, r1
 8000b42:	307f      	adds	r0, #127	; 0x7f
 8000b44:	2800      	cmp	r0, #0
 8000b46:	dd3c      	ble.n	8000bc2 <__aeabi_fmul+0x1b6>
 8000b48:	0763      	lsls	r3, r4, #29
 8000b4a:	d004      	beq.n	8000b56 <__aeabi_fmul+0x14a>
 8000b4c:	230f      	movs	r3, #15
 8000b4e:	4023      	ands	r3, r4
 8000b50:	2b04      	cmp	r3, #4
 8000b52:	d000      	beq.n	8000b56 <__aeabi_fmul+0x14a>
 8000b54:	3404      	adds	r4, #4
 8000b56:	0123      	lsls	r3, r4, #4
 8000b58:	d503      	bpl.n	8000b62 <__aeabi_fmul+0x156>
 8000b5a:	3180      	adds	r1, #128	; 0x80
 8000b5c:	0008      	movs	r0, r1
 8000b5e:	4b37      	ldr	r3, [pc, #220]	; (8000c3c <__aeabi_fmul+0x230>)
 8000b60:	401c      	ands	r4, r3
 8000b62:	28fe      	cmp	r0, #254	; 0xfe
 8000b64:	dcc0      	bgt.n	8000ae8 <__aeabi_fmul+0xdc>
 8000b66:	01a4      	lsls	r4, r4, #6
 8000b68:	0a64      	lsrs	r4, r4, #9
 8000b6a:	b2c0      	uxtb	r0, r0
 8000b6c:	e79a      	b.n	8000aa4 <__aeabi_fmul+0x98>
 8000b6e:	0037      	movs	r7, r6
 8000b70:	e78e      	b.n	8000a90 <__aeabi_fmul+0x84>
 8000b72:	4652      	mov	r2, sl
 8000b74:	2303      	movs	r3, #3
 8000b76:	431a      	orrs	r2, r3
 8000b78:	4692      	mov	sl, r2
 8000b7a:	2003      	movs	r0, #3
 8000b7c:	e771      	b.n	8000a62 <__aeabi_fmul+0x56>
 8000b7e:	4648      	mov	r0, r9
 8000b80:	f002 f906 	bl	8002d90 <__clzsi2>
 8000b84:	464a      	mov	r2, r9
 8000b86:	1f43      	subs	r3, r0, #5
 8000b88:	409a      	lsls	r2, r3
 8000b8a:	1a2d      	subs	r5, r5, r0
 8000b8c:	4691      	mov	r9, r2
 8000b8e:	2000      	movs	r0, #0
 8000b90:	3d76      	subs	r5, #118	; 0x76
 8000b92:	e766      	b.n	8000a62 <__aeabi_fmul+0x56>
 8000b94:	230c      	movs	r3, #12
 8000b96:	469a      	mov	sl, r3
 8000b98:	3b09      	subs	r3, #9
 8000b9a:	25ff      	movs	r5, #255	; 0xff
 8000b9c:	469b      	mov	fp, r3
 8000b9e:	e74d      	b.n	8000a3c <__aeabi_fmul+0x30>
 8000ba0:	0020      	movs	r0, r4
 8000ba2:	f002 f8f5 	bl	8002d90 <__clzsi2>
 8000ba6:	2576      	movs	r5, #118	; 0x76
 8000ba8:	1f43      	subs	r3, r0, #5
 8000baa:	409c      	lsls	r4, r3
 8000bac:	2300      	movs	r3, #0
 8000bae:	426d      	negs	r5, r5
 8000bb0:	469a      	mov	sl, r3
 8000bb2:	469b      	mov	fp, r3
 8000bb4:	1a2d      	subs	r5, r5, r0
 8000bb6:	e741      	b.n	8000a3c <__aeabi_fmul+0x30>
 8000bb8:	2480      	movs	r4, #128	; 0x80
 8000bba:	2700      	movs	r7, #0
 8000bbc:	20ff      	movs	r0, #255	; 0xff
 8000bbe:	03e4      	lsls	r4, r4, #15
 8000bc0:	e770      	b.n	8000aa4 <__aeabi_fmul+0x98>
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	1a1b      	subs	r3, r3, r0
 8000bc6:	2b1b      	cmp	r3, #27
 8000bc8:	dd00      	ble.n	8000bcc <__aeabi_fmul+0x1c0>
 8000bca:	e769      	b.n	8000aa0 <__aeabi_fmul+0x94>
 8000bcc:	319e      	adds	r1, #158	; 0x9e
 8000bce:	0020      	movs	r0, r4
 8000bd0:	408c      	lsls	r4, r1
 8000bd2:	40d8      	lsrs	r0, r3
 8000bd4:	1e63      	subs	r3, r4, #1
 8000bd6:	419c      	sbcs	r4, r3
 8000bd8:	4304      	orrs	r4, r0
 8000bda:	0763      	lsls	r3, r4, #29
 8000bdc:	d004      	beq.n	8000be8 <__aeabi_fmul+0x1dc>
 8000bde:	230f      	movs	r3, #15
 8000be0:	4023      	ands	r3, r4
 8000be2:	2b04      	cmp	r3, #4
 8000be4:	d000      	beq.n	8000be8 <__aeabi_fmul+0x1dc>
 8000be6:	3404      	adds	r4, #4
 8000be8:	0163      	lsls	r3, r4, #5
 8000bea:	d51a      	bpl.n	8000c22 <__aeabi_fmul+0x216>
 8000bec:	2001      	movs	r0, #1
 8000bee:	2400      	movs	r4, #0
 8000bf0:	e758      	b.n	8000aa4 <__aeabi_fmul+0x98>
 8000bf2:	2080      	movs	r0, #128	; 0x80
 8000bf4:	03c0      	lsls	r0, r0, #15
 8000bf6:	4204      	tst	r4, r0
 8000bf8:	d009      	beq.n	8000c0e <__aeabi_fmul+0x202>
 8000bfa:	464b      	mov	r3, r9
 8000bfc:	4203      	tst	r3, r0
 8000bfe:	d106      	bne.n	8000c0e <__aeabi_fmul+0x202>
 8000c00:	464c      	mov	r4, r9
 8000c02:	4304      	orrs	r4, r0
 8000c04:	0264      	lsls	r4, r4, #9
 8000c06:	4647      	mov	r7, r8
 8000c08:	20ff      	movs	r0, #255	; 0xff
 8000c0a:	0a64      	lsrs	r4, r4, #9
 8000c0c:	e74a      	b.n	8000aa4 <__aeabi_fmul+0x98>
 8000c0e:	2080      	movs	r0, #128	; 0x80
 8000c10:	03c0      	lsls	r0, r0, #15
 8000c12:	4304      	orrs	r4, r0
 8000c14:	0264      	lsls	r4, r4, #9
 8000c16:	0037      	movs	r7, r6
 8000c18:	20ff      	movs	r0, #255	; 0xff
 8000c1a:	0a64      	lsrs	r4, r4, #9
 8000c1c:	e742      	b.n	8000aa4 <__aeabi_fmul+0x98>
 8000c1e:	0029      	movs	r1, r5
 8000c20:	e78e      	b.n	8000b40 <__aeabi_fmul+0x134>
 8000c22:	01a4      	lsls	r4, r4, #6
 8000c24:	2000      	movs	r0, #0
 8000c26:	0a64      	lsrs	r4, r4, #9
 8000c28:	e73c      	b.n	8000aa4 <__aeabi_fmul+0x98>
 8000c2a:	2080      	movs	r0, #128	; 0x80
 8000c2c:	03c0      	lsls	r0, r0, #15
 8000c2e:	4304      	orrs	r4, r0
 8000c30:	0264      	lsls	r4, r4, #9
 8000c32:	20ff      	movs	r0, #255	; 0xff
 8000c34:	0a64      	lsrs	r4, r4, #9
 8000c36:	e735      	b.n	8000aa4 <__aeabi_fmul+0x98>
 8000c38:	08006db8 	.word	0x08006db8
 8000c3c:	f7ffffff 	.word	0xf7ffffff

08000c40 <__aeabi_fsub>:
 8000c40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c42:	4646      	mov	r6, r8
 8000c44:	46d6      	mov	lr, sl
 8000c46:	464f      	mov	r7, r9
 8000c48:	0243      	lsls	r3, r0, #9
 8000c4a:	0a5b      	lsrs	r3, r3, #9
 8000c4c:	00da      	lsls	r2, r3, #3
 8000c4e:	4694      	mov	ip, r2
 8000c50:	024a      	lsls	r2, r1, #9
 8000c52:	b5c0      	push	{r6, r7, lr}
 8000c54:	0044      	lsls	r4, r0, #1
 8000c56:	0a56      	lsrs	r6, r2, #9
 8000c58:	1c05      	adds	r5, r0, #0
 8000c5a:	46b0      	mov	r8, r6
 8000c5c:	0e24      	lsrs	r4, r4, #24
 8000c5e:	004e      	lsls	r6, r1, #1
 8000c60:	0992      	lsrs	r2, r2, #6
 8000c62:	001f      	movs	r7, r3
 8000c64:	0020      	movs	r0, r4
 8000c66:	4692      	mov	sl, r2
 8000c68:	0fed      	lsrs	r5, r5, #31
 8000c6a:	0e36      	lsrs	r6, r6, #24
 8000c6c:	0fc9      	lsrs	r1, r1, #31
 8000c6e:	2eff      	cmp	r6, #255	; 0xff
 8000c70:	d100      	bne.n	8000c74 <__aeabi_fsub+0x34>
 8000c72:	e07f      	b.n	8000d74 <__aeabi_fsub+0x134>
 8000c74:	2201      	movs	r2, #1
 8000c76:	4051      	eors	r1, r2
 8000c78:	428d      	cmp	r5, r1
 8000c7a:	d051      	beq.n	8000d20 <__aeabi_fsub+0xe0>
 8000c7c:	1ba2      	subs	r2, r4, r6
 8000c7e:	4691      	mov	r9, r2
 8000c80:	2a00      	cmp	r2, #0
 8000c82:	dc00      	bgt.n	8000c86 <__aeabi_fsub+0x46>
 8000c84:	e07e      	b.n	8000d84 <__aeabi_fsub+0x144>
 8000c86:	2e00      	cmp	r6, #0
 8000c88:	d100      	bne.n	8000c8c <__aeabi_fsub+0x4c>
 8000c8a:	e099      	b.n	8000dc0 <__aeabi_fsub+0x180>
 8000c8c:	2cff      	cmp	r4, #255	; 0xff
 8000c8e:	d100      	bne.n	8000c92 <__aeabi_fsub+0x52>
 8000c90:	e08c      	b.n	8000dac <__aeabi_fsub+0x16c>
 8000c92:	2380      	movs	r3, #128	; 0x80
 8000c94:	4652      	mov	r2, sl
 8000c96:	04db      	lsls	r3, r3, #19
 8000c98:	431a      	orrs	r2, r3
 8000c9a:	4692      	mov	sl, r2
 8000c9c:	464a      	mov	r2, r9
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	2a1b      	cmp	r2, #27
 8000ca2:	dc08      	bgt.n	8000cb6 <__aeabi_fsub+0x76>
 8000ca4:	4653      	mov	r3, sl
 8000ca6:	2120      	movs	r1, #32
 8000ca8:	40d3      	lsrs	r3, r2
 8000caa:	1a89      	subs	r1, r1, r2
 8000cac:	4652      	mov	r2, sl
 8000cae:	408a      	lsls	r2, r1
 8000cb0:	1e51      	subs	r1, r2, #1
 8000cb2:	418a      	sbcs	r2, r1
 8000cb4:	4313      	orrs	r3, r2
 8000cb6:	4662      	mov	r2, ip
 8000cb8:	1ad3      	subs	r3, r2, r3
 8000cba:	015a      	lsls	r2, r3, #5
 8000cbc:	d400      	bmi.n	8000cc0 <__aeabi_fsub+0x80>
 8000cbe:	e0f3      	b.n	8000ea8 <__aeabi_fsub+0x268>
 8000cc0:	019b      	lsls	r3, r3, #6
 8000cc2:	099e      	lsrs	r6, r3, #6
 8000cc4:	0030      	movs	r0, r6
 8000cc6:	f002 f863 	bl	8002d90 <__clzsi2>
 8000cca:	3805      	subs	r0, #5
 8000ccc:	4086      	lsls	r6, r0
 8000cce:	4284      	cmp	r4, r0
 8000cd0:	dd00      	ble.n	8000cd4 <__aeabi_fsub+0x94>
 8000cd2:	e0f7      	b.n	8000ec4 <__aeabi_fsub+0x284>
 8000cd4:	0032      	movs	r2, r6
 8000cd6:	1b04      	subs	r4, r0, r4
 8000cd8:	2020      	movs	r0, #32
 8000cda:	3401      	adds	r4, #1
 8000cdc:	40e2      	lsrs	r2, r4
 8000cde:	1b04      	subs	r4, r0, r4
 8000ce0:	40a6      	lsls	r6, r4
 8000ce2:	0033      	movs	r3, r6
 8000ce4:	1e5e      	subs	r6, r3, #1
 8000ce6:	41b3      	sbcs	r3, r6
 8000ce8:	2400      	movs	r4, #0
 8000cea:	4313      	orrs	r3, r2
 8000cec:	075a      	lsls	r2, r3, #29
 8000cee:	d004      	beq.n	8000cfa <__aeabi_fsub+0xba>
 8000cf0:	220f      	movs	r2, #15
 8000cf2:	401a      	ands	r2, r3
 8000cf4:	2a04      	cmp	r2, #4
 8000cf6:	d000      	beq.n	8000cfa <__aeabi_fsub+0xba>
 8000cf8:	3304      	adds	r3, #4
 8000cfa:	015a      	lsls	r2, r3, #5
 8000cfc:	d400      	bmi.n	8000d00 <__aeabi_fsub+0xc0>
 8000cfe:	e0d6      	b.n	8000eae <__aeabi_fsub+0x26e>
 8000d00:	1c62      	adds	r2, r4, #1
 8000d02:	2cfe      	cmp	r4, #254	; 0xfe
 8000d04:	d100      	bne.n	8000d08 <__aeabi_fsub+0xc8>
 8000d06:	e0da      	b.n	8000ebe <__aeabi_fsub+0x27e>
 8000d08:	019b      	lsls	r3, r3, #6
 8000d0a:	0a5f      	lsrs	r7, r3, #9
 8000d0c:	b2d0      	uxtb	r0, r2
 8000d0e:	05c0      	lsls	r0, r0, #23
 8000d10:	4338      	orrs	r0, r7
 8000d12:	07ed      	lsls	r5, r5, #31
 8000d14:	4328      	orrs	r0, r5
 8000d16:	bce0      	pop	{r5, r6, r7}
 8000d18:	46ba      	mov	sl, r7
 8000d1a:	46b1      	mov	r9, r6
 8000d1c:	46a8      	mov	r8, r5
 8000d1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d20:	1ba2      	subs	r2, r4, r6
 8000d22:	4691      	mov	r9, r2
 8000d24:	2a00      	cmp	r2, #0
 8000d26:	dd63      	ble.n	8000df0 <__aeabi_fsub+0x1b0>
 8000d28:	2e00      	cmp	r6, #0
 8000d2a:	d100      	bne.n	8000d2e <__aeabi_fsub+0xee>
 8000d2c:	e099      	b.n	8000e62 <__aeabi_fsub+0x222>
 8000d2e:	2cff      	cmp	r4, #255	; 0xff
 8000d30:	d03c      	beq.n	8000dac <__aeabi_fsub+0x16c>
 8000d32:	2380      	movs	r3, #128	; 0x80
 8000d34:	4652      	mov	r2, sl
 8000d36:	04db      	lsls	r3, r3, #19
 8000d38:	431a      	orrs	r2, r3
 8000d3a:	4692      	mov	sl, r2
 8000d3c:	464a      	mov	r2, r9
 8000d3e:	2301      	movs	r3, #1
 8000d40:	2a1b      	cmp	r2, #27
 8000d42:	dc08      	bgt.n	8000d56 <__aeabi_fsub+0x116>
 8000d44:	4653      	mov	r3, sl
 8000d46:	2120      	movs	r1, #32
 8000d48:	40d3      	lsrs	r3, r2
 8000d4a:	1a89      	subs	r1, r1, r2
 8000d4c:	4652      	mov	r2, sl
 8000d4e:	408a      	lsls	r2, r1
 8000d50:	1e51      	subs	r1, r2, #1
 8000d52:	418a      	sbcs	r2, r1
 8000d54:	4313      	orrs	r3, r2
 8000d56:	4463      	add	r3, ip
 8000d58:	015a      	lsls	r2, r3, #5
 8000d5a:	d400      	bmi.n	8000d5e <__aeabi_fsub+0x11e>
 8000d5c:	e0a4      	b.n	8000ea8 <__aeabi_fsub+0x268>
 8000d5e:	3401      	adds	r4, #1
 8000d60:	2cff      	cmp	r4, #255	; 0xff
 8000d62:	d100      	bne.n	8000d66 <__aeabi_fsub+0x126>
 8000d64:	e0ab      	b.n	8000ebe <__aeabi_fsub+0x27e>
 8000d66:	2201      	movs	r2, #1
 8000d68:	4997      	ldr	r1, [pc, #604]	; (8000fc8 <__aeabi_fsub+0x388>)
 8000d6a:	401a      	ands	r2, r3
 8000d6c:	085b      	lsrs	r3, r3, #1
 8000d6e:	400b      	ands	r3, r1
 8000d70:	4313      	orrs	r3, r2
 8000d72:	e7bb      	b.n	8000cec <__aeabi_fsub+0xac>
 8000d74:	2a00      	cmp	r2, #0
 8000d76:	d032      	beq.n	8000dde <__aeabi_fsub+0x19e>
 8000d78:	428d      	cmp	r5, r1
 8000d7a:	d035      	beq.n	8000de8 <__aeabi_fsub+0x1a8>
 8000d7c:	22ff      	movs	r2, #255	; 0xff
 8000d7e:	4252      	negs	r2, r2
 8000d80:	4691      	mov	r9, r2
 8000d82:	44a1      	add	r9, r4
 8000d84:	464a      	mov	r2, r9
 8000d86:	2a00      	cmp	r2, #0
 8000d88:	d051      	beq.n	8000e2e <__aeabi_fsub+0x1ee>
 8000d8a:	1b30      	subs	r0, r6, r4
 8000d8c:	2c00      	cmp	r4, #0
 8000d8e:	d000      	beq.n	8000d92 <__aeabi_fsub+0x152>
 8000d90:	e09c      	b.n	8000ecc <__aeabi_fsub+0x28c>
 8000d92:	4663      	mov	r3, ip
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d100      	bne.n	8000d9a <__aeabi_fsub+0x15a>
 8000d98:	e0df      	b.n	8000f5a <__aeabi_fsub+0x31a>
 8000d9a:	3801      	subs	r0, #1
 8000d9c:	2800      	cmp	r0, #0
 8000d9e:	d100      	bne.n	8000da2 <__aeabi_fsub+0x162>
 8000da0:	e0f7      	b.n	8000f92 <__aeabi_fsub+0x352>
 8000da2:	2eff      	cmp	r6, #255	; 0xff
 8000da4:	d000      	beq.n	8000da8 <__aeabi_fsub+0x168>
 8000da6:	e099      	b.n	8000edc <__aeabi_fsub+0x29c>
 8000da8:	000d      	movs	r5, r1
 8000daa:	4643      	mov	r3, r8
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d100      	bne.n	8000db2 <__aeabi_fsub+0x172>
 8000db0:	e085      	b.n	8000ebe <__aeabi_fsub+0x27e>
 8000db2:	2780      	movs	r7, #128	; 0x80
 8000db4:	03ff      	lsls	r7, r7, #15
 8000db6:	431f      	orrs	r7, r3
 8000db8:	027f      	lsls	r7, r7, #9
 8000dba:	20ff      	movs	r0, #255	; 0xff
 8000dbc:	0a7f      	lsrs	r7, r7, #9
 8000dbe:	e7a6      	b.n	8000d0e <__aeabi_fsub+0xce>
 8000dc0:	4652      	mov	r2, sl
 8000dc2:	2a00      	cmp	r2, #0
 8000dc4:	d074      	beq.n	8000eb0 <__aeabi_fsub+0x270>
 8000dc6:	2201      	movs	r2, #1
 8000dc8:	4252      	negs	r2, r2
 8000dca:	4690      	mov	r8, r2
 8000dcc:	44c1      	add	r9, r8
 8000dce:	464a      	mov	r2, r9
 8000dd0:	2a00      	cmp	r2, #0
 8000dd2:	d100      	bne.n	8000dd6 <__aeabi_fsub+0x196>
 8000dd4:	e0c8      	b.n	8000f68 <__aeabi_fsub+0x328>
 8000dd6:	2cff      	cmp	r4, #255	; 0xff
 8000dd8:	d000      	beq.n	8000ddc <__aeabi_fsub+0x19c>
 8000dda:	e75f      	b.n	8000c9c <__aeabi_fsub+0x5c>
 8000ddc:	e7e6      	b.n	8000dac <__aeabi_fsub+0x16c>
 8000dde:	2201      	movs	r2, #1
 8000de0:	4051      	eors	r1, r2
 8000de2:	42a9      	cmp	r1, r5
 8000de4:	d000      	beq.n	8000de8 <__aeabi_fsub+0x1a8>
 8000de6:	e749      	b.n	8000c7c <__aeabi_fsub+0x3c>
 8000de8:	22ff      	movs	r2, #255	; 0xff
 8000dea:	4252      	negs	r2, r2
 8000dec:	4691      	mov	r9, r2
 8000dee:	44a1      	add	r9, r4
 8000df0:	464a      	mov	r2, r9
 8000df2:	2a00      	cmp	r2, #0
 8000df4:	d043      	beq.n	8000e7e <__aeabi_fsub+0x23e>
 8000df6:	1b31      	subs	r1, r6, r4
 8000df8:	2c00      	cmp	r4, #0
 8000dfa:	d100      	bne.n	8000dfe <__aeabi_fsub+0x1be>
 8000dfc:	e08c      	b.n	8000f18 <__aeabi_fsub+0x2d8>
 8000dfe:	2eff      	cmp	r6, #255	; 0xff
 8000e00:	d100      	bne.n	8000e04 <__aeabi_fsub+0x1c4>
 8000e02:	e092      	b.n	8000f2a <__aeabi_fsub+0x2ea>
 8000e04:	2380      	movs	r3, #128	; 0x80
 8000e06:	4662      	mov	r2, ip
 8000e08:	04db      	lsls	r3, r3, #19
 8000e0a:	431a      	orrs	r2, r3
 8000e0c:	4694      	mov	ip, r2
 8000e0e:	2301      	movs	r3, #1
 8000e10:	291b      	cmp	r1, #27
 8000e12:	dc09      	bgt.n	8000e28 <__aeabi_fsub+0x1e8>
 8000e14:	2020      	movs	r0, #32
 8000e16:	4663      	mov	r3, ip
 8000e18:	4662      	mov	r2, ip
 8000e1a:	40cb      	lsrs	r3, r1
 8000e1c:	1a41      	subs	r1, r0, r1
 8000e1e:	408a      	lsls	r2, r1
 8000e20:	0011      	movs	r1, r2
 8000e22:	1e48      	subs	r0, r1, #1
 8000e24:	4181      	sbcs	r1, r0
 8000e26:	430b      	orrs	r3, r1
 8000e28:	0034      	movs	r4, r6
 8000e2a:	4453      	add	r3, sl
 8000e2c:	e794      	b.n	8000d58 <__aeabi_fsub+0x118>
 8000e2e:	22fe      	movs	r2, #254	; 0xfe
 8000e30:	1c66      	adds	r6, r4, #1
 8000e32:	4232      	tst	r2, r6
 8000e34:	d164      	bne.n	8000f00 <__aeabi_fsub+0x2c0>
 8000e36:	2c00      	cmp	r4, #0
 8000e38:	d000      	beq.n	8000e3c <__aeabi_fsub+0x1fc>
 8000e3a:	e082      	b.n	8000f42 <__aeabi_fsub+0x302>
 8000e3c:	4663      	mov	r3, ip
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d100      	bne.n	8000e44 <__aeabi_fsub+0x204>
 8000e42:	e0ab      	b.n	8000f9c <__aeabi_fsub+0x35c>
 8000e44:	4653      	mov	r3, sl
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d100      	bne.n	8000e4c <__aeabi_fsub+0x20c>
 8000e4a:	e760      	b.n	8000d0e <__aeabi_fsub+0xce>
 8000e4c:	4663      	mov	r3, ip
 8000e4e:	4652      	mov	r2, sl
 8000e50:	1a9b      	subs	r3, r3, r2
 8000e52:	015a      	lsls	r2, r3, #5
 8000e54:	d400      	bmi.n	8000e58 <__aeabi_fsub+0x218>
 8000e56:	e0aa      	b.n	8000fae <__aeabi_fsub+0x36e>
 8000e58:	4663      	mov	r3, ip
 8000e5a:	4652      	mov	r2, sl
 8000e5c:	000d      	movs	r5, r1
 8000e5e:	1ad3      	subs	r3, r2, r3
 8000e60:	e744      	b.n	8000cec <__aeabi_fsub+0xac>
 8000e62:	4652      	mov	r2, sl
 8000e64:	2a00      	cmp	r2, #0
 8000e66:	d023      	beq.n	8000eb0 <__aeabi_fsub+0x270>
 8000e68:	2201      	movs	r2, #1
 8000e6a:	4252      	negs	r2, r2
 8000e6c:	4690      	mov	r8, r2
 8000e6e:	44c1      	add	r9, r8
 8000e70:	464a      	mov	r2, r9
 8000e72:	2a00      	cmp	r2, #0
 8000e74:	d075      	beq.n	8000f62 <__aeabi_fsub+0x322>
 8000e76:	2cff      	cmp	r4, #255	; 0xff
 8000e78:	d000      	beq.n	8000e7c <__aeabi_fsub+0x23c>
 8000e7a:	e75f      	b.n	8000d3c <__aeabi_fsub+0xfc>
 8000e7c:	e796      	b.n	8000dac <__aeabi_fsub+0x16c>
 8000e7e:	26fe      	movs	r6, #254	; 0xfe
 8000e80:	3401      	adds	r4, #1
 8000e82:	4226      	tst	r6, r4
 8000e84:	d153      	bne.n	8000f2e <__aeabi_fsub+0x2ee>
 8000e86:	2800      	cmp	r0, #0
 8000e88:	d172      	bne.n	8000f70 <__aeabi_fsub+0x330>
 8000e8a:	4663      	mov	r3, ip
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d100      	bne.n	8000e92 <__aeabi_fsub+0x252>
 8000e90:	e093      	b.n	8000fba <__aeabi_fsub+0x37a>
 8000e92:	4653      	mov	r3, sl
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d100      	bne.n	8000e9a <__aeabi_fsub+0x25a>
 8000e98:	e739      	b.n	8000d0e <__aeabi_fsub+0xce>
 8000e9a:	4463      	add	r3, ip
 8000e9c:	2400      	movs	r4, #0
 8000e9e:	015a      	lsls	r2, r3, #5
 8000ea0:	d502      	bpl.n	8000ea8 <__aeabi_fsub+0x268>
 8000ea2:	4a4a      	ldr	r2, [pc, #296]	; (8000fcc <__aeabi_fsub+0x38c>)
 8000ea4:	3401      	adds	r4, #1
 8000ea6:	4013      	ands	r3, r2
 8000ea8:	075a      	lsls	r2, r3, #29
 8000eaa:	d000      	beq.n	8000eae <__aeabi_fsub+0x26e>
 8000eac:	e720      	b.n	8000cf0 <__aeabi_fsub+0xb0>
 8000eae:	08db      	lsrs	r3, r3, #3
 8000eb0:	2cff      	cmp	r4, #255	; 0xff
 8000eb2:	d100      	bne.n	8000eb6 <__aeabi_fsub+0x276>
 8000eb4:	e77a      	b.n	8000dac <__aeabi_fsub+0x16c>
 8000eb6:	025b      	lsls	r3, r3, #9
 8000eb8:	0a5f      	lsrs	r7, r3, #9
 8000eba:	b2e0      	uxtb	r0, r4
 8000ebc:	e727      	b.n	8000d0e <__aeabi_fsub+0xce>
 8000ebe:	20ff      	movs	r0, #255	; 0xff
 8000ec0:	2700      	movs	r7, #0
 8000ec2:	e724      	b.n	8000d0e <__aeabi_fsub+0xce>
 8000ec4:	4b41      	ldr	r3, [pc, #260]	; (8000fcc <__aeabi_fsub+0x38c>)
 8000ec6:	1a24      	subs	r4, r4, r0
 8000ec8:	4033      	ands	r3, r6
 8000eca:	e70f      	b.n	8000cec <__aeabi_fsub+0xac>
 8000ecc:	2eff      	cmp	r6, #255	; 0xff
 8000ece:	d100      	bne.n	8000ed2 <__aeabi_fsub+0x292>
 8000ed0:	e76a      	b.n	8000da8 <__aeabi_fsub+0x168>
 8000ed2:	2380      	movs	r3, #128	; 0x80
 8000ed4:	4662      	mov	r2, ip
 8000ed6:	04db      	lsls	r3, r3, #19
 8000ed8:	431a      	orrs	r2, r3
 8000eda:	4694      	mov	ip, r2
 8000edc:	2301      	movs	r3, #1
 8000ede:	281b      	cmp	r0, #27
 8000ee0:	dc09      	bgt.n	8000ef6 <__aeabi_fsub+0x2b6>
 8000ee2:	2420      	movs	r4, #32
 8000ee4:	4663      	mov	r3, ip
 8000ee6:	4662      	mov	r2, ip
 8000ee8:	40c3      	lsrs	r3, r0
 8000eea:	1a20      	subs	r0, r4, r0
 8000eec:	4082      	lsls	r2, r0
 8000eee:	0010      	movs	r0, r2
 8000ef0:	1e44      	subs	r4, r0, #1
 8000ef2:	41a0      	sbcs	r0, r4
 8000ef4:	4303      	orrs	r3, r0
 8000ef6:	4652      	mov	r2, sl
 8000ef8:	000d      	movs	r5, r1
 8000efa:	0034      	movs	r4, r6
 8000efc:	1ad3      	subs	r3, r2, r3
 8000efe:	e6dc      	b.n	8000cba <__aeabi_fsub+0x7a>
 8000f00:	4663      	mov	r3, ip
 8000f02:	4652      	mov	r2, sl
 8000f04:	1a9e      	subs	r6, r3, r2
 8000f06:	0173      	lsls	r3, r6, #5
 8000f08:	d417      	bmi.n	8000f3a <__aeabi_fsub+0x2fa>
 8000f0a:	2e00      	cmp	r6, #0
 8000f0c:	d000      	beq.n	8000f10 <__aeabi_fsub+0x2d0>
 8000f0e:	e6d9      	b.n	8000cc4 <__aeabi_fsub+0x84>
 8000f10:	2500      	movs	r5, #0
 8000f12:	2000      	movs	r0, #0
 8000f14:	2700      	movs	r7, #0
 8000f16:	e6fa      	b.n	8000d0e <__aeabi_fsub+0xce>
 8000f18:	4663      	mov	r3, ip
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d044      	beq.n	8000fa8 <__aeabi_fsub+0x368>
 8000f1e:	3901      	subs	r1, #1
 8000f20:	2900      	cmp	r1, #0
 8000f22:	d04c      	beq.n	8000fbe <__aeabi_fsub+0x37e>
 8000f24:	2eff      	cmp	r6, #255	; 0xff
 8000f26:	d000      	beq.n	8000f2a <__aeabi_fsub+0x2ea>
 8000f28:	e771      	b.n	8000e0e <__aeabi_fsub+0x1ce>
 8000f2a:	4643      	mov	r3, r8
 8000f2c:	e73e      	b.n	8000dac <__aeabi_fsub+0x16c>
 8000f2e:	2cff      	cmp	r4, #255	; 0xff
 8000f30:	d0c5      	beq.n	8000ebe <__aeabi_fsub+0x27e>
 8000f32:	4652      	mov	r2, sl
 8000f34:	4462      	add	r2, ip
 8000f36:	0853      	lsrs	r3, r2, #1
 8000f38:	e7b6      	b.n	8000ea8 <__aeabi_fsub+0x268>
 8000f3a:	4663      	mov	r3, ip
 8000f3c:	000d      	movs	r5, r1
 8000f3e:	1ad6      	subs	r6, r2, r3
 8000f40:	e6c0      	b.n	8000cc4 <__aeabi_fsub+0x84>
 8000f42:	4662      	mov	r2, ip
 8000f44:	2a00      	cmp	r2, #0
 8000f46:	d116      	bne.n	8000f76 <__aeabi_fsub+0x336>
 8000f48:	4653      	mov	r3, sl
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d000      	beq.n	8000f50 <__aeabi_fsub+0x310>
 8000f4e:	e72b      	b.n	8000da8 <__aeabi_fsub+0x168>
 8000f50:	2780      	movs	r7, #128	; 0x80
 8000f52:	2500      	movs	r5, #0
 8000f54:	20ff      	movs	r0, #255	; 0xff
 8000f56:	03ff      	lsls	r7, r7, #15
 8000f58:	e6d9      	b.n	8000d0e <__aeabi_fsub+0xce>
 8000f5a:	000d      	movs	r5, r1
 8000f5c:	4643      	mov	r3, r8
 8000f5e:	0034      	movs	r4, r6
 8000f60:	e7a6      	b.n	8000eb0 <__aeabi_fsub+0x270>
 8000f62:	4653      	mov	r3, sl
 8000f64:	4463      	add	r3, ip
 8000f66:	e6f7      	b.n	8000d58 <__aeabi_fsub+0x118>
 8000f68:	4663      	mov	r3, ip
 8000f6a:	4652      	mov	r2, sl
 8000f6c:	1a9b      	subs	r3, r3, r2
 8000f6e:	e6a4      	b.n	8000cba <__aeabi_fsub+0x7a>
 8000f70:	4662      	mov	r2, ip
 8000f72:	2a00      	cmp	r2, #0
 8000f74:	d0d9      	beq.n	8000f2a <__aeabi_fsub+0x2ea>
 8000f76:	4652      	mov	r2, sl
 8000f78:	2a00      	cmp	r2, #0
 8000f7a:	d100      	bne.n	8000f7e <__aeabi_fsub+0x33e>
 8000f7c:	e716      	b.n	8000dac <__aeabi_fsub+0x16c>
 8000f7e:	2280      	movs	r2, #128	; 0x80
 8000f80:	03d2      	lsls	r2, r2, #15
 8000f82:	4213      	tst	r3, r2
 8000f84:	d100      	bne.n	8000f88 <__aeabi_fsub+0x348>
 8000f86:	e711      	b.n	8000dac <__aeabi_fsub+0x16c>
 8000f88:	4640      	mov	r0, r8
 8000f8a:	4210      	tst	r0, r2
 8000f8c:	d000      	beq.n	8000f90 <__aeabi_fsub+0x350>
 8000f8e:	e70d      	b.n	8000dac <__aeabi_fsub+0x16c>
 8000f90:	e70a      	b.n	8000da8 <__aeabi_fsub+0x168>
 8000f92:	4652      	mov	r2, sl
 8000f94:	000d      	movs	r5, r1
 8000f96:	0034      	movs	r4, r6
 8000f98:	1ad3      	subs	r3, r2, r3
 8000f9a:	e68e      	b.n	8000cba <__aeabi_fsub+0x7a>
 8000f9c:	4653      	mov	r3, sl
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d008      	beq.n	8000fb4 <__aeabi_fsub+0x374>
 8000fa2:	000d      	movs	r5, r1
 8000fa4:	4647      	mov	r7, r8
 8000fa6:	e6b2      	b.n	8000d0e <__aeabi_fsub+0xce>
 8000fa8:	4643      	mov	r3, r8
 8000faa:	0034      	movs	r4, r6
 8000fac:	e780      	b.n	8000eb0 <__aeabi_fsub+0x270>
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d000      	beq.n	8000fb4 <__aeabi_fsub+0x374>
 8000fb2:	e779      	b.n	8000ea8 <__aeabi_fsub+0x268>
 8000fb4:	2500      	movs	r5, #0
 8000fb6:	2700      	movs	r7, #0
 8000fb8:	e6a9      	b.n	8000d0e <__aeabi_fsub+0xce>
 8000fba:	4647      	mov	r7, r8
 8000fbc:	e6a7      	b.n	8000d0e <__aeabi_fsub+0xce>
 8000fbe:	4653      	mov	r3, sl
 8000fc0:	0034      	movs	r4, r6
 8000fc2:	4463      	add	r3, ip
 8000fc4:	e6c8      	b.n	8000d58 <__aeabi_fsub+0x118>
 8000fc6:	46c0      	nop			; (mov r8, r8)
 8000fc8:	7dffffff 	.word	0x7dffffff
 8000fcc:	fbffffff 	.word	0xfbffffff

08000fd0 <__aeabi_f2iz>:
 8000fd0:	0241      	lsls	r1, r0, #9
 8000fd2:	0042      	lsls	r2, r0, #1
 8000fd4:	0fc3      	lsrs	r3, r0, #31
 8000fd6:	0a49      	lsrs	r1, r1, #9
 8000fd8:	2000      	movs	r0, #0
 8000fda:	0e12      	lsrs	r2, r2, #24
 8000fdc:	2a7e      	cmp	r2, #126	; 0x7e
 8000fde:	d903      	bls.n	8000fe8 <__aeabi_f2iz+0x18>
 8000fe0:	2a9d      	cmp	r2, #157	; 0x9d
 8000fe2:	d902      	bls.n	8000fea <__aeabi_f2iz+0x1a>
 8000fe4:	4a09      	ldr	r2, [pc, #36]	; (800100c <__aeabi_f2iz+0x3c>)
 8000fe6:	1898      	adds	r0, r3, r2
 8000fe8:	4770      	bx	lr
 8000fea:	2080      	movs	r0, #128	; 0x80
 8000fec:	0400      	lsls	r0, r0, #16
 8000fee:	4301      	orrs	r1, r0
 8000ff0:	2a95      	cmp	r2, #149	; 0x95
 8000ff2:	dc07      	bgt.n	8001004 <__aeabi_f2iz+0x34>
 8000ff4:	2096      	movs	r0, #150	; 0x96
 8000ff6:	1a82      	subs	r2, r0, r2
 8000ff8:	40d1      	lsrs	r1, r2
 8000ffa:	4248      	negs	r0, r1
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d1f3      	bne.n	8000fe8 <__aeabi_f2iz+0x18>
 8001000:	0008      	movs	r0, r1
 8001002:	e7f1      	b.n	8000fe8 <__aeabi_f2iz+0x18>
 8001004:	3a96      	subs	r2, #150	; 0x96
 8001006:	4091      	lsls	r1, r2
 8001008:	e7f7      	b.n	8000ffa <__aeabi_f2iz+0x2a>
 800100a:	46c0      	nop			; (mov r8, r8)
 800100c:	7fffffff 	.word	0x7fffffff

08001010 <__aeabi_i2f>:
 8001010:	b570      	push	{r4, r5, r6, lr}
 8001012:	2800      	cmp	r0, #0
 8001014:	d013      	beq.n	800103e <__aeabi_i2f+0x2e>
 8001016:	17c3      	asrs	r3, r0, #31
 8001018:	18c5      	adds	r5, r0, r3
 800101a:	405d      	eors	r5, r3
 800101c:	0fc4      	lsrs	r4, r0, #31
 800101e:	0028      	movs	r0, r5
 8001020:	f001 feb6 	bl	8002d90 <__clzsi2>
 8001024:	239e      	movs	r3, #158	; 0x9e
 8001026:	0001      	movs	r1, r0
 8001028:	1a1b      	subs	r3, r3, r0
 800102a:	2b96      	cmp	r3, #150	; 0x96
 800102c:	dc0f      	bgt.n	800104e <__aeabi_i2f+0x3e>
 800102e:	2808      	cmp	r0, #8
 8001030:	dd01      	ble.n	8001036 <__aeabi_i2f+0x26>
 8001032:	3908      	subs	r1, #8
 8001034:	408d      	lsls	r5, r1
 8001036:	026d      	lsls	r5, r5, #9
 8001038:	0a6d      	lsrs	r5, r5, #9
 800103a:	b2d8      	uxtb	r0, r3
 800103c:	e002      	b.n	8001044 <__aeabi_i2f+0x34>
 800103e:	2400      	movs	r4, #0
 8001040:	2000      	movs	r0, #0
 8001042:	2500      	movs	r5, #0
 8001044:	05c0      	lsls	r0, r0, #23
 8001046:	4328      	orrs	r0, r5
 8001048:	07e4      	lsls	r4, r4, #31
 800104a:	4320      	orrs	r0, r4
 800104c:	bd70      	pop	{r4, r5, r6, pc}
 800104e:	2b99      	cmp	r3, #153	; 0x99
 8001050:	dd0b      	ble.n	800106a <__aeabi_i2f+0x5a>
 8001052:	2205      	movs	r2, #5
 8001054:	002e      	movs	r6, r5
 8001056:	1a12      	subs	r2, r2, r0
 8001058:	40d6      	lsrs	r6, r2
 800105a:	0002      	movs	r2, r0
 800105c:	321b      	adds	r2, #27
 800105e:	4095      	lsls	r5, r2
 8001060:	0028      	movs	r0, r5
 8001062:	1e45      	subs	r5, r0, #1
 8001064:	41a8      	sbcs	r0, r5
 8001066:	0035      	movs	r5, r6
 8001068:	4305      	orrs	r5, r0
 800106a:	2905      	cmp	r1, #5
 800106c:	dd01      	ble.n	8001072 <__aeabi_i2f+0x62>
 800106e:	1f4a      	subs	r2, r1, #5
 8001070:	4095      	lsls	r5, r2
 8001072:	002a      	movs	r2, r5
 8001074:	4e08      	ldr	r6, [pc, #32]	; (8001098 <__aeabi_i2f+0x88>)
 8001076:	4032      	ands	r2, r6
 8001078:	0768      	lsls	r0, r5, #29
 800107a:	d009      	beq.n	8001090 <__aeabi_i2f+0x80>
 800107c:	200f      	movs	r0, #15
 800107e:	4028      	ands	r0, r5
 8001080:	2804      	cmp	r0, #4
 8001082:	d005      	beq.n	8001090 <__aeabi_i2f+0x80>
 8001084:	3204      	adds	r2, #4
 8001086:	0150      	lsls	r0, r2, #5
 8001088:	d502      	bpl.n	8001090 <__aeabi_i2f+0x80>
 800108a:	239f      	movs	r3, #159	; 0x9f
 800108c:	4032      	ands	r2, r6
 800108e:	1a5b      	subs	r3, r3, r1
 8001090:	0192      	lsls	r2, r2, #6
 8001092:	0a55      	lsrs	r5, r2, #9
 8001094:	b2d8      	uxtb	r0, r3
 8001096:	e7d5      	b.n	8001044 <__aeabi_i2f+0x34>
 8001098:	fbffffff 	.word	0xfbffffff

0800109c <__aeabi_ui2f>:
 800109c:	b570      	push	{r4, r5, r6, lr}
 800109e:	1e05      	subs	r5, r0, #0
 80010a0:	d00e      	beq.n	80010c0 <__aeabi_ui2f+0x24>
 80010a2:	f001 fe75 	bl	8002d90 <__clzsi2>
 80010a6:	239e      	movs	r3, #158	; 0x9e
 80010a8:	0004      	movs	r4, r0
 80010aa:	1a1b      	subs	r3, r3, r0
 80010ac:	2b96      	cmp	r3, #150	; 0x96
 80010ae:	dc0c      	bgt.n	80010ca <__aeabi_ui2f+0x2e>
 80010b0:	2808      	cmp	r0, #8
 80010b2:	dd01      	ble.n	80010b8 <__aeabi_ui2f+0x1c>
 80010b4:	3c08      	subs	r4, #8
 80010b6:	40a5      	lsls	r5, r4
 80010b8:	026d      	lsls	r5, r5, #9
 80010ba:	0a6d      	lsrs	r5, r5, #9
 80010bc:	b2d8      	uxtb	r0, r3
 80010be:	e001      	b.n	80010c4 <__aeabi_ui2f+0x28>
 80010c0:	2000      	movs	r0, #0
 80010c2:	2500      	movs	r5, #0
 80010c4:	05c0      	lsls	r0, r0, #23
 80010c6:	4328      	orrs	r0, r5
 80010c8:	bd70      	pop	{r4, r5, r6, pc}
 80010ca:	2b99      	cmp	r3, #153	; 0x99
 80010cc:	dd09      	ble.n	80010e2 <__aeabi_ui2f+0x46>
 80010ce:	0002      	movs	r2, r0
 80010d0:	0029      	movs	r1, r5
 80010d2:	321b      	adds	r2, #27
 80010d4:	4091      	lsls	r1, r2
 80010d6:	1e4a      	subs	r2, r1, #1
 80010d8:	4191      	sbcs	r1, r2
 80010da:	2205      	movs	r2, #5
 80010dc:	1a12      	subs	r2, r2, r0
 80010de:	40d5      	lsrs	r5, r2
 80010e0:	430d      	orrs	r5, r1
 80010e2:	2c05      	cmp	r4, #5
 80010e4:	dd01      	ble.n	80010ea <__aeabi_ui2f+0x4e>
 80010e6:	1f62      	subs	r2, r4, #5
 80010e8:	4095      	lsls	r5, r2
 80010ea:	0029      	movs	r1, r5
 80010ec:	4e08      	ldr	r6, [pc, #32]	; (8001110 <__aeabi_ui2f+0x74>)
 80010ee:	4031      	ands	r1, r6
 80010f0:	076a      	lsls	r2, r5, #29
 80010f2:	d009      	beq.n	8001108 <__aeabi_ui2f+0x6c>
 80010f4:	200f      	movs	r0, #15
 80010f6:	4028      	ands	r0, r5
 80010f8:	2804      	cmp	r0, #4
 80010fa:	d005      	beq.n	8001108 <__aeabi_ui2f+0x6c>
 80010fc:	3104      	adds	r1, #4
 80010fe:	014a      	lsls	r2, r1, #5
 8001100:	d502      	bpl.n	8001108 <__aeabi_ui2f+0x6c>
 8001102:	239f      	movs	r3, #159	; 0x9f
 8001104:	4031      	ands	r1, r6
 8001106:	1b1b      	subs	r3, r3, r4
 8001108:	0189      	lsls	r1, r1, #6
 800110a:	0a4d      	lsrs	r5, r1, #9
 800110c:	b2d8      	uxtb	r0, r3
 800110e:	e7d9      	b.n	80010c4 <__aeabi_ui2f+0x28>
 8001110:	fbffffff 	.word	0xfbffffff

08001114 <__aeabi_dadd>:
 8001114:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001116:	464f      	mov	r7, r9
 8001118:	46d6      	mov	lr, sl
 800111a:	4646      	mov	r6, r8
 800111c:	000d      	movs	r5, r1
 800111e:	0001      	movs	r1, r0
 8001120:	0018      	movs	r0, r3
 8001122:	b5c0      	push	{r6, r7, lr}
 8001124:	0017      	movs	r7, r2
 8001126:	032b      	lsls	r3, r5, #12
 8001128:	0a5a      	lsrs	r2, r3, #9
 800112a:	0f4b      	lsrs	r3, r1, #29
 800112c:	4313      	orrs	r3, r2
 800112e:	00ca      	lsls	r2, r1, #3
 8001130:	4691      	mov	r9, r2
 8001132:	0302      	lsls	r2, r0, #12
 8001134:	006e      	lsls	r6, r5, #1
 8001136:	0041      	lsls	r1, r0, #1
 8001138:	0a52      	lsrs	r2, r2, #9
 800113a:	0fec      	lsrs	r4, r5, #31
 800113c:	0f7d      	lsrs	r5, r7, #29
 800113e:	4315      	orrs	r5, r2
 8001140:	0d76      	lsrs	r6, r6, #21
 8001142:	0d49      	lsrs	r1, r1, #21
 8001144:	0fc0      	lsrs	r0, r0, #31
 8001146:	4682      	mov	sl, r0
 8001148:	46ac      	mov	ip, r5
 800114a:	00ff      	lsls	r7, r7, #3
 800114c:	1a72      	subs	r2, r6, r1
 800114e:	4284      	cmp	r4, r0
 8001150:	d100      	bne.n	8001154 <__aeabi_dadd+0x40>
 8001152:	e098      	b.n	8001286 <__aeabi_dadd+0x172>
 8001154:	2a00      	cmp	r2, #0
 8001156:	dc00      	bgt.n	800115a <__aeabi_dadd+0x46>
 8001158:	e081      	b.n	800125e <__aeabi_dadd+0x14a>
 800115a:	2900      	cmp	r1, #0
 800115c:	d100      	bne.n	8001160 <__aeabi_dadd+0x4c>
 800115e:	e0b6      	b.n	80012ce <__aeabi_dadd+0x1ba>
 8001160:	49c9      	ldr	r1, [pc, #804]	; (8001488 <__aeabi_dadd+0x374>)
 8001162:	428e      	cmp	r6, r1
 8001164:	d100      	bne.n	8001168 <__aeabi_dadd+0x54>
 8001166:	e172      	b.n	800144e <__aeabi_dadd+0x33a>
 8001168:	2180      	movs	r1, #128	; 0x80
 800116a:	0028      	movs	r0, r5
 800116c:	0409      	lsls	r1, r1, #16
 800116e:	4308      	orrs	r0, r1
 8001170:	4684      	mov	ip, r0
 8001172:	2a38      	cmp	r2, #56	; 0x38
 8001174:	dd00      	ble.n	8001178 <__aeabi_dadd+0x64>
 8001176:	e15e      	b.n	8001436 <__aeabi_dadd+0x322>
 8001178:	2a1f      	cmp	r2, #31
 800117a:	dd00      	ble.n	800117e <__aeabi_dadd+0x6a>
 800117c:	e1ee      	b.n	800155c <__aeabi_dadd+0x448>
 800117e:	2020      	movs	r0, #32
 8001180:	0039      	movs	r1, r7
 8001182:	4665      	mov	r5, ip
 8001184:	1a80      	subs	r0, r0, r2
 8001186:	4087      	lsls	r7, r0
 8001188:	40d1      	lsrs	r1, r2
 800118a:	4085      	lsls	r5, r0
 800118c:	430d      	orrs	r5, r1
 800118e:	0039      	movs	r1, r7
 8001190:	1e4f      	subs	r7, r1, #1
 8001192:	41b9      	sbcs	r1, r7
 8001194:	4667      	mov	r7, ip
 8001196:	40d7      	lsrs	r7, r2
 8001198:	4329      	orrs	r1, r5
 800119a:	1bdb      	subs	r3, r3, r7
 800119c:	464a      	mov	r2, r9
 800119e:	1a55      	subs	r5, r2, r1
 80011a0:	45a9      	cmp	r9, r5
 80011a2:	4189      	sbcs	r1, r1
 80011a4:	4249      	negs	r1, r1
 80011a6:	1a5b      	subs	r3, r3, r1
 80011a8:	4698      	mov	r8, r3
 80011aa:	4643      	mov	r3, r8
 80011ac:	021b      	lsls	r3, r3, #8
 80011ae:	d400      	bmi.n	80011b2 <__aeabi_dadd+0x9e>
 80011b0:	e0cc      	b.n	800134c <__aeabi_dadd+0x238>
 80011b2:	4643      	mov	r3, r8
 80011b4:	025b      	lsls	r3, r3, #9
 80011b6:	0a5b      	lsrs	r3, r3, #9
 80011b8:	4698      	mov	r8, r3
 80011ba:	4643      	mov	r3, r8
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d100      	bne.n	80011c2 <__aeabi_dadd+0xae>
 80011c0:	e12c      	b.n	800141c <__aeabi_dadd+0x308>
 80011c2:	4640      	mov	r0, r8
 80011c4:	f001 fde4 	bl	8002d90 <__clzsi2>
 80011c8:	0001      	movs	r1, r0
 80011ca:	3908      	subs	r1, #8
 80011cc:	2220      	movs	r2, #32
 80011ce:	0028      	movs	r0, r5
 80011d0:	4643      	mov	r3, r8
 80011d2:	1a52      	subs	r2, r2, r1
 80011d4:	408b      	lsls	r3, r1
 80011d6:	40d0      	lsrs	r0, r2
 80011d8:	408d      	lsls	r5, r1
 80011da:	4303      	orrs	r3, r0
 80011dc:	428e      	cmp	r6, r1
 80011de:	dd00      	ble.n	80011e2 <__aeabi_dadd+0xce>
 80011e0:	e117      	b.n	8001412 <__aeabi_dadd+0x2fe>
 80011e2:	1b8e      	subs	r6, r1, r6
 80011e4:	1c72      	adds	r2, r6, #1
 80011e6:	2a1f      	cmp	r2, #31
 80011e8:	dd00      	ble.n	80011ec <__aeabi_dadd+0xd8>
 80011ea:	e1a7      	b.n	800153c <__aeabi_dadd+0x428>
 80011ec:	2120      	movs	r1, #32
 80011ee:	0018      	movs	r0, r3
 80011f0:	002e      	movs	r6, r5
 80011f2:	1a89      	subs	r1, r1, r2
 80011f4:	408d      	lsls	r5, r1
 80011f6:	4088      	lsls	r0, r1
 80011f8:	40d6      	lsrs	r6, r2
 80011fa:	40d3      	lsrs	r3, r2
 80011fc:	1e69      	subs	r1, r5, #1
 80011fe:	418d      	sbcs	r5, r1
 8001200:	4330      	orrs	r0, r6
 8001202:	4698      	mov	r8, r3
 8001204:	2600      	movs	r6, #0
 8001206:	4305      	orrs	r5, r0
 8001208:	076b      	lsls	r3, r5, #29
 800120a:	d009      	beq.n	8001220 <__aeabi_dadd+0x10c>
 800120c:	230f      	movs	r3, #15
 800120e:	402b      	ands	r3, r5
 8001210:	2b04      	cmp	r3, #4
 8001212:	d005      	beq.n	8001220 <__aeabi_dadd+0x10c>
 8001214:	1d2b      	adds	r3, r5, #4
 8001216:	42ab      	cmp	r3, r5
 8001218:	41ad      	sbcs	r5, r5
 800121a:	426d      	negs	r5, r5
 800121c:	44a8      	add	r8, r5
 800121e:	001d      	movs	r5, r3
 8001220:	4643      	mov	r3, r8
 8001222:	021b      	lsls	r3, r3, #8
 8001224:	d400      	bmi.n	8001228 <__aeabi_dadd+0x114>
 8001226:	e094      	b.n	8001352 <__aeabi_dadd+0x23e>
 8001228:	4b97      	ldr	r3, [pc, #604]	; (8001488 <__aeabi_dadd+0x374>)
 800122a:	1c72      	adds	r2, r6, #1
 800122c:	429a      	cmp	r2, r3
 800122e:	d100      	bne.n	8001232 <__aeabi_dadd+0x11e>
 8001230:	e09d      	b.n	800136e <__aeabi_dadd+0x25a>
 8001232:	4641      	mov	r1, r8
 8001234:	4b95      	ldr	r3, [pc, #596]	; (800148c <__aeabi_dadd+0x378>)
 8001236:	08ed      	lsrs	r5, r5, #3
 8001238:	4019      	ands	r1, r3
 800123a:	000b      	movs	r3, r1
 800123c:	0552      	lsls	r2, r2, #21
 800123e:	0749      	lsls	r1, r1, #29
 8001240:	025b      	lsls	r3, r3, #9
 8001242:	4329      	orrs	r1, r5
 8001244:	0b1b      	lsrs	r3, r3, #12
 8001246:	0d52      	lsrs	r2, r2, #21
 8001248:	0512      	lsls	r2, r2, #20
 800124a:	4313      	orrs	r3, r2
 800124c:	07e4      	lsls	r4, r4, #31
 800124e:	4323      	orrs	r3, r4
 8001250:	0008      	movs	r0, r1
 8001252:	0019      	movs	r1, r3
 8001254:	bce0      	pop	{r5, r6, r7}
 8001256:	46ba      	mov	sl, r7
 8001258:	46b1      	mov	r9, r6
 800125a:	46a8      	mov	r8, r5
 800125c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800125e:	2a00      	cmp	r2, #0
 8001260:	d043      	beq.n	80012ea <__aeabi_dadd+0x1d6>
 8001262:	1b8a      	subs	r2, r1, r6
 8001264:	2e00      	cmp	r6, #0
 8001266:	d000      	beq.n	800126a <__aeabi_dadd+0x156>
 8001268:	e12a      	b.n	80014c0 <__aeabi_dadd+0x3ac>
 800126a:	464c      	mov	r4, r9
 800126c:	431c      	orrs	r4, r3
 800126e:	d100      	bne.n	8001272 <__aeabi_dadd+0x15e>
 8001270:	e1d1      	b.n	8001616 <__aeabi_dadd+0x502>
 8001272:	1e54      	subs	r4, r2, #1
 8001274:	2a01      	cmp	r2, #1
 8001276:	d100      	bne.n	800127a <__aeabi_dadd+0x166>
 8001278:	e21f      	b.n	80016ba <__aeabi_dadd+0x5a6>
 800127a:	4d83      	ldr	r5, [pc, #524]	; (8001488 <__aeabi_dadd+0x374>)
 800127c:	42aa      	cmp	r2, r5
 800127e:	d100      	bne.n	8001282 <__aeabi_dadd+0x16e>
 8001280:	e272      	b.n	8001768 <__aeabi_dadd+0x654>
 8001282:	0022      	movs	r2, r4
 8001284:	e123      	b.n	80014ce <__aeabi_dadd+0x3ba>
 8001286:	2a00      	cmp	r2, #0
 8001288:	dc00      	bgt.n	800128c <__aeabi_dadd+0x178>
 800128a:	e098      	b.n	80013be <__aeabi_dadd+0x2aa>
 800128c:	2900      	cmp	r1, #0
 800128e:	d042      	beq.n	8001316 <__aeabi_dadd+0x202>
 8001290:	497d      	ldr	r1, [pc, #500]	; (8001488 <__aeabi_dadd+0x374>)
 8001292:	428e      	cmp	r6, r1
 8001294:	d100      	bne.n	8001298 <__aeabi_dadd+0x184>
 8001296:	e0da      	b.n	800144e <__aeabi_dadd+0x33a>
 8001298:	2180      	movs	r1, #128	; 0x80
 800129a:	0028      	movs	r0, r5
 800129c:	0409      	lsls	r1, r1, #16
 800129e:	4308      	orrs	r0, r1
 80012a0:	4684      	mov	ip, r0
 80012a2:	2a38      	cmp	r2, #56	; 0x38
 80012a4:	dd00      	ble.n	80012a8 <__aeabi_dadd+0x194>
 80012a6:	e129      	b.n	80014fc <__aeabi_dadd+0x3e8>
 80012a8:	2a1f      	cmp	r2, #31
 80012aa:	dc00      	bgt.n	80012ae <__aeabi_dadd+0x19a>
 80012ac:	e187      	b.n	80015be <__aeabi_dadd+0x4aa>
 80012ae:	0011      	movs	r1, r2
 80012b0:	4665      	mov	r5, ip
 80012b2:	3920      	subs	r1, #32
 80012b4:	40cd      	lsrs	r5, r1
 80012b6:	2a20      	cmp	r2, #32
 80012b8:	d004      	beq.n	80012c4 <__aeabi_dadd+0x1b0>
 80012ba:	2040      	movs	r0, #64	; 0x40
 80012bc:	4661      	mov	r1, ip
 80012be:	1a82      	subs	r2, r0, r2
 80012c0:	4091      	lsls	r1, r2
 80012c2:	430f      	orrs	r7, r1
 80012c4:	0039      	movs	r1, r7
 80012c6:	1e4f      	subs	r7, r1, #1
 80012c8:	41b9      	sbcs	r1, r7
 80012ca:	430d      	orrs	r5, r1
 80012cc:	e11b      	b.n	8001506 <__aeabi_dadd+0x3f2>
 80012ce:	0029      	movs	r1, r5
 80012d0:	4339      	orrs	r1, r7
 80012d2:	d100      	bne.n	80012d6 <__aeabi_dadd+0x1c2>
 80012d4:	e0b5      	b.n	8001442 <__aeabi_dadd+0x32e>
 80012d6:	1e51      	subs	r1, r2, #1
 80012d8:	2a01      	cmp	r2, #1
 80012da:	d100      	bne.n	80012de <__aeabi_dadd+0x1ca>
 80012dc:	e1ab      	b.n	8001636 <__aeabi_dadd+0x522>
 80012de:	486a      	ldr	r0, [pc, #424]	; (8001488 <__aeabi_dadd+0x374>)
 80012e0:	4282      	cmp	r2, r0
 80012e2:	d100      	bne.n	80012e6 <__aeabi_dadd+0x1d2>
 80012e4:	e1b2      	b.n	800164c <__aeabi_dadd+0x538>
 80012e6:	000a      	movs	r2, r1
 80012e8:	e743      	b.n	8001172 <__aeabi_dadd+0x5e>
 80012ea:	4969      	ldr	r1, [pc, #420]	; (8001490 <__aeabi_dadd+0x37c>)
 80012ec:	1c75      	adds	r5, r6, #1
 80012ee:	420d      	tst	r5, r1
 80012f0:	d000      	beq.n	80012f4 <__aeabi_dadd+0x1e0>
 80012f2:	e0cf      	b.n	8001494 <__aeabi_dadd+0x380>
 80012f4:	2e00      	cmp	r6, #0
 80012f6:	d000      	beq.n	80012fa <__aeabi_dadd+0x1e6>
 80012f8:	e193      	b.n	8001622 <__aeabi_dadd+0x50e>
 80012fa:	4649      	mov	r1, r9
 80012fc:	4319      	orrs	r1, r3
 80012fe:	d100      	bne.n	8001302 <__aeabi_dadd+0x1ee>
 8001300:	e1d1      	b.n	80016a6 <__aeabi_dadd+0x592>
 8001302:	4661      	mov	r1, ip
 8001304:	4339      	orrs	r1, r7
 8001306:	d000      	beq.n	800130a <__aeabi_dadd+0x1f6>
 8001308:	e1e3      	b.n	80016d2 <__aeabi_dadd+0x5be>
 800130a:	4649      	mov	r1, r9
 800130c:	0758      	lsls	r0, r3, #29
 800130e:	08c9      	lsrs	r1, r1, #3
 8001310:	4301      	orrs	r1, r0
 8001312:	08db      	lsrs	r3, r3, #3
 8001314:	e026      	b.n	8001364 <__aeabi_dadd+0x250>
 8001316:	0029      	movs	r1, r5
 8001318:	4339      	orrs	r1, r7
 800131a:	d100      	bne.n	800131e <__aeabi_dadd+0x20a>
 800131c:	e091      	b.n	8001442 <__aeabi_dadd+0x32e>
 800131e:	1e51      	subs	r1, r2, #1
 8001320:	2a01      	cmp	r2, #1
 8001322:	d005      	beq.n	8001330 <__aeabi_dadd+0x21c>
 8001324:	4858      	ldr	r0, [pc, #352]	; (8001488 <__aeabi_dadd+0x374>)
 8001326:	4282      	cmp	r2, r0
 8001328:	d100      	bne.n	800132c <__aeabi_dadd+0x218>
 800132a:	e18f      	b.n	800164c <__aeabi_dadd+0x538>
 800132c:	000a      	movs	r2, r1
 800132e:	e7b8      	b.n	80012a2 <__aeabi_dadd+0x18e>
 8001330:	003d      	movs	r5, r7
 8001332:	444d      	add	r5, r9
 8001334:	454d      	cmp	r5, r9
 8001336:	4189      	sbcs	r1, r1
 8001338:	4463      	add	r3, ip
 800133a:	4698      	mov	r8, r3
 800133c:	4249      	negs	r1, r1
 800133e:	4488      	add	r8, r1
 8001340:	4643      	mov	r3, r8
 8001342:	2602      	movs	r6, #2
 8001344:	021b      	lsls	r3, r3, #8
 8001346:	d500      	bpl.n	800134a <__aeabi_dadd+0x236>
 8001348:	e0eb      	b.n	8001522 <__aeabi_dadd+0x40e>
 800134a:	3e01      	subs	r6, #1
 800134c:	076b      	lsls	r3, r5, #29
 800134e:	d000      	beq.n	8001352 <__aeabi_dadd+0x23e>
 8001350:	e75c      	b.n	800120c <__aeabi_dadd+0xf8>
 8001352:	4643      	mov	r3, r8
 8001354:	08e9      	lsrs	r1, r5, #3
 8001356:	075a      	lsls	r2, r3, #29
 8001358:	4311      	orrs	r1, r2
 800135a:	0032      	movs	r2, r6
 800135c:	08db      	lsrs	r3, r3, #3
 800135e:	484a      	ldr	r0, [pc, #296]	; (8001488 <__aeabi_dadd+0x374>)
 8001360:	4282      	cmp	r2, r0
 8001362:	d021      	beq.n	80013a8 <__aeabi_dadd+0x294>
 8001364:	031b      	lsls	r3, r3, #12
 8001366:	0552      	lsls	r2, r2, #21
 8001368:	0b1b      	lsrs	r3, r3, #12
 800136a:	0d52      	lsrs	r2, r2, #21
 800136c:	e76c      	b.n	8001248 <__aeabi_dadd+0x134>
 800136e:	2300      	movs	r3, #0
 8001370:	2100      	movs	r1, #0
 8001372:	e769      	b.n	8001248 <__aeabi_dadd+0x134>
 8001374:	002a      	movs	r2, r5
 8001376:	433a      	orrs	r2, r7
 8001378:	d069      	beq.n	800144e <__aeabi_dadd+0x33a>
 800137a:	464a      	mov	r2, r9
 800137c:	0758      	lsls	r0, r3, #29
 800137e:	08d1      	lsrs	r1, r2, #3
 8001380:	08da      	lsrs	r2, r3, #3
 8001382:	2380      	movs	r3, #128	; 0x80
 8001384:	031b      	lsls	r3, r3, #12
 8001386:	4308      	orrs	r0, r1
 8001388:	421a      	tst	r2, r3
 800138a:	d007      	beq.n	800139c <__aeabi_dadd+0x288>
 800138c:	0029      	movs	r1, r5
 800138e:	08ed      	lsrs	r5, r5, #3
 8001390:	421d      	tst	r5, r3
 8001392:	d103      	bne.n	800139c <__aeabi_dadd+0x288>
 8001394:	002a      	movs	r2, r5
 8001396:	08ff      	lsrs	r7, r7, #3
 8001398:	0748      	lsls	r0, r1, #29
 800139a:	4338      	orrs	r0, r7
 800139c:	0f43      	lsrs	r3, r0, #29
 800139e:	00c1      	lsls	r1, r0, #3
 80013a0:	075b      	lsls	r3, r3, #29
 80013a2:	08c9      	lsrs	r1, r1, #3
 80013a4:	4319      	orrs	r1, r3
 80013a6:	0013      	movs	r3, r2
 80013a8:	000a      	movs	r2, r1
 80013aa:	431a      	orrs	r2, r3
 80013ac:	d100      	bne.n	80013b0 <__aeabi_dadd+0x29c>
 80013ae:	e213      	b.n	80017d8 <__aeabi_dadd+0x6c4>
 80013b0:	2280      	movs	r2, #128	; 0x80
 80013b2:	0312      	lsls	r2, r2, #12
 80013b4:	4313      	orrs	r3, r2
 80013b6:	031b      	lsls	r3, r3, #12
 80013b8:	4a33      	ldr	r2, [pc, #204]	; (8001488 <__aeabi_dadd+0x374>)
 80013ba:	0b1b      	lsrs	r3, r3, #12
 80013bc:	e744      	b.n	8001248 <__aeabi_dadd+0x134>
 80013be:	2a00      	cmp	r2, #0
 80013c0:	d04b      	beq.n	800145a <__aeabi_dadd+0x346>
 80013c2:	1b8a      	subs	r2, r1, r6
 80013c4:	2e00      	cmp	r6, #0
 80013c6:	d100      	bne.n	80013ca <__aeabi_dadd+0x2b6>
 80013c8:	e0e7      	b.n	800159a <__aeabi_dadd+0x486>
 80013ca:	482f      	ldr	r0, [pc, #188]	; (8001488 <__aeabi_dadd+0x374>)
 80013cc:	4281      	cmp	r1, r0
 80013ce:	d100      	bne.n	80013d2 <__aeabi_dadd+0x2be>
 80013d0:	e195      	b.n	80016fe <__aeabi_dadd+0x5ea>
 80013d2:	2080      	movs	r0, #128	; 0x80
 80013d4:	0400      	lsls	r0, r0, #16
 80013d6:	4303      	orrs	r3, r0
 80013d8:	2a38      	cmp	r2, #56	; 0x38
 80013da:	dd00      	ble.n	80013de <__aeabi_dadd+0x2ca>
 80013dc:	e143      	b.n	8001666 <__aeabi_dadd+0x552>
 80013de:	2a1f      	cmp	r2, #31
 80013e0:	dd00      	ble.n	80013e4 <__aeabi_dadd+0x2d0>
 80013e2:	e1db      	b.n	800179c <__aeabi_dadd+0x688>
 80013e4:	2020      	movs	r0, #32
 80013e6:	001d      	movs	r5, r3
 80013e8:	464e      	mov	r6, r9
 80013ea:	1a80      	subs	r0, r0, r2
 80013ec:	4085      	lsls	r5, r0
 80013ee:	40d6      	lsrs	r6, r2
 80013f0:	4335      	orrs	r5, r6
 80013f2:	464e      	mov	r6, r9
 80013f4:	4086      	lsls	r6, r0
 80013f6:	0030      	movs	r0, r6
 80013f8:	40d3      	lsrs	r3, r2
 80013fa:	1e46      	subs	r6, r0, #1
 80013fc:	41b0      	sbcs	r0, r6
 80013fe:	449c      	add	ip, r3
 8001400:	4305      	orrs	r5, r0
 8001402:	19ed      	adds	r5, r5, r7
 8001404:	42bd      	cmp	r5, r7
 8001406:	419b      	sbcs	r3, r3
 8001408:	425b      	negs	r3, r3
 800140a:	4463      	add	r3, ip
 800140c:	4698      	mov	r8, r3
 800140e:	000e      	movs	r6, r1
 8001410:	e07f      	b.n	8001512 <__aeabi_dadd+0x3fe>
 8001412:	4a1e      	ldr	r2, [pc, #120]	; (800148c <__aeabi_dadd+0x378>)
 8001414:	1a76      	subs	r6, r6, r1
 8001416:	4013      	ands	r3, r2
 8001418:	4698      	mov	r8, r3
 800141a:	e6f5      	b.n	8001208 <__aeabi_dadd+0xf4>
 800141c:	0028      	movs	r0, r5
 800141e:	f001 fcb7 	bl	8002d90 <__clzsi2>
 8001422:	0001      	movs	r1, r0
 8001424:	3118      	adds	r1, #24
 8001426:	291f      	cmp	r1, #31
 8001428:	dc00      	bgt.n	800142c <__aeabi_dadd+0x318>
 800142a:	e6cf      	b.n	80011cc <__aeabi_dadd+0xb8>
 800142c:	002b      	movs	r3, r5
 800142e:	3808      	subs	r0, #8
 8001430:	4083      	lsls	r3, r0
 8001432:	2500      	movs	r5, #0
 8001434:	e6d2      	b.n	80011dc <__aeabi_dadd+0xc8>
 8001436:	4662      	mov	r2, ip
 8001438:	433a      	orrs	r2, r7
 800143a:	0011      	movs	r1, r2
 800143c:	1e4f      	subs	r7, r1, #1
 800143e:	41b9      	sbcs	r1, r7
 8001440:	e6ac      	b.n	800119c <__aeabi_dadd+0x88>
 8001442:	4649      	mov	r1, r9
 8001444:	0758      	lsls	r0, r3, #29
 8001446:	08c9      	lsrs	r1, r1, #3
 8001448:	4301      	orrs	r1, r0
 800144a:	08db      	lsrs	r3, r3, #3
 800144c:	e787      	b.n	800135e <__aeabi_dadd+0x24a>
 800144e:	4649      	mov	r1, r9
 8001450:	075a      	lsls	r2, r3, #29
 8001452:	08c9      	lsrs	r1, r1, #3
 8001454:	4311      	orrs	r1, r2
 8001456:	08db      	lsrs	r3, r3, #3
 8001458:	e7a6      	b.n	80013a8 <__aeabi_dadd+0x294>
 800145a:	490d      	ldr	r1, [pc, #52]	; (8001490 <__aeabi_dadd+0x37c>)
 800145c:	1c70      	adds	r0, r6, #1
 800145e:	4208      	tst	r0, r1
 8001460:	d000      	beq.n	8001464 <__aeabi_dadd+0x350>
 8001462:	e0bb      	b.n	80015dc <__aeabi_dadd+0x4c8>
 8001464:	2e00      	cmp	r6, #0
 8001466:	d000      	beq.n	800146a <__aeabi_dadd+0x356>
 8001468:	e114      	b.n	8001694 <__aeabi_dadd+0x580>
 800146a:	4649      	mov	r1, r9
 800146c:	4319      	orrs	r1, r3
 800146e:	d100      	bne.n	8001472 <__aeabi_dadd+0x35e>
 8001470:	e175      	b.n	800175e <__aeabi_dadd+0x64a>
 8001472:	0029      	movs	r1, r5
 8001474:	4339      	orrs	r1, r7
 8001476:	d000      	beq.n	800147a <__aeabi_dadd+0x366>
 8001478:	e17e      	b.n	8001778 <__aeabi_dadd+0x664>
 800147a:	4649      	mov	r1, r9
 800147c:	0758      	lsls	r0, r3, #29
 800147e:	08c9      	lsrs	r1, r1, #3
 8001480:	4301      	orrs	r1, r0
 8001482:	08db      	lsrs	r3, r3, #3
 8001484:	e76e      	b.n	8001364 <__aeabi_dadd+0x250>
 8001486:	46c0      	nop			; (mov r8, r8)
 8001488:	000007ff 	.word	0x000007ff
 800148c:	ff7fffff 	.word	0xff7fffff
 8001490:	000007fe 	.word	0x000007fe
 8001494:	4649      	mov	r1, r9
 8001496:	1bcd      	subs	r5, r1, r7
 8001498:	4661      	mov	r1, ip
 800149a:	1a58      	subs	r0, r3, r1
 800149c:	45a9      	cmp	r9, r5
 800149e:	4189      	sbcs	r1, r1
 80014a0:	4249      	negs	r1, r1
 80014a2:	4688      	mov	r8, r1
 80014a4:	0001      	movs	r1, r0
 80014a6:	4640      	mov	r0, r8
 80014a8:	1a09      	subs	r1, r1, r0
 80014aa:	4688      	mov	r8, r1
 80014ac:	0209      	lsls	r1, r1, #8
 80014ae:	d500      	bpl.n	80014b2 <__aeabi_dadd+0x39e>
 80014b0:	e0a6      	b.n	8001600 <__aeabi_dadd+0x4ec>
 80014b2:	4641      	mov	r1, r8
 80014b4:	4329      	orrs	r1, r5
 80014b6:	d000      	beq.n	80014ba <__aeabi_dadd+0x3a6>
 80014b8:	e67f      	b.n	80011ba <__aeabi_dadd+0xa6>
 80014ba:	2300      	movs	r3, #0
 80014bc:	2400      	movs	r4, #0
 80014be:	e751      	b.n	8001364 <__aeabi_dadd+0x250>
 80014c0:	4cc7      	ldr	r4, [pc, #796]	; (80017e0 <__aeabi_dadd+0x6cc>)
 80014c2:	42a1      	cmp	r1, r4
 80014c4:	d100      	bne.n	80014c8 <__aeabi_dadd+0x3b4>
 80014c6:	e0c7      	b.n	8001658 <__aeabi_dadd+0x544>
 80014c8:	2480      	movs	r4, #128	; 0x80
 80014ca:	0424      	lsls	r4, r4, #16
 80014cc:	4323      	orrs	r3, r4
 80014ce:	2a38      	cmp	r2, #56	; 0x38
 80014d0:	dc54      	bgt.n	800157c <__aeabi_dadd+0x468>
 80014d2:	2a1f      	cmp	r2, #31
 80014d4:	dd00      	ble.n	80014d8 <__aeabi_dadd+0x3c4>
 80014d6:	e0cc      	b.n	8001672 <__aeabi_dadd+0x55e>
 80014d8:	2420      	movs	r4, #32
 80014da:	4648      	mov	r0, r9
 80014dc:	1aa4      	subs	r4, r4, r2
 80014de:	001d      	movs	r5, r3
 80014e0:	464e      	mov	r6, r9
 80014e2:	40a0      	lsls	r0, r4
 80014e4:	40d6      	lsrs	r6, r2
 80014e6:	40a5      	lsls	r5, r4
 80014e8:	0004      	movs	r4, r0
 80014ea:	40d3      	lsrs	r3, r2
 80014ec:	4662      	mov	r2, ip
 80014ee:	4335      	orrs	r5, r6
 80014f0:	1e66      	subs	r6, r4, #1
 80014f2:	41b4      	sbcs	r4, r6
 80014f4:	1ad3      	subs	r3, r2, r3
 80014f6:	469c      	mov	ip, r3
 80014f8:	4325      	orrs	r5, r4
 80014fa:	e044      	b.n	8001586 <__aeabi_dadd+0x472>
 80014fc:	4662      	mov	r2, ip
 80014fe:	433a      	orrs	r2, r7
 8001500:	0015      	movs	r5, r2
 8001502:	1e6f      	subs	r7, r5, #1
 8001504:	41bd      	sbcs	r5, r7
 8001506:	444d      	add	r5, r9
 8001508:	454d      	cmp	r5, r9
 800150a:	4189      	sbcs	r1, r1
 800150c:	4249      	negs	r1, r1
 800150e:	4688      	mov	r8, r1
 8001510:	4498      	add	r8, r3
 8001512:	4643      	mov	r3, r8
 8001514:	021b      	lsls	r3, r3, #8
 8001516:	d400      	bmi.n	800151a <__aeabi_dadd+0x406>
 8001518:	e718      	b.n	800134c <__aeabi_dadd+0x238>
 800151a:	4bb1      	ldr	r3, [pc, #708]	; (80017e0 <__aeabi_dadd+0x6cc>)
 800151c:	3601      	adds	r6, #1
 800151e:	429e      	cmp	r6, r3
 8001520:	d049      	beq.n	80015b6 <__aeabi_dadd+0x4a2>
 8001522:	4642      	mov	r2, r8
 8001524:	4baf      	ldr	r3, [pc, #700]	; (80017e4 <__aeabi_dadd+0x6d0>)
 8001526:	2101      	movs	r1, #1
 8001528:	401a      	ands	r2, r3
 800152a:	0013      	movs	r3, r2
 800152c:	086a      	lsrs	r2, r5, #1
 800152e:	400d      	ands	r5, r1
 8001530:	4315      	orrs	r5, r2
 8001532:	07d9      	lsls	r1, r3, #31
 8001534:	085b      	lsrs	r3, r3, #1
 8001536:	4698      	mov	r8, r3
 8001538:	430d      	orrs	r5, r1
 800153a:	e665      	b.n	8001208 <__aeabi_dadd+0xf4>
 800153c:	0018      	movs	r0, r3
 800153e:	3e1f      	subs	r6, #31
 8001540:	40f0      	lsrs	r0, r6
 8001542:	2a20      	cmp	r2, #32
 8001544:	d003      	beq.n	800154e <__aeabi_dadd+0x43a>
 8001546:	2140      	movs	r1, #64	; 0x40
 8001548:	1a8a      	subs	r2, r1, r2
 800154a:	4093      	lsls	r3, r2
 800154c:	431d      	orrs	r5, r3
 800154e:	1e69      	subs	r1, r5, #1
 8001550:	418d      	sbcs	r5, r1
 8001552:	2300      	movs	r3, #0
 8001554:	2600      	movs	r6, #0
 8001556:	4698      	mov	r8, r3
 8001558:	4305      	orrs	r5, r0
 800155a:	e6f7      	b.n	800134c <__aeabi_dadd+0x238>
 800155c:	0011      	movs	r1, r2
 800155e:	4665      	mov	r5, ip
 8001560:	3920      	subs	r1, #32
 8001562:	40cd      	lsrs	r5, r1
 8001564:	2a20      	cmp	r2, #32
 8001566:	d004      	beq.n	8001572 <__aeabi_dadd+0x45e>
 8001568:	2040      	movs	r0, #64	; 0x40
 800156a:	4661      	mov	r1, ip
 800156c:	1a82      	subs	r2, r0, r2
 800156e:	4091      	lsls	r1, r2
 8001570:	430f      	orrs	r7, r1
 8001572:	0039      	movs	r1, r7
 8001574:	1e4f      	subs	r7, r1, #1
 8001576:	41b9      	sbcs	r1, r7
 8001578:	4329      	orrs	r1, r5
 800157a:	e60f      	b.n	800119c <__aeabi_dadd+0x88>
 800157c:	464a      	mov	r2, r9
 800157e:	4313      	orrs	r3, r2
 8001580:	001d      	movs	r5, r3
 8001582:	1e6b      	subs	r3, r5, #1
 8001584:	419d      	sbcs	r5, r3
 8001586:	1b7d      	subs	r5, r7, r5
 8001588:	42af      	cmp	r7, r5
 800158a:	419b      	sbcs	r3, r3
 800158c:	4662      	mov	r2, ip
 800158e:	425b      	negs	r3, r3
 8001590:	1ad3      	subs	r3, r2, r3
 8001592:	4698      	mov	r8, r3
 8001594:	4654      	mov	r4, sl
 8001596:	000e      	movs	r6, r1
 8001598:	e607      	b.n	80011aa <__aeabi_dadd+0x96>
 800159a:	4648      	mov	r0, r9
 800159c:	4318      	orrs	r0, r3
 800159e:	d100      	bne.n	80015a2 <__aeabi_dadd+0x48e>
 80015a0:	e0b3      	b.n	800170a <__aeabi_dadd+0x5f6>
 80015a2:	1e50      	subs	r0, r2, #1
 80015a4:	2a01      	cmp	r2, #1
 80015a6:	d100      	bne.n	80015aa <__aeabi_dadd+0x496>
 80015a8:	e10d      	b.n	80017c6 <__aeabi_dadd+0x6b2>
 80015aa:	4d8d      	ldr	r5, [pc, #564]	; (80017e0 <__aeabi_dadd+0x6cc>)
 80015ac:	42aa      	cmp	r2, r5
 80015ae:	d100      	bne.n	80015b2 <__aeabi_dadd+0x49e>
 80015b0:	e0a5      	b.n	80016fe <__aeabi_dadd+0x5ea>
 80015b2:	0002      	movs	r2, r0
 80015b4:	e710      	b.n	80013d8 <__aeabi_dadd+0x2c4>
 80015b6:	0032      	movs	r2, r6
 80015b8:	2300      	movs	r3, #0
 80015ba:	2100      	movs	r1, #0
 80015bc:	e644      	b.n	8001248 <__aeabi_dadd+0x134>
 80015be:	2120      	movs	r1, #32
 80015c0:	0038      	movs	r0, r7
 80015c2:	1a89      	subs	r1, r1, r2
 80015c4:	4665      	mov	r5, ip
 80015c6:	408f      	lsls	r7, r1
 80015c8:	408d      	lsls	r5, r1
 80015ca:	40d0      	lsrs	r0, r2
 80015cc:	1e79      	subs	r1, r7, #1
 80015ce:	418f      	sbcs	r7, r1
 80015d0:	4305      	orrs	r5, r0
 80015d2:	433d      	orrs	r5, r7
 80015d4:	4667      	mov	r7, ip
 80015d6:	40d7      	lsrs	r7, r2
 80015d8:	19db      	adds	r3, r3, r7
 80015da:	e794      	b.n	8001506 <__aeabi_dadd+0x3f2>
 80015dc:	4a80      	ldr	r2, [pc, #512]	; (80017e0 <__aeabi_dadd+0x6cc>)
 80015de:	4290      	cmp	r0, r2
 80015e0:	d100      	bne.n	80015e4 <__aeabi_dadd+0x4d0>
 80015e2:	e0ec      	b.n	80017be <__aeabi_dadd+0x6aa>
 80015e4:	0039      	movs	r1, r7
 80015e6:	4449      	add	r1, r9
 80015e8:	4549      	cmp	r1, r9
 80015ea:	4192      	sbcs	r2, r2
 80015ec:	4463      	add	r3, ip
 80015ee:	4252      	negs	r2, r2
 80015f0:	189b      	adds	r3, r3, r2
 80015f2:	07dd      	lsls	r5, r3, #31
 80015f4:	0849      	lsrs	r1, r1, #1
 80015f6:	085b      	lsrs	r3, r3, #1
 80015f8:	4698      	mov	r8, r3
 80015fa:	0006      	movs	r6, r0
 80015fc:	430d      	orrs	r5, r1
 80015fe:	e6a5      	b.n	800134c <__aeabi_dadd+0x238>
 8001600:	464a      	mov	r2, r9
 8001602:	1abd      	subs	r5, r7, r2
 8001604:	42af      	cmp	r7, r5
 8001606:	4189      	sbcs	r1, r1
 8001608:	4662      	mov	r2, ip
 800160a:	4249      	negs	r1, r1
 800160c:	1ad3      	subs	r3, r2, r3
 800160e:	1a5b      	subs	r3, r3, r1
 8001610:	4698      	mov	r8, r3
 8001612:	4654      	mov	r4, sl
 8001614:	e5d1      	b.n	80011ba <__aeabi_dadd+0xa6>
 8001616:	076c      	lsls	r4, r5, #29
 8001618:	08f9      	lsrs	r1, r7, #3
 800161a:	4321      	orrs	r1, r4
 800161c:	08eb      	lsrs	r3, r5, #3
 800161e:	0004      	movs	r4, r0
 8001620:	e69d      	b.n	800135e <__aeabi_dadd+0x24a>
 8001622:	464a      	mov	r2, r9
 8001624:	431a      	orrs	r2, r3
 8001626:	d175      	bne.n	8001714 <__aeabi_dadd+0x600>
 8001628:	4661      	mov	r1, ip
 800162a:	4339      	orrs	r1, r7
 800162c:	d114      	bne.n	8001658 <__aeabi_dadd+0x544>
 800162e:	2380      	movs	r3, #128	; 0x80
 8001630:	2400      	movs	r4, #0
 8001632:	031b      	lsls	r3, r3, #12
 8001634:	e6bc      	b.n	80013b0 <__aeabi_dadd+0x29c>
 8001636:	464a      	mov	r2, r9
 8001638:	1bd5      	subs	r5, r2, r7
 800163a:	45a9      	cmp	r9, r5
 800163c:	4189      	sbcs	r1, r1
 800163e:	4662      	mov	r2, ip
 8001640:	4249      	negs	r1, r1
 8001642:	1a9b      	subs	r3, r3, r2
 8001644:	1a5b      	subs	r3, r3, r1
 8001646:	4698      	mov	r8, r3
 8001648:	2601      	movs	r6, #1
 800164a:	e5ae      	b.n	80011aa <__aeabi_dadd+0x96>
 800164c:	464a      	mov	r2, r9
 800164e:	08d1      	lsrs	r1, r2, #3
 8001650:	075a      	lsls	r2, r3, #29
 8001652:	4311      	orrs	r1, r2
 8001654:	08db      	lsrs	r3, r3, #3
 8001656:	e6a7      	b.n	80013a8 <__aeabi_dadd+0x294>
 8001658:	4663      	mov	r3, ip
 800165a:	08f9      	lsrs	r1, r7, #3
 800165c:	075a      	lsls	r2, r3, #29
 800165e:	4654      	mov	r4, sl
 8001660:	4311      	orrs	r1, r2
 8001662:	08db      	lsrs	r3, r3, #3
 8001664:	e6a0      	b.n	80013a8 <__aeabi_dadd+0x294>
 8001666:	464a      	mov	r2, r9
 8001668:	4313      	orrs	r3, r2
 800166a:	001d      	movs	r5, r3
 800166c:	1e6b      	subs	r3, r5, #1
 800166e:	419d      	sbcs	r5, r3
 8001670:	e6c7      	b.n	8001402 <__aeabi_dadd+0x2ee>
 8001672:	0014      	movs	r4, r2
 8001674:	001e      	movs	r6, r3
 8001676:	3c20      	subs	r4, #32
 8001678:	40e6      	lsrs	r6, r4
 800167a:	2a20      	cmp	r2, #32
 800167c:	d005      	beq.n	800168a <__aeabi_dadd+0x576>
 800167e:	2440      	movs	r4, #64	; 0x40
 8001680:	1aa2      	subs	r2, r4, r2
 8001682:	4093      	lsls	r3, r2
 8001684:	464a      	mov	r2, r9
 8001686:	431a      	orrs	r2, r3
 8001688:	4691      	mov	r9, r2
 800168a:	464d      	mov	r5, r9
 800168c:	1e6b      	subs	r3, r5, #1
 800168e:	419d      	sbcs	r5, r3
 8001690:	4335      	orrs	r5, r6
 8001692:	e778      	b.n	8001586 <__aeabi_dadd+0x472>
 8001694:	464a      	mov	r2, r9
 8001696:	431a      	orrs	r2, r3
 8001698:	d000      	beq.n	800169c <__aeabi_dadd+0x588>
 800169a:	e66b      	b.n	8001374 <__aeabi_dadd+0x260>
 800169c:	076b      	lsls	r3, r5, #29
 800169e:	08f9      	lsrs	r1, r7, #3
 80016a0:	4319      	orrs	r1, r3
 80016a2:	08eb      	lsrs	r3, r5, #3
 80016a4:	e680      	b.n	80013a8 <__aeabi_dadd+0x294>
 80016a6:	4661      	mov	r1, ip
 80016a8:	4339      	orrs	r1, r7
 80016aa:	d054      	beq.n	8001756 <__aeabi_dadd+0x642>
 80016ac:	4663      	mov	r3, ip
 80016ae:	08f9      	lsrs	r1, r7, #3
 80016b0:	075c      	lsls	r4, r3, #29
 80016b2:	4321      	orrs	r1, r4
 80016b4:	08db      	lsrs	r3, r3, #3
 80016b6:	0004      	movs	r4, r0
 80016b8:	e654      	b.n	8001364 <__aeabi_dadd+0x250>
 80016ba:	464a      	mov	r2, r9
 80016bc:	1abd      	subs	r5, r7, r2
 80016be:	42af      	cmp	r7, r5
 80016c0:	4189      	sbcs	r1, r1
 80016c2:	4662      	mov	r2, ip
 80016c4:	4249      	negs	r1, r1
 80016c6:	1ad3      	subs	r3, r2, r3
 80016c8:	1a5b      	subs	r3, r3, r1
 80016ca:	4698      	mov	r8, r3
 80016cc:	0004      	movs	r4, r0
 80016ce:	2601      	movs	r6, #1
 80016d0:	e56b      	b.n	80011aa <__aeabi_dadd+0x96>
 80016d2:	464a      	mov	r2, r9
 80016d4:	1bd5      	subs	r5, r2, r7
 80016d6:	45a9      	cmp	r9, r5
 80016d8:	4189      	sbcs	r1, r1
 80016da:	4662      	mov	r2, ip
 80016dc:	4249      	negs	r1, r1
 80016de:	1a9a      	subs	r2, r3, r2
 80016e0:	1a52      	subs	r2, r2, r1
 80016e2:	4690      	mov	r8, r2
 80016e4:	0212      	lsls	r2, r2, #8
 80016e6:	d532      	bpl.n	800174e <__aeabi_dadd+0x63a>
 80016e8:	464a      	mov	r2, r9
 80016ea:	1abd      	subs	r5, r7, r2
 80016ec:	42af      	cmp	r7, r5
 80016ee:	4189      	sbcs	r1, r1
 80016f0:	4662      	mov	r2, ip
 80016f2:	4249      	negs	r1, r1
 80016f4:	1ad3      	subs	r3, r2, r3
 80016f6:	1a5b      	subs	r3, r3, r1
 80016f8:	4698      	mov	r8, r3
 80016fa:	0004      	movs	r4, r0
 80016fc:	e584      	b.n	8001208 <__aeabi_dadd+0xf4>
 80016fe:	4663      	mov	r3, ip
 8001700:	08f9      	lsrs	r1, r7, #3
 8001702:	075a      	lsls	r2, r3, #29
 8001704:	4311      	orrs	r1, r2
 8001706:	08db      	lsrs	r3, r3, #3
 8001708:	e64e      	b.n	80013a8 <__aeabi_dadd+0x294>
 800170a:	08f9      	lsrs	r1, r7, #3
 800170c:	0768      	lsls	r0, r5, #29
 800170e:	4301      	orrs	r1, r0
 8001710:	08eb      	lsrs	r3, r5, #3
 8001712:	e624      	b.n	800135e <__aeabi_dadd+0x24a>
 8001714:	4662      	mov	r2, ip
 8001716:	433a      	orrs	r2, r7
 8001718:	d100      	bne.n	800171c <__aeabi_dadd+0x608>
 800171a:	e698      	b.n	800144e <__aeabi_dadd+0x33a>
 800171c:	464a      	mov	r2, r9
 800171e:	08d1      	lsrs	r1, r2, #3
 8001720:	075a      	lsls	r2, r3, #29
 8001722:	4311      	orrs	r1, r2
 8001724:	08da      	lsrs	r2, r3, #3
 8001726:	2380      	movs	r3, #128	; 0x80
 8001728:	031b      	lsls	r3, r3, #12
 800172a:	421a      	tst	r2, r3
 800172c:	d008      	beq.n	8001740 <__aeabi_dadd+0x62c>
 800172e:	4660      	mov	r0, ip
 8001730:	08c5      	lsrs	r5, r0, #3
 8001732:	421d      	tst	r5, r3
 8001734:	d104      	bne.n	8001740 <__aeabi_dadd+0x62c>
 8001736:	4654      	mov	r4, sl
 8001738:	002a      	movs	r2, r5
 800173a:	08f9      	lsrs	r1, r7, #3
 800173c:	0743      	lsls	r3, r0, #29
 800173e:	4319      	orrs	r1, r3
 8001740:	0f4b      	lsrs	r3, r1, #29
 8001742:	00c9      	lsls	r1, r1, #3
 8001744:	075b      	lsls	r3, r3, #29
 8001746:	08c9      	lsrs	r1, r1, #3
 8001748:	4319      	orrs	r1, r3
 800174a:	0013      	movs	r3, r2
 800174c:	e62c      	b.n	80013a8 <__aeabi_dadd+0x294>
 800174e:	4641      	mov	r1, r8
 8001750:	4329      	orrs	r1, r5
 8001752:	d000      	beq.n	8001756 <__aeabi_dadd+0x642>
 8001754:	e5fa      	b.n	800134c <__aeabi_dadd+0x238>
 8001756:	2300      	movs	r3, #0
 8001758:	000a      	movs	r2, r1
 800175a:	2400      	movs	r4, #0
 800175c:	e602      	b.n	8001364 <__aeabi_dadd+0x250>
 800175e:	076b      	lsls	r3, r5, #29
 8001760:	08f9      	lsrs	r1, r7, #3
 8001762:	4319      	orrs	r1, r3
 8001764:	08eb      	lsrs	r3, r5, #3
 8001766:	e5fd      	b.n	8001364 <__aeabi_dadd+0x250>
 8001768:	4663      	mov	r3, ip
 800176a:	08f9      	lsrs	r1, r7, #3
 800176c:	075b      	lsls	r3, r3, #29
 800176e:	4319      	orrs	r1, r3
 8001770:	4663      	mov	r3, ip
 8001772:	0004      	movs	r4, r0
 8001774:	08db      	lsrs	r3, r3, #3
 8001776:	e617      	b.n	80013a8 <__aeabi_dadd+0x294>
 8001778:	003d      	movs	r5, r7
 800177a:	444d      	add	r5, r9
 800177c:	4463      	add	r3, ip
 800177e:	454d      	cmp	r5, r9
 8001780:	4189      	sbcs	r1, r1
 8001782:	4698      	mov	r8, r3
 8001784:	4249      	negs	r1, r1
 8001786:	4488      	add	r8, r1
 8001788:	4643      	mov	r3, r8
 800178a:	021b      	lsls	r3, r3, #8
 800178c:	d400      	bmi.n	8001790 <__aeabi_dadd+0x67c>
 800178e:	e5dd      	b.n	800134c <__aeabi_dadd+0x238>
 8001790:	4642      	mov	r2, r8
 8001792:	4b14      	ldr	r3, [pc, #80]	; (80017e4 <__aeabi_dadd+0x6d0>)
 8001794:	2601      	movs	r6, #1
 8001796:	401a      	ands	r2, r3
 8001798:	4690      	mov	r8, r2
 800179a:	e5d7      	b.n	800134c <__aeabi_dadd+0x238>
 800179c:	0010      	movs	r0, r2
 800179e:	001e      	movs	r6, r3
 80017a0:	3820      	subs	r0, #32
 80017a2:	40c6      	lsrs	r6, r0
 80017a4:	2a20      	cmp	r2, #32
 80017a6:	d005      	beq.n	80017b4 <__aeabi_dadd+0x6a0>
 80017a8:	2040      	movs	r0, #64	; 0x40
 80017aa:	1a82      	subs	r2, r0, r2
 80017ac:	4093      	lsls	r3, r2
 80017ae:	464a      	mov	r2, r9
 80017b0:	431a      	orrs	r2, r3
 80017b2:	4691      	mov	r9, r2
 80017b4:	464d      	mov	r5, r9
 80017b6:	1e6b      	subs	r3, r5, #1
 80017b8:	419d      	sbcs	r5, r3
 80017ba:	4335      	orrs	r5, r6
 80017bc:	e621      	b.n	8001402 <__aeabi_dadd+0x2ee>
 80017be:	0002      	movs	r2, r0
 80017c0:	2300      	movs	r3, #0
 80017c2:	2100      	movs	r1, #0
 80017c4:	e540      	b.n	8001248 <__aeabi_dadd+0x134>
 80017c6:	464a      	mov	r2, r9
 80017c8:	19d5      	adds	r5, r2, r7
 80017ca:	42bd      	cmp	r5, r7
 80017cc:	4189      	sbcs	r1, r1
 80017ce:	4463      	add	r3, ip
 80017d0:	4698      	mov	r8, r3
 80017d2:	4249      	negs	r1, r1
 80017d4:	4488      	add	r8, r1
 80017d6:	e5b3      	b.n	8001340 <__aeabi_dadd+0x22c>
 80017d8:	2100      	movs	r1, #0
 80017da:	4a01      	ldr	r2, [pc, #4]	; (80017e0 <__aeabi_dadd+0x6cc>)
 80017dc:	000b      	movs	r3, r1
 80017de:	e533      	b.n	8001248 <__aeabi_dadd+0x134>
 80017e0:	000007ff 	.word	0x000007ff
 80017e4:	ff7fffff 	.word	0xff7fffff

080017e8 <__aeabi_ddiv>:
 80017e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017ea:	4657      	mov	r7, sl
 80017ec:	464e      	mov	r6, r9
 80017ee:	4645      	mov	r5, r8
 80017f0:	46de      	mov	lr, fp
 80017f2:	b5e0      	push	{r5, r6, r7, lr}
 80017f4:	4681      	mov	r9, r0
 80017f6:	0005      	movs	r5, r0
 80017f8:	030c      	lsls	r4, r1, #12
 80017fa:	0048      	lsls	r0, r1, #1
 80017fc:	4692      	mov	sl, r2
 80017fe:	001f      	movs	r7, r3
 8001800:	b085      	sub	sp, #20
 8001802:	0b24      	lsrs	r4, r4, #12
 8001804:	0d40      	lsrs	r0, r0, #21
 8001806:	0fce      	lsrs	r6, r1, #31
 8001808:	2800      	cmp	r0, #0
 800180a:	d059      	beq.n	80018c0 <__aeabi_ddiv+0xd8>
 800180c:	4b87      	ldr	r3, [pc, #540]	; (8001a2c <__aeabi_ddiv+0x244>)
 800180e:	4298      	cmp	r0, r3
 8001810:	d100      	bne.n	8001814 <__aeabi_ddiv+0x2c>
 8001812:	e098      	b.n	8001946 <__aeabi_ddiv+0x15e>
 8001814:	0f6b      	lsrs	r3, r5, #29
 8001816:	00e4      	lsls	r4, r4, #3
 8001818:	431c      	orrs	r4, r3
 800181a:	2380      	movs	r3, #128	; 0x80
 800181c:	041b      	lsls	r3, r3, #16
 800181e:	4323      	orrs	r3, r4
 8001820:	4698      	mov	r8, r3
 8001822:	4b83      	ldr	r3, [pc, #524]	; (8001a30 <__aeabi_ddiv+0x248>)
 8001824:	00ed      	lsls	r5, r5, #3
 8001826:	469b      	mov	fp, r3
 8001828:	2300      	movs	r3, #0
 800182a:	4699      	mov	r9, r3
 800182c:	4483      	add	fp, r0
 800182e:	9300      	str	r3, [sp, #0]
 8001830:	033c      	lsls	r4, r7, #12
 8001832:	007b      	lsls	r3, r7, #1
 8001834:	4650      	mov	r0, sl
 8001836:	0b24      	lsrs	r4, r4, #12
 8001838:	0d5b      	lsrs	r3, r3, #21
 800183a:	0fff      	lsrs	r7, r7, #31
 800183c:	2b00      	cmp	r3, #0
 800183e:	d067      	beq.n	8001910 <__aeabi_ddiv+0x128>
 8001840:	4a7a      	ldr	r2, [pc, #488]	; (8001a2c <__aeabi_ddiv+0x244>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d018      	beq.n	8001878 <__aeabi_ddiv+0x90>
 8001846:	497a      	ldr	r1, [pc, #488]	; (8001a30 <__aeabi_ddiv+0x248>)
 8001848:	0f42      	lsrs	r2, r0, #29
 800184a:	468c      	mov	ip, r1
 800184c:	00e4      	lsls	r4, r4, #3
 800184e:	4659      	mov	r1, fp
 8001850:	4314      	orrs	r4, r2
 8001852:	2280      	movs	r2, #128	; 0x80
 8001854:	4463      	add	r3, ip
 8001856:	0412      	lsls	r2, r2, #16
 8001858:	1acb      	subs	r3, r1, r3
 800185a:	4314      	orrs	r4, r2
 800185c:	469b      	mov	fp, r3
 800185e:	00c2      	lsls	r2, r0, #3
 8001860:	2000      	movs	r0, #0
 8001862:	0033      	movs	r3, r6
 8001864:	407b      	eors	r3, r7
 8001866:	469a      	mov	sl, r3
 8001868:	464b      	mov	r3, r9
 800186a:	2b0f      	cmp	r3, #15
 800186c:	d900      	bls.n	8001870 <__aeabi_ddiv+0x88>
 800186e:	e0ef      	b.n	8001a50 <__aeabi_ddiv+0x268>
 8001870:	4970      	ldr	r1, [pc, #448]	; (8001a34 <__aeabi_ddiv+0x24c>)
 8001872:	009b      	lsls	r3, r3, #2
 8001874:	58cb      	ldr	r3, [r1, r3]
 8001876:	469f      	mov	pc, r3
 8001878:	4b6f      	ldr	r3, [pc, #444]	; (8001a38 <__aeabi_ddiv+0x250>)
 800187a:	4652      	mov	r2, sl
 800187c:	469c      	mov	ip, r3
 800187e:	4322      	orrs	r2, r4
 8001880:	44e3      	add	fp, ip
 8001882:	2a00      	cmp	r2, #0
 8001884:	d000      	beq.n	8001888 <__aeabi_ddiv+0xa0>
 8001886:	e095      	b.n	80019b4 <__aeabi_ddiv+0x1cc>
 8001888:	4649      	mov	r1, r9
 800188a:	2302      	movs	r3, #2
 800188c:	4319      	orrs	r1, r3
 800188e:	4689      	mov	r9, r1
 8001890:	2400      	movs	r4, #0
 8001892:	2002      	movs	r0, #2
 8001894:	e7e5      	b.n	8001862 <__aeabi_ddiv+0x7a>
 8001896:	2300      	movs	r3, #0
 8001898:	2400      	movs	r4, #0
 800189a:	2500      	movs	r5, #0
 800189c:	4652      	mov	r2, sl
 800189e:	051b      	lsls	r3, r3, #20
 80018a0:	4323      	orrs	r3, r4
 80018a2:	07d2      	lsls	r2, r2, #31
 80018a4:	4313      	orrs	r3, r2
 80018a6:	0028      	movs	r0, r5
 80018a8:	0019      	movs	r1, r3
 80018aa:	b005      	add	sp, #20
 80018ac:	bcf0      	pop	{r4, r5, r6, r7}
 80018ae:	46bb      	mov	fp, r7
 80018b0:	46b2      	mov	sl, r6
 80018b2:	46a9      	mov	r9, r5
 80018b4:	46a0      	mov	r8, r4
 80018b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018b8:	2400      	movs	r4, #0
 80018ba:	2500      	movs	r5, #0
 80018bc:	4b5b      	ldr	r3, [pc, #364]	; (8001a2c <__aeabi_ddiv+0x244>)
 80018be:	e7ed      	b.n	800189c <__aeabi_ddiv+0xb4>
 80018c0:	464b      	mov	r3, r9
 80018c2:	4323      	orrs	r3, r4
 80018c4:	4698      	mov	r8, r3
 80018c6:	d100      	bne.n	80018ca <__aeabi_ddiv+0xe2>
 80018c8:	e089      	b.n	80019de <__aeabi_ddiv+0x1f6>
 80018ca:	2c00      	cmp	r4, #0
 80018cc:	d100      	bne.n	80018d0 <__aeabi_ddiv+0xe8>
 80018ce:	e1e0      	b.n	8001c92 <__aeabi_ddiv+0x4aa>
 80018d0:	0020      	movs	r0, r4
 80018d2:	f001 fa5d 	bl	8002d90 <__clzsi2>
 80018d6:	0001      	movs	r1, r0
 80018d8:	0002      	movs	r2, r0
 80018da:	390b      	subs	r1, #11
 80018dc:	231d      	movs	r3, #29
 80018de:	1a5b      	subs	r3, r3, r1
 80018e0:	4649      	mov	r1, r9
 80018e2:	0010      	movs	r0, r2
 80018e4:	40d9      	lsrs	r1, r3
 80018e6:	3808      	subs	r0, #8
 80018e8:	4084      	lsls	r4, r0
 80018ea:	000b      	movs	r3, r1
 80018ec:	464d      	mov	r5, r9
 80018ee:	4323      	orrs	r3, r4
 80018f0:	4698      	mov	r8, r3
 80018f2:	4085      	lsls	r5, r0
 80018f4:	4851      	ldr	r0, [pc, #324]	; (8001a3c <__aeabi_ddiv+0x254>)
 80018f6:	033c      	lsls	r4, r7, #12
 80018f8:	1a83      	subs	r3, r0, r2
 80018fa:	469b      	mov	fp, r3
 80018fc:	2300      	movs	r3, #0
 80018fe:	4699      	mov	r9, r3
 8001900:	9300      	str	r3, [sp, #0]
 8001902:	007b      	lsls	r3, r7, #1
 8001904:	4650      	mov	r0, sl
 8001906:	0b24      	lsrs	r4, r4, #12
 8001908:	0d5b      	lsrs	r3, r3, #21
 800190a:	0fff      	lsrs	r7, r7, #31
 800190c:	2b00      	cmp	r3, #0
 800190e:	d197      	bne.n	8001840 <__aeabi_ddiv+0x58>
 8001910:	4652      	mov	r2, sl
 8001912:	4322      	orrs	r2, r4
 8001914:	d055      	beq.n	80019c2 <__aeabi_ddiv+0x1da>
 8001916:	2c00      	cmp	r4, #0
 8001918:	d100      	bne.n	800191c <__aeabi_ddiv+0x134>
 800191a:	e1ca      	b.n	8001cb2 <__aeabi_ddiv+0x4ca>
 800191c:	0020      	movs	r0, r4
 800191e:	f001 fa37 	bl	8002d90 <__clzsi2>
 8001922:	0002      	movs	r2, r0
 8001924:	3a0b      	subs	r2, #11
 8001926:	231d      	movs	r3, #29
 8001928:	0001      	movs	r1, r0
 800192a:	1a9b      	subs	r3, r3, r2
 800192c:	4652      	mov	r2, sl
 800192e:	3908      	subs	r1, #8
 8001930:	40da      	lsrs	r2, r3
 8001932:	408c      	lsls	r4, r1
 8001934:	4314      	orrs	r4, r2
 8001936:	4652      	mov	r2, sl
 8001938:	408a      	lsls	r2, r1
 800193a:	4b41      	ldr	r3, [pc, #260]	; (8001a40 <__aeabi_ddiv+0x258>)
 800193c:	4458      	add	r0, fp
 800193e:	469b      	mov	fp, r3
 8001940:	4483      	add	fp, r0
 8001942:	2000      	movs	r0, #0
 8001944:	e78d      	b.n	8001862 <__aeabi_ddiv+0x7a>
 8001946:	464b      	mov	r3, r9
 8001948:	4323      	orrs	r3, r4
 800194a:	4698      	mov	r8, r3
 800194c:	d140      	bne.n	80019d0 <__aeabi_ddiv+0x1e8>
 800194e:	2308      	movs	r3, #8
 8001950:	4699      	mov	r9, r3
 8001952:	3b06      	subs	r3, #6
 8001954:	2500      	movs	r5, #0
 8001956:	4683      	mov	fp, r0
 8001958:	9300      	str	r3, [sp, #0]
 800195a:	e769      	b.n	8001830 <__aeabi_ddiv+0x48>
 800195c:	46b2      	mov	sl, r6
 800195e:	9b00      	ldr	r3, [sp, #0]
 8001960:	2b02      	cmp	r3, #2
 8001962:	d0a9      	beq.n	80018b8 <__aeabi_ddiv+0xd0>
 8001964:	2b03      	cmp	r3, #3
 8001966:	d100      	bne.n	800196a <__aeabi_ddiv+0x182>
 8001968:	e211      	b.n	8001d8e <__aeabi_ddiv+0x5a6>
 800196a:	2b01      	cmp	r3, #1
 800196c:	d093      	beq.n	8001896 <__aeabi_ddiv+0xae>
 800196e:	4a35      	ldr	r2, [pc, #212]	; (8001a44 <__aeabi_ddiv+0x25c>)
 8001970:	445a      	add	r2, fp
 8001972:	2a00      	cmp	r2, #0
 8001974:	dc00      	bgt.n	8001978 <__aeabi_ddiv+0x190>
 8001976:	e13c      	b.n	8001bf2 <__aeabi_ddiv+0x40a>
 8001978:	076b      	lsls	r3, r5, #29
 800197a:	d000      	beq.n	800197e <__aeabi_ddiv+0x196>
 800197c:	e1a7      	b.n	8001cce <__aeabi_ddiv+0x4e6>
 800197e:	08ed      	lsrs	r5, r5, #3
 8001980:	4643      	mov	r3, r8
 8001982:	01db      	lsls	r3, r3, #7
 8001984:	d506      	bpl.n	8001994 <__aeabi_ddiv+0x1ac>
 8001986:	4642      	mov	r2, r8
 8001988:	4b2f      	ldr	r3, [pc, #188]	; (8001a48 <__aeabi_ddiv+0x260>)
 800198a:	401a      	ands	r2, r3
 800198c:	4690      	mov	r8, r2
 800198e:	2280      	movs	r2, #128	; 0x80
 8001990:	00d2      	lsls	r2, r2, #3
 8001992:	445a      	add	r2, fp
 8001994:	4b2d      	ldr	r3, [pc, #180]	; (8001a4c <__aeabi_ddiv+0x264>)
 8001996:	429a      	cmp	r2, r3
 8001998:	dc8e      	bgt.n	80018b8 <__aeabi_ddiv+0xd0>
 800199a:	4643      	mov	r3, r8
 800199c:	0552      	lsls	r2, r2, #21
 800199e:	0758      	lsls	r0, r3, #29
 80019a0:	025c      	lsls	r4, r3, #9
 80019a2:	4305      	orrs	r5, r0
 80019a4:	0b24      	lsrs	r4, r4, #12
 80019a6:	0d53      	lsrs	r3, r2, #21
 80019a8:	e778      	b.n	800189c <__aeabi_ddiv+0xb4>
 80019aa:	46ba      	mov	sl, r7
 80019ac:	46a0      	mov	r8, r4
 80019ae:	0015      	movs	r5, r2
 80019b0:	9000      	str	r0, [sp, #0]
 80019b2:	e7d4      	b.n	800195e <__aeabi_ddiv+0x176>
 80019b4:	464a      	mov	r2, r9
 80019b6:	2303      	movs	r3, #3
 80019b8:	431a      	orrs	r2, r3
 80019ba:	4691      	mov	r9, r2
 80019bc:	2003      	movs	r0, #3
 80019be:	4652      	mov	r2, sl
 80019c0:	e74f      	b.n	8001862 <__aeabi_ddiv+0x7a>
 80019c2:	4649      	mov	r1, r9
 80019c4:	2301      	movs	r3, #1
 80019c6:	4319      	orrs	r1, r3
 80019c8:	4689      	mov	r9, r1
 80019ca:	2400      	movs	r4, #0
 80019cc:	2001      	movs	r0, #1
 80019ce:	e748      	b.n	8001862 <__aeabi_ddiv+0x7a>
 80019d0:	230c      	movs	r3, #12
 80019d2:	4699      	mov	r9, r3
 80019d4:	3b09      	subs	r3, #9
 80019d6:	46a0      	mov	r8, r4
 80019d8:	4683      	mov	fp, r0
 80019da:	9300      	str	r3, [sp, #0]
 80019dc:	e728      	b.n	8001830 <__aeabi_ddiv+0x48>
 80019de:	2304      	movs	r3, #4
 80019e0:	4699      	mov	r9, r3
 80019e2:	2300      	movs	r3, #0
 80019e4:	469b      	mov	fp, r3
 80019e6:	3301      	adds	r3, #1
 80019e8:	2500      	movs	r5, #0
 80019ea:	9300      	str	r3, [sp, #0]
 80019ec:	e720      	b.n	8001830 <__aeabi_ddiv+0x48>
 80019ee:	2300      	movs	r3, #0
 80019f0:	2480      	movs	r4, #128	; 0x80
 80019f2:	469a      	mov	sl, r3
 80019f4:	2500      	movs	r5, #0
 80019f6:	4b0d      	ldr	r3, [pc, #52]	; (8001a2c <__aeabi_ddiv+0x244>)
 80019f8:	0324      	lsls	r4, r4, #12
 80019fa:	e74f      	b.n	800189c <__aeabi_ddiv+0xb4>
 80019fc:	2380      	movs	r3, #128	; 0x80
 80019fe:	4641      	mov	r1, r8
 8001a00:	031b      	lsls	r3, r3, #12
 8001a02:	4219      	tst	r1, r3
 8001a04:	d008      	beq.n	8001a18 <__aeabi_ddiv+0x230>
 8001a06:	421c      	tst	r4, r3
 8001a08:	d106      	bne.n	8001a18 <__aeabi_ddiv+0x230>
 8001a0a:	431c      	orrs	r4, r3
 8001a0c:	0324      	lsls	r4, r4, #12
 8001a0e:	46ba      	mov	sl, r7
 8001a10:	0015      	movs	r5, r2
 8001a12:	4b06      	ldr	r3, [pc, #24]	; (8001a2c <__aeabi_ddiv+0x244>)
 8001a14:	0b24      	lsrs	r4, r4, #12
 8001a16:	e741      	b.n	800189c <__aeabi_ddiv+0xb4>
 8001a18:	2480      	movs	r4, #128	; 0x80
 8001a1a:	4643      	mov	r3, r8
 8001a1c:	0324      	lsls	r4, r4, #12
 8001a1e:	431c      	orrs	r4, r3
 8001a20:	0324      	lsls	r4, r4, #12
 8001a22:	46b2      	mov	sl, r6
 8001a24:	4b01      	ldr	r3, [pc, #4]	; (8001a2c <__aeabi_ddiv+0x244>)
 8001a26:	0b24      	lsrs	r4, r4, #12
 8001a28:	e738      	b.n	800189c <__aeabi_ddiv+0xb4>
 8001a2a:	46c0      	nop			; (mov r8, r8)
 8001a2c:	000007ff 	.word	0x000007ff
 8001a30:	fffffc01 	.word	0xfffffc01
 8001a34:	08006df8 	.word	0x08006df8
 8001a38:	fffff801 	.word	0xfffff801
 8001a3c:	fffffc0d 	.word	0xfffffc0d
 8001a40:	000003f3 	.word	0x000003f3
 8001a44:	000003ff 	.word	0x000003ff
 8001a48:	feffffff 	.word	0xfeffffff
 8001a4c:	000007fe 	.word	0x000007fe
 8001a50:	4544      	cmp	r4, r8
 8001a52:	d200      	bcs.n	8001a56 <__aeabi_ddiv+0x26e>
 8001a54:	e116      	b.n	8001c84 <__aeabi_ddiv+0x49c>
 8001a56:	d100      	bne.n	8001a5a <__aeabi_ddiv+0x272>
 8001a58:	e111      	b.n	8001c7e <__aeabi_ddiv+0x496>
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	425b      	negs	r3, r3
 8001a5e:	469c      	mov	ip, r3
 8001a60:	002e      	movs	r6, r5
 8001a62:	4640      	mov	r0, r8
 8001a64:	2500      	movs	r5, #0
 8001a66:	44e3      	add	fp, ip
 8001a68:	0223      	lsls	r3, r4, #8
 8001a6a:	0e14      	lsrs	r4, r2, #24
 8001a6c:	431c      	orrs	r4, r3
 8001a6e:	0c1b      	lsrs	r3, r3, #16
 8001a70:	4699      	mov	r9, r3
 8001a72:	0423      	lsls	r3, r4, #16
 8001a74:	0c1f      	lsrs	r7, r3, #16
 8001a76:	0212      	lsls	r2, r2, #8
 8001a78:	4649      	mov	r1, r9
 8001a7a:	9200      	str	r2, [sp, #0]
 8001a7c:	9701      	str	r7, [sp, #4]
 8001a7e:	f7fe fbc9 	bl	8000214 <__aeabi_uidivmod>
 8001a82:	0002      	movs	r2, r0
 8001a84:	437a      	muls	r2, r7
 8001a86:	040b      	lsls	r3, r1, #16
 8001a88:	0c31      	lsrs	r1, r6, #16
 8001a8a:	4680      	mov	r8, r0
 8001a8c:	4319      	orrs	r1, r3
 8001a8e:	428a      	cmp	r2, r1
 8001a90:	d90b      	bls.n	8001aaa <__aeabi_ddiv+0x2c2>
 8001a92:	2301      	movs	r3, #1
 8001a94:	425b      	negs	r3, r3
 8001a96:	469c      	mov	ip, r3
 8001a98:	1909      	adds	r1, r1, r4
 8001a9a:	44e0      	add	r8, ip
 8001a9c:	428c      	cmp	r4, r1
 8001a9e:	d804      	bhi.n	8001aaa <__aeabi_ddiv+0x2c2>
 8001aa0:	428a      	cmp	r2, r1
 8001aa2:	d902      	bls.n	8001aaa <__aeabi_ddiv+0x2c2>
 8001aa4:	1e83      	subs	r3, r0, #2
 8001aa6:	4698      	mov	r8, r3
 8001aa8:	1909      	adds	r1, r1, r4
 8001aaa:	1a88      	subs	r0, r1, r2
 8001aac:	4649      	mov	r1, r9
 8001aae:	f7fe fbb1 	bl	8000214 <__aeabi_uidivmod>
 8001ab2:	0409      	lsls	r1, r1, #16
 8001ab4:	468c      	mov	ip, r1
 8001ab6:	0431      	lsls	r1, r6, #16
 8001ab8:	4666      	mov	r6, ip
 8001aba:	9a01      	ldr	r2, [sp, #4]
 8001abc:	0c09      	lsrs	r1, r1, #16
 8001abe:	4342      	muls	r2, r0
 8001ac0:	0003      	movs	r3, r0
 8001ac2:	4331      	orrs	r1, r6
 8001ac4:	428a      	cmp	r2, r1
 8001ac6:	d904      	bls.n	8001ad2 <__aeabi_ddiv+0x2ea>
 8001ac8:	1909      	adds	r1, r1, r4
 8001aca:	3b01      	subs	r3, #1
 8001acc:	428c      	cmp	r4, r1
 8001ace:	d800      	bhi.n	8001ad2 <__aeabi_ddiv+0x2ea>
 8001ad0:	e111      	b.n	8001cf6 <__aeabi_ddiv+0x50e>
 8001ad2:	1a89      	subs	r1, r1, r2
 8001ad4:	4642      	mov	r2, r8
 8001ad6:	9e00      	ldr	r6, [sp, #0]
 8001ad8:	0412      	lsls	r2, r2, #16
 8001ada:	431a      	orrs	r2, r3
 8001adc:	0c33      	lsrs	r3, r6, #16
 8001ade:	001f      	movs	r7, r3
 8001ae0:	0c10      	lsrs	r0, r2, #16
 8001ae2:	4690      	mov	r8, r2
 8001ae4:	9302      	str	r3, [sp, #8]
 8001ae6:	0413      	lsls	r3, r2, #16
 8001ae8:	0432      	lsls	r2, r6, #16
 8001aea:	0c16      	lsrs	r6, r2, #16
 8001aec:	0032      	movs	r2, r6
 8001aee:	0c1b      	lsrs	r3, r3, #16
 8001af0:	435a      	muls	r2, r3
 8001af2:	9603      	str	r6, [sp, #12]
 8001af4:	437b      	muls	r3, r7
 8001af6:	4346      	muls	r6, r0
 8001af8:	4378      	muls	r0, r7
 8001afa:	0c17      	lsrs	r7, r2, #16
 8001afc:	46bc      	mov	ip, r7
 8001afe:	199b      	adds	r3, r3, r6
 8001b00:	4463      	add	r3, ip
 8001b02:	429e      	cmp	r6, r3
 8001b04:	d903      	bls.n	8001b0e <__aeabi_ddiv+0x326>
 8001b06:	2680      	movs	r6, #128	; 0x80
 8001b08:	0276      	lsls	r6, r6, #9
 8001b0a:	46b4      	mov	ip, r6
 8001b0c:	4460      	add	r0, ip
 8001b0e:	0c1e      	lsrs	r6, r3, #16
 8001b10:	1830      	adds	r0, r6, r0
 8001b12:	0416      	lsls	r6, r2, #16
 8001b14:	041b      	lsls	r3, r3, #16
 8001b16:	0c36      	lsrs	r6, r6, #16
 8001b18:	199e      	adds	r6, r3, r6
 8001b1a:	4281      	cmp	r1, r0
 8001b1c:	d200      	bcs.n	8001b20 <__aeabi_ddiv+0x338>
 8001b1e:	e09c      	b.n	8001c5a <__aeabi_ddiv+0x472>
 8001b20:	d100      	bne.n	8001b24 <__aeabi_ddiv+0x33c>
 8001b22:	e097      	b.n	8001c54 <__aeabi_ddiv+0x46c>
 8001b24:	1bae      	subs	r6, r5, r6
 8001b26:	1a09      	subs	r1, r1, r0
 8001b28:	42b5      	cmp	r5, r6
 8001b2a:	4180      	sbcs	r0, r0
 8001b2c:	4240      	negs	r0, r0
 8001b2e:	1a08      	subs	r0, r1, r0
 8001b30:	4284      	cmp	r4, r0
 8001b32:	d100      	bne.n	8001b36 <__aeabi_ddiv+0x34e>
 8001b34:	e111      	b.n	8001d5a <__aeabi_ddiv+0x572>
 8001b36:	4649      	mov	r1, r9
 8001b38:	f7fe fb6c 	bl	8000214 <__aeabi_uidivmod>
 8001b3c:	9a01      	ldr	r2, [sp, #4]
 8001b3e:	040b      	lsls	r3, r1, #16
 8001b40:	4342      	muls	r2, r0
 8001b42:	0c31      	lsrs	r1, r6, #16
 8001b44:	0005      	movs	r5, r0
 8001b46:	4319      	orrs	r1, r3
 8001b48:	428a      	cmp	r2, r1
 8001b4a:	d907      	bls.n	8001b5c <__aeabi_ddiv+0x374>
 8001b4c:	1909      	adds	r1, r1, r4
 8001b4e:	3d01      	subs	r5, #1
 8001b50:	428c      	cmp	r4, r1
 8001b52:	d803      	bhi.n	8001b5c <__aeabi_ddiv+0x374>
 8001b54:	428a      	cmp	r2, r1
 8001b56:	d901      	bls.n	8001b5c <__aeabi_ddiv+0x374>
 8001b58:	1e85      	subs	r5, r0, #2
 8001b5a:	1909      	adds	r1, r1, r4
 8001b5c:	1a88      	subs	r0, r1, r2
 8001b5e:	4649      	mov	r1, r9
 8001b60:	f7fe fb58 	bl	8000214 <__aeabi_uidivmod>
 8001b64:	0409      	lsls	r1, r1, #16
 8001b66:	468c      	mov	ip, r1
 8001b68:	0431      	lsls	r1, r6, #16
 8001b6a:	4666      	mov	r6, ip
 8001b6c:	9a01      	ldr	r2, [sp, #4]
 8001b6e:	0c09      	lsrs	r1, r1, #16
 8001b70:	4342      	muls	r2, r0
 8001b72:	0003      	movs	r3, r0
 8001b74:	4331      	orrs	r1, r6
 8001b76:	428a      	cmp	r2, r1
 8001b78:	d907      	bls.n	8001b8a <__aeabi_ddiv+0x3a2>
 8001b7a:	1909      	adds	r1, r1, r4
 8001b7c:	3b01      	subs	r3, #1
 8001b7e:	428c      	cmp	r4, r1
 8001b80:	d803      	bhi.n	8001b8a <__aeabi_ddiv+0x3a2>
 8001b82:	428a      	cmp	r2, r1
 8001b84:	d901      	bls.n	8001b8a <__aeabi_ddiv+0x3a2>
 8001b86:	1e83      	subs	r3, r0, #2
 8001b88:	1909      	adds	r1, r1, r4
 8001b8a:	9e03      	ldr	r6, [sp, #12]
 8001b8c:	1a89      	subs	r1, r1, r2
 8001b8e:	0032      	movs	r2, r6
 8001b90:	042d      	lsls	r5, r5, #16
 8001b92:	431d      	orrs	r5, r3
 8001b94:	9f02      	ldr	r7, [sp, #8]
 8001b96:	042b      	lsls	r3, r5, #16
 8001b98:	0c1b      	lsrs	r3, r3, #16
 8001b9a:	435a      	muls	r2, r3
 8001b9c:	437b      	muls	r3, r7
 8001b9e:	469c      	mov	ip, r3
 8001ba0:	0c28      	lsrs	r0, r5, #16
 8001ba2:	4346      	muls	r6, r0
 8001ba4:	0c13      	lsrs	r3, r2, #16
 8001ba6:	44b4      	add	ip, r6
 8001ba8:	4463      	add	r3, ip
 8001baa:	4378      	muls	r0, r7
 8001bac:	429e      	cmp	r6, r3
 8001bae:	d903      	bls.n	8001bb8 <__aeabi_ddiv+0x3d0>
 8001bb0:	2680      	movs	r6, #128	; 0x80
 8001bb2:	0276      	lsls	r6, r6, #9
 8001bb4:	46b4      	mov	ip, r6
 8001bb6:	4460      	add	r0, ip
 8001bb8:	0c1e      	lsrs	r6, r3, #16
 8001bba:	0412      	lsls	r2, r2, #16
 8001bbc:	041b      	lsls	r3, r3, #16
 8001bbe:	0c12      	lsrs	r2, r2, #16
 8001bc0:	1830      	adds	r0, r6, r0
 8001bc2:	189b      	adds	r3, r3, r2
 8001bc4:	4281      	cmp	r1, r0
 8001bc6:	d306      	bcc.n	8001bd6 <__aeabi_ddiv+0x3ee>
 8001bc8:	d002      	beq.n	8001bd0 <__aeabi_ddiv+0x3e8>
 8001bca:	2301      	movs	r3, #1
 8001bcc:	431d      	orrs	r5, r3
 8001bce:	e6ce      	b.n	800196e <__aeabi_ddiv+0x186>
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d100      	bne.n	8001bd6 <__aeabi_ddiv+0x3ee>
 8001bd4:	e6cb      	b.n	800196e <__aeabi_ddiv+0x186>
 8001bd6:	1861      	adds	r1, r4, r1
 8001bd8:	1e6e      	subs	r6, r5, #1
 8001bda:	42a1      	cmp	r1, r4
 8001bdc:	d200      	bcs.n	8001be0 <__aeabi_ddiv+0x3f8>
 8001bde:	e0a4      	b.n	8001d2a <__aeabi_ddiv+0x542>
 8001be0:	4281      	cmp	r1, r0
 8001be2:	d200      	bcs.n	8001be6 <__aeabi_ddiv+0x3fe>
 8001be4:	e0c9      	b.n	8001d7a <__aeabi_ddiv+0x592>
 8001be6:	d100      	bne.n	8001bea <__aeabi_ddiv+0x402>
 8001be8:	e0d9      	b.n	8001d9e <__aeabi_ddiv+0x5b6>
 8001bea:	0035      	movs	r5, r6
 8001bec:	e7ed      	b.n	8001bca <__aeabi_ddiv+0x3e2>
 8001bee:	2501      	movs	r5, #1
 8001bf0:	426d      	negs	r5, r5
 8001bf2:	2101      	movs	r1, #1
 8001bf4:	1a89      	subs	r1, r1, r2
 8001bf6:	2938      	cmp	r1, #56	; 0x38
 8001bf8:	dd00      	ble.n	8001bfc <__aeabi_ddiv+0x414>
 8001bfa:	e64c      	b.n	8001896 <__aeabi_ddiv+0xae>
 8001bfc:	291f      	cmp	r1, #31
 8001bfe:	dc00      	bgt.n	8001c02 <__aeabi_ddiv+0x41a>
 8001c00:	e07f      	b.n	8001d02 <__aeabi_ddiv+0x51a>
 8001c02:	231f      	movs	r3, #31
 8001c04:	425b      	negs	r3, r3
 8001c06:	1a9a      	subs	r2, r3, r2
 8001c08:	4643      	mov	r3, r8
 8001c0a:	40d3      	lsrs	r3, r2
 8001c0c:	2920      	cmp	r1, #32
 8001c0e:	d004      	beq.n	8001c1a <__aeabi_ddiv+0x432>
 8001c10:	4644      	mov	r4, r8
 8001c12:	4a65      	ldr	r2, [pc, #404]	; (8001da8 <__aeabi_ddiv+0x5c0>)
 8001c14:	445a      	add	r2, fp
 8001c16:	4094      	lsls	r4, r2
 8001c18:	4325      	orrs	r5, r4
 8001c1a:	1e6a      	subs	r2, r5, #1
 8001c1c:	4195      	sbcs	r5, r2
 8001c1e:	2207      	movs	r2, #7
 8001c20:	432b      	orrs	r3, r5
 8001c22:	0015      	movs	r5, r2
 8001c24:	2400      	movs	r4, #0
 8001c26:	401d      	ands	r5, r3
 8001c28:	421a      	tst	r2, r3
 8001c2a:	d100      	bne.n	8001c2e <__aeabi_ddiv+0x446>
 8001c2c:	e0a1      	b.n	8001d72 <__aeabi_ddiv+0x58a>
 8001c2e:	220f      	movs	r2, #15
 8001c30:	2400      	movs	r4, #0
 8001c32:	401a      	ands	r2, r3
 8001c34:	2a04      	cmp	r2, #4
 8001c36:	d100      	bne.n	8001c3a <__aeabi_ddiv+0x452>
 8001c38:	e098      	b.n	8001d6c <__aeabi_ddiv+0x584>
 8001c3a:	1d1a      	adds	r2, r3, #4
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	419b      	sbcs	r3, r3
 8001c40:	425b      	negs	r3, r3
 8001c42:	18e4      	adds	r4, r4, r3
 8001c44:	0013      	movs	r3, r2
 8001c46:	0222      	lsls	r2, r4, #8
 8001c48:	d400      	bmi.n	8001c4c <__aeabi_ddiv+0x464>
 8001c4a:	e08f      	b.n	8001d6c <__aeabi_ddiv+0x584>
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	2400      	movs	r4, #0
 8001c50:	2500      	movs	r5, #0
 8001c52:	e623      	b.n	800189c <__aeabi_ddiv+0xb4>
 8001c54:	42b5      	cmp	r5, r6
 8001c56:	d300      	bcc.n	8001c5a <__aeabi_ddiv+0x472>
 8001c58:	e764      	b.n	8001b24 <__aeabi_ddiv+0x33c>
 8001c5a:	4643      	mov	r3, r8
 8001c5c:	1e5a      	subs	r2, r3, #1
 8001c5e:	9b00      	ldr	r3, [sp, #0]
 8001c60:	469c      	mov	ip, r3
 8001c62:	4465      	add	r5, ip
 8001c64:	001f      	movs	r7, r3
 8001c66:	429d      	cmp	r5, r3
 8001c68:	419b      	sbcs	r3, r3
 8001c6a:	425b      	negs	r3, r3
 8001c6c:	191b      	adds	r3, r3, r4
 8001c6e:	18c9      	adds	r1, r1, r3
 8001c70:	428c      	cmp	r4, r1
 8001c72:	d23a      	bcs.n	8001cea <__aeabi_ddiv+0x502>
 8001c74:	4288      	cmp	r0, r1
 8001c76:	d863      	bhi.n	8001d40 <__aeabi_ddiv+0x558>
 8001c78:	d060      	beq.n	8001d3c <__aeabi_ddiv+0x554>
 8001c7a:	4690      	mov	r8, r2
 8001c7c:	e752      	b.n	8001b24 <__aeabi_ddiv+0x33c>
 8001c7e:	42aa      	cmp	r2, r5
 8001c80:	d900      	bls.n	8001c84 <__aeabi_ddiv+0x49c>
 8001c82:	e6ea      	b.n	8001a5a <__aeabi_ddiv+0x272>
 8001c84:	4643      	mov	r3, r8
 8001c86:	07de      	lsls	r6, r3, #31
 8001c88:	0858      	lsrs	r0, r3, #1
 8001c8a:	086b      	lsrs	r3, r5, #1
 8001c8c:	431e      	orrs	r6, r3
 8001c8e:	07ed      	lsls	r5, r5, #31
 8001c90:	e6ea      	b.n	8001a68 <__aeabi_ddiv+0x280>
 8001c92:	4648      	mov	r0, r9
 8001c94:	f001 f87c 	bl	8002d90 <__clzsi2>
 8001c98:	0001      	movs	r1, r0
 8001c9a:	0002      	movs	r2, r0
 8001c9c:	3115      	adds	r1, #21
 8001c9e:	3220      	adds	r2, #32
 8001ca0:	291c      	cmp	r1, #28
 8001ca2:	dc00      	bgt.n	8001ca6 <__aeabi_ddiv+0x4be>
 8001ca4:	e61a      	b.n	80018dc <__aeabi_ddiv+0xf4>
 8001ca6:	464b      	mov	r3, r9
 8001ca8:	3808      	subs	r0, #8
 8001caa:	4083      	lsls	r3, r0
 8001cac:	2500      	movs	r5, #0
 8001cae:	4698      	mov	r8, r3
 8001cb0:	e620      	b.n	80018f4 <__aeabi_ddiv+0x10c>
 8001cb2:	f001 f86d 	bl	8002d90 <__clzsi2>
 8001cb6:	0003      	movs	r3, r0
 8001cb8:	001a      	movs	r2, r3
 8001cba:	3215      	adds	r2, #21
 8001cbc:	3020      	adds	r0, #32
 8001cbe:	2a1c      	cmp	r2, #28
 8001cc0:	dc00      	bgt.n	8001cc4 <__aeabi_ddiv+0x4dc>
 8001cc2:	e630      	b.n	8001926 <__aeabi_ddiv+0x13e>
 8001cc4:	4654      	mov	r4, sl
 8001cc6:	3b08      	subs	r3, #8
 8001cc8:	2200      	movs	r2, #0
 8001cca:	409c      	lsls	r4, r3
 8001ccc:	e635      	b.n	800193a <__aeabi_ddiv+0x152>
 8001cce:	230f      	movs	r3, #15
 8001cd0:	402b      	ands	r3, r5
 8001cd2:	2b04      	cmp	r3, #4
 8001cd4:	d100      	bne.n	8001cd8 <__aeabi_ddiv+0x4f0>
 8001cd6:	e652      	b.n	800197e <__aeabi_ddiv+0x196>
 8001cd8:	2305      	movs	r3, #5
 8001cda:	425b      	negs	r3, r3
 8001cdc:	42ab      	cmp	r3, r5
 8001cde:	419b      	sbcs	r3, r3
 8001ce0:	3504      	adds	r5, #4
 8001ce2:	425b      	negs	r3, r3
 8001ce4:	08ed      	lsrs	r5, r5, #3
 8001ce6:	4498      	add	r8, r3
 8001ce8:	e64a      	b.n	8001980 <__aeabi_ddiv+0x198>
 8001cea:	428c      	cmp	r4, r1
 8001cec:	d1c5      	bne.n	8001c7a <__aeabi_ddiv+0x492>
 8001cee:	42af      	cmp	r7, r5
 8001cf0:	d9c0      	bls.n	8001c74 <__aeabi_ddiv+0x48c>
 8001cf2:	4690      	mov	r8, r2
 8001cf4:	e716      	b.n	8001b24 <__aeabi_ddiv+0x33c>
 8001cf6:	428a      	cmp	r2, r1
 8001cf8:	d800      	bhi.n	8001cfc <__aeabi_ddiv+0x514>
 8001cfa:	e6ea      	b.n	8001ad2 <__aeabi_ddiv+0x2ea>
 8001cfc:	1e83      	subs	r3, r0, #2
 8001cfe:	1909      	adds	r1, r1, r4
 8001d00:	e6e7      	b.n	8001ad2 <__aeabi_ddiv+0x2ea>
 8001d02:	4a2a      	ldr	r2, [pc, #168]	; (8001dac <__aeabi_ddiv+0x5c4>)
 8001d04:	0028      	movs	r0, r5
 8001d06:	445a      	add	r2, fp
 8001d08:	4643      	mov	r3, r8
 8001d0a:	4095      	lsls	r5, r2
 8001d0c:	4093      	lsls	r3, r2
 8001d0e:	40c8      	lsrs	r0, r1
 8001d10:	1e6a      	subs	r2, r5, #1
 8001d12:	4195      	sbcs	r5, r2
 8001d14:	4644      	mov	r4, r8
 8001d16:	4303      	orrs	r3, r0
 8001d18:	432b      	orrs	r3, r5
 8001d1a:	40cc      	lsrs	r4, r1
 8001d1c:	075a      	lsls	r2, r3, #29
 8001d1e:	d092      	beq.n	8001c46 <__aeabi_ddiv+0x45e>
 8001d20:	220f      	movs	r2, #15
 8001d22:	401a      	ands	r2, r3
 8001d24:	2a04      	cmp	r2, #4
 8001d26:	d188      	bne.n	8001c3a <__aeabi_ddiv+0x452>
 8001d28:	e78d      	b.n	8001c46 <__aeabi_ddiv+0x45e>
 8001d2a:	0035      	movs	r5, r6
 8001d2c:	4281      	cmp	r1, r0
 8001d2e:	d000      	beq.n	8001d32 <__aeabi_ddiv+0x54a>
 8001d30:	e74b      	b.n	8001bca <__aeabi_ddiv+0x3e2>
 8001d32:	9a00      	ldr	r2, [sp, #0]
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d000      	beq.n	8001d3a <__aeabi_ddiv+0x552>
 8001d38:	e747      	b.n	8001bca <__aeabi_ddiv+0x3e2>
 8001d3a:	e618      	b.n	800196e <__aeabi_ddiv+0x186>
 8001d3c:	42ae      	cmp	r6, r5
 8001d3e:	d99c      	bls.n	8001c7a <__aeabi_ddiv+0x492>
 8001d40:	2302      	movs	r3, #2
 8001d42:	425b      	negs	r3, r3
 8001d44:	469c      	mov	ip, r3
 8001d46:	9b00      	ldr	r3, [sp, #0]
 8001d48:	44e0      	add	r8, ip
 8001d4a:	469c      	mov	ip, r3
 8001d4c:	4465      	add	r5, ip
 8001d4e:	429d      	cmp	r5, r3
 8001d50:	419b      	sbcs	r3, r3
 8001d52:	425b      	negs	r3, r3
 8001d54:	191b      	adds	r3, r3, r4
 8001d56:	18c9      	adds	r1, r1, r3
 8001d58:	e6e4      	b.n	8001b24 <__aeabi_ddiv+0x33c>
 8001d5a:	4a15      	ldr	r2, [pc, #84]	; (8001db0 <__aeabi_ddiv+0x5c8>)
 8001d5c:	445a      	add	r2, fp
 8001d5e:	2a00      	cmp	r2, #0
 8001d60:	dc00      	bgt.n	8001d64 <__aeabi_ddiv+0x57c>
 8001d62:	e744      	b.n	8001bee <__aeabi_ddiv+0x406>
 8001d64:	2301      	movs	r3, #1
 8001d66:	2500      	movs	r5, #0
 8001d68:	4498      	add	r8, r3
 8001d6a:	e609      	b.n	8001980 <__aeabi_ddiv+0x198>
 8001d6c:	0765      	lsls	r5, r4, #29
 8001d6e:	0264      	lsls	r4, r4, #9
 8001d70:	0b24      	lsrs	r4, r4, #12
 8001d72:	08db      	lsrs	r3, r3, #3
 8001d74:	431d      	orrs	r5, r3
 8001d76:	2300      	movs	r3, #0
 8001d78:	e590      	b.n	800189c <__aeabi_ddiv+0xb4>
 8001d7a:	9e00      	ldr	r6, [sp, #0]
 8001d7c:	3d02      	subs	r5, #2
 8001d7e:	0072      	lsls	r2, r6, #1
 8001d80:	42b2      	cmp	r2, r6
 8001d82:	41bf      	sbcs	r7, r7
 8001d84:	427f      	negs	r7, r7
 8001d86:	193c      	adds	r4, r7, r4
 8001d88:	1909      	adds	r1, r1, r4
 8001d8a:	9200      	str	r2, [sp, #0]
 8001d8c:	e7ce      	b.n	8001d2c <__aeabi_ddiv+0x544>
 8001d8e:	2480      	movs	r4, #128	; 0x80
 8001d90:	4643      	mov	r3, r8
 8001d92:	0324      	lsls	r4, r4, #12
 8001d94:	431c      	orrs	r4, r3
 8001d96:	0324      	lsls	r4, r4, #12
 8001d98:	4b06      	ldr	r3, [pc, #24]	; (8001db4 <__aeabi_ddiv+0x5cc>)
 8001d9a:	0b24      	lsrs	r4, r4, #12
 8001d9c:	e57e      	b.n	800189c <__aeabi_ddiv+0xb4>
 8001d9e:	9a00      	ldr	r2, [sp, #0]
 8001da0:	429a      	cmp	r2, r3
 8001da2:	d3ea      	bcc.n	8001d7a <__aeabi_ddiv+0x592>
 8001da4:	0035      	movs	r5, r6
 8001da6:	e7c4      	b.n	8001d32 <__aeabi_ddiv+0x54a>
 8001da8:	0000043e 	.word	0x0000043e
 8001dac:	0000041e 	.word	0x0000041e
 8001db0:	000003ff 	.word	0x000003ff
 8001db4:	000007ff 	.word	0x000007ff

08001db8 <__eqdf2>:
 8001db8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001dba:	464f      	mov	r7, r9
 8001dbc:	4646      	mov	r6, r8
 8001dbe:	46d6      	mov	lr, sl
 8001dc0:	4694      	mov	ip, r2
 8001dc2:	4691      	mov	r9, r2
 8001dc4:	031a      	lsls	r2, r3, #12
 8001dc6:	0b12      	lsrs	r2, r2, #12
 8001dc8:	4d18      	ldr	r5, [pc, #96]	; (8001e2c <__eqdf2+0x74>)
 8001dca:	b5c0      	push	{r6, r7, lr}
 8001dcc:	004c      	lsls	r4, r1, #1
 8001dce:	030f      	lsls	r7, r1, #12
 8001dd0:	4692      	mov	sl, r2
 8001dd2:	005a      	lsls	r2, r3, #1
 8001dd4:	0006      	movs	r6, r0
 8001dd6:	4680      	mov	r8, r0
 8001dd8:	0b3f      	lsrs	r7, r7, #12
 8001dda:	2001      	movs	r0, #1
 8001ddc:	0d64      	lsrs	r4, r4, #21
 8001dde:	0fc9      	lsrs	r1, r1, #31
 8001de0:	0d52      	lsrs	r2, r2, #21
 8001de2:	0fdb      	lsrs	r3, r3, #31
 8001de4:	42ac      	cmp	r4, r5
 8001de6:	d00a      	beq.n	8001dfe <__eqdf2+0x46>
 8001de8:	42aa      	cmp	r2, r5
 8001dea:	d003      	beq.n	8001df4 <__eqdf2+0x3c>
 8001dec:	4294      	cmp	r4, r2
 8001dee:	d101      	bne.n	8001df4 <__eqdf2+0x3c>
 8001df0:	4557      	cmp	r7, sl
 8001df2:	d00d      	beq.n	8001e10 <__eqdf2+0x58>
 8001df4:	bce0      	pop	{r5, r6, r7}
 8001df6:	46ba      	mov	sl, r7
 8001df8:	46b1      	mov	r9, r6
 8001dfa:	46a8      	mov	r8, r5
 8001dfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001dfe:	003d      	movs	r5, r7
 8001e00:	4335      	orrs	r5, r6
 8001e02:	d1f7      	bne.n	8001df4 <__eqdf2+0x3c>
 8001e04:	42a2      	cmp	r2, r4
 8001e06:	d1f5      	bne.n	8001df4 <__eqdf2+0x3c>
 8001e08:	4652      	mov	r2, sl
 8001e0a:	4665      	mov	r5, ip
 8001e0c:	432a      	orrs	r2, r5
 8001e0e:	d1f1      	bne.n	8001df4 <__eqdf2+0x3c>
 8001e10:	2001      	movs	r0, #1
 8001e12:	45c8      	cmp	r8, r9
 8001e14:	d1ee      	bne.n	8001df4 <__eqdf2+0x3c>
 8001e16:	4299      	cmp	r1, r3
 8001e18:	d006      	beq.n	8001e28 <__eqdf2+0x70>
 8001e1a:	2c00      	cmp	r4, #0
 8001e1c:	d1ea      	bne.n	8001df4 <__eqdf2+0x3c>
 8001e1e:	433e      	orrs	r6, r7
 8001e20:	0030      	movs	r0, r6
 8001e22:	1e46      	subs	r6, r0, #1
 8001e24:	41b0      	sbcs	r0, r6
 8001e26:	e7e5      	b.n	8001df4 <__eqdf2+0x3c>
 8001e28:	2000      	movs	r0, #0
 8001e2a:	e7e3      	b.n	8001df4 <__eqdf2+0x3c>
 8001e2c:	000007ff 	.word	0x000007ff

08001e30 <__gedf2>:
 8001e30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e32:	464e      	mov	r6, r9
 8001e34:	4645      	mov	r5, r8
 8001e36:	4657      	mov	r7, sl
 8001e38:	46de      	mov	lr, fp
 8001e3a:	0004      	movs	r4, r0
 8001e3c:	0018      	movs	r0, r3
 8001e3e:	b5e0      	push	{r5, r6, r7, lr}
 8001e40:	0016      	movs	r6, r2
 8001e42:	031b      	lsls	r3, r3, #12
 8001e44:	0b1b      	lsrs	r3, r3, #12
 8001e46:	4d32      	ldr	r5, [pc, #200]	; (8001f10 <__gedf2+0xe0>)
 8001e48:	030f      	lsls	r7, r1, #12
 8001e4a:	004a      	lsls	r2, r1, #1
 8001e4c:	4699      	mov	r9, r3
 8001e4e:	0043      	lsls	r3, r0, #1
 8001e50:	46a4      	mov	ip, r4
 8001e52:	46b0      	mov	r8, r6
 8001e54:	0b3f      	lsrs	r7, r7, #12
 8001e56:	0d52      	lsrs	r2, r2, #21
 8001e58:	0fc9      	lsrs	r1, r1, #31
 8001e5a:	0d5b      	lsrs	r3, r3, #21
 8001e5c:	0fc0      	lsrs	r0, r0, #31
 8001e5e:	42aa      	cmp	r2, r5
 8001e60:	d029      	beq.n	8001eb6 <__gedf2+0x86>
 8001e62:	42ab      	cmp	r3, r5
 8001e64:	d018      	beq.n	8001e98 <__gedf2+0x68>
 8001e66:	2a00      	cmp	r2, #0
 8001e68:	d12a      	bne.n	8001ec0 <__gedf2+0x90>
 8001e6a:	433c      	orrs	r4, r7
 8001e6c:	46a3      	mov	fp, r4
 8001e6e:	4265      	negs	r5, r4
 8001e70:	4165      	adcs	r5, r4
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d102      	bne.n	8001e7c <__gedf2+0x4c>
 8001e76:	464c      	mov	r4, r9
 8001e78:	4326      	orrs	r6, r4
 8001e7a:	d027      	beq.n	8001ecc <__gedf2+0x9c>
 8001e7c:	2d00      	cmp	r5, #0
 8001e7e:	d115      	bne.n	8001eac <__gedf2+0x7c>
 8001e80:	4281      	cmp	r1, r0
 8001e82:	d028      	beq.n	8001ed6 <__gedf2+0xa6>
 8001e84:	2002      	movs	r0, #2
 8001e86:	3901      	subs	r1, #1
 8001e88:	4008      	ands	r0, r1
 8001e8a:	3801      	subs	r0, #1
 8001e8c:	bcf0      	pop	{r4, r5, r6, r7}
 8001e8e:	46bb      	mov	fp, r7
 8001e90:	46b2      	mov	sl, r6
 8001e92:	46a9      	mov	r9, r5
 8001e94:	46a0      	mov	r8, r4
 8001e96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e98:	464d      	mov	r5, r9
 8001e9a:	432e      	orrs	r6, r5
 8001e9c:	d12f      	bne.n	8001efe <__gedf2+0xce>
 8001e9e:	2a00      	cmp	r2, #0
 8001ea0:	d1ee      	bne.n	8001e80 <__gedf2+0x50>
 8001ea2:	433c      	orrs	r4, r7
 8001ea4:	4265      	negs	r5, r4
 8001ea6:	4165      	adcs	r5, r4
 8001ea8:	2d00      	cmp	r5, #0
 8001eaa:	d0e9      	beq.n	8001e80 <__gedf2+0x50>
 8001eac:	2800      	cmp	r0, #0
 8001eae:	d1ed      	bne.n	8001e8c <__gedf2+0x5c>
 8001eb0:	2001      	movs	r0, #1
 8001eb2:	4240      	negs	r0, r0
 8001eb4:	e7ea      	b.n	8001e8c <__gedf2+0x5c>
 8001eb6:	003d      	movs	r5, r7
 8001eb8:	4325      	orrs	r5, r4
 8001eba:	d120      	bne.n	8001efe <__gedf2+0xce>
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d0eb      	beq.n	8001e98 <__gedf2+0x68>
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d1dd      	bne.n	8001e80 <__gedf2+0x50>
 8001ec4:	464c      	mov	r4, r9
 8001ec6:	4326      	orrs	r6, r4
 8001ec8:	d1da      	bne.n	8001e80 <__gedf2+0x50>
 8001eca:	e7db      	b.n	8001e84 <__gedf2+0x54>
 8001ecc:	465b      	mov	r3, fp
 8001ece:	2000      	movs	r0, #0
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d0db      	beq.n	8001e8c <__gedf2+0x5c>
 8001ed4:	e7d6      	b.n	8001e84 <__gedf2+0x54>
 8001ed6:	429a      	cmp	r2, r3
 8001ed8:	dc0a      	bgt.n	8001ef0 <__gedf2+0xc0>
 8001eda:	dbe7      	blt.n	8001eac <__gedf2+0x7c>
 8001edc:	454f      	cmp	r7, r9
 8001ede:	d8d1      	bhi.n	8001e84 <__gedf2+0x54>
 8001ee0:	d010      	beq.n	8001f04 <__gedf2+0xd4>
 8001ee2:	2000      	movs	r0, #0
 8001ee4:	454f      	cmp	r7, r9
 8001ee6:	d2d1      	bcs.n	8001e8c <__gedf2+0x5c>
 8001ee8:	2900      	cmp	r1, #0
 8001eea:	d0e1      	beq.n	8001eb0 <__gedf2+0x80>
 8001eec:	0008      	movs	r0, r1
 8001eee:	e7cd      	b.n	8001e8c <__gedf2+0x5c>
 8001ef0:	4243      	negs	r3, r0
 8001ef2:	4158      	adcs	r0, r3
 8001ef4:	2302      	movs	r3, #2
 8001ef6:	4240      	negs	r0, r0
 8001ef8:	4018      	ands	r0, r3
 8001efa:	3801      	subs	r0, #1
 8001efc:	e7c6      	b.n	8001e8c <__gedf2+0x5c>
 8001efe:	2002      	movs	r0, #2
 8001f00:	4240      	negs	r0, r0
 8001f02:	e7c3      	b.n	8001e8c <__gedf2+0x5c>
 8001f04:	45c4      	cmp	ip, r8
 8001f06:	d8bd      	bhi.n	8001e84 <__gedf2+0x54>
 8001f08:	2000      	movs	r0, #0
 8001f0a:	45c4      	cmp	ip, r8
 8001f0c:	d2be      	bcs.n	8001e8c <__gedf2+0x5c>
 8001f0e:	e7eb      	b.n	8001ee8 <__gedf2+0xb8>
 8001f10:	000007ff 	.word	0x000007ff

08001f14 <__ledf2>:
 8001f14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f16:	464e      	mov	r6, r9
 8001f18:	4645      	mov	r5, r8
 8001f1a:	4657      	mov	r7, sl
 8001f1c:	46de      	mov	lr, fp
 8001f1e:	0004      	movs	r4, r0
 8001f20:	0018      	movs	r0, r3
 8001f22:	b5e0      	push	{r5, r6, r7, lr}
 8001f24:	0016      	movs	r6, r2
 8001f26:	031b      	lsls	r3, r3, #12
 8001f28:	0b1b      	lsrs	r3, r3, #12
 8001f2a:	4d31      	ldr	r5, [pc, #196]	; (8001ff0 <__ledf2+0xdc>)
 8001f2c:	030f      	lsls	r7, r1, #12
 8001f2e:	004a      	lsls	r2, r1, #1
 8001f30:	4699      	mov	r9, r3
 8001f32:	0043      	lsls	r3, r0, #1
 8001f34:	46a4      	mov	ip, r4
 8001f36:	46b0      	mov	r8, r6
 8001f38:	0b3f      	lsrs	r7, r7, #12
 8001f3a:	0d52      	lsrs	r2, r2, #21
 8001f3c:	0fc9      	lsrs	r1, r1, #31
 8001f3e:	0d5b      	lsrs	r3, r3, #21
 8001f40:	0fc0      	lsrs	r0, r0, #31
 8001f42:	42aa      	cmp	r2, r5
 8001f44:	d011      	beq.n	8001f6a <__ledf2+0x56>
 8001f46:	42ab      	cmp	r3, r5
 8001f48:	d014      	beq.n	8001f74 <__ledf2+0x60>
 8001f4a:	2a00      	cmp	r2, #0
 8001f4c:	d12f      	bne.n	8001fae <__ledf2+0x9a>
 8001f4e:	433c      	orrs	r4, r7
 8001f50:	46a3      	mov	fp, r4
 8001f52:	4265      	negs	r5, r4
 8001f54:	4165      	adcs	r5, r4
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d114      	bne.n	8001f84 <__ledf2+0x70>
 8001f5a:	464c      	mov	r4, r9
 8001f5c:	4326      	orrs	r6, r4
 8001f5e:	d111      	bne.n	8001f84 <__ledf2+0x70>
 8001f60:	465b      	mov	r3, fp
 8001f62:	2000      	movs	r0, #0
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d017      	beq.n	8001f98 <__ledf2+0x84>
 8001f68:	e010      	b.n	8001f8c <__ledf2+0x78>
 8001f6a:	003d      	movs	r5, r7
 8001f6c:	4325      	orrs	r5, r4
 8001f6e:	d112      	bne.n	8001f96 <__ledf2+0x82>
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d11c      	bne.n	8001fae <__ledf2+0x9a>
 8001f74:	464d      	mov	r5, r9
 8001f76:	432e      	orrs	r6, r5
 8001f78:	d10d      	bne.n	8001f96 <__ledf2+0x82>
 8001f7a:	2a00      	cmp	r2, #0
 8001f7c:	d104      	bne.n	8001f88 <__ledf2+0x74>
 8001f7e:	433c      	orrs	r4, r7
 8001f80:	4265      	negs	r5, r4
 8001f82:	4165      	adcs	r5, r4
 8001f84:	2d00      	cmp	r5, #0
 8001f86:	d10d      	bne.n	8001fa4 <__ledf2+0x90>
 8001f88:	4281      	cmp	r1, r0
 8001f8a:	d016      	beq.n	8001fba <__ledf2+0xa6>
 8001f8c:	2002      	movs	r0, #2
 8001f8e:	3901      	subs	r1, #1
 8001f90:	4008      	ands	r0, r1
 8001f92:	3801      	subs	r0, #1
 8001f94:	e000      	b.n	8001f98 <__ledf2+0x84>
 8001f96:	2002      	movs	r0, #2
 8001f98:	bcf0      	pop	{r4, r5, r6, r7}
 8001f9a:	46bb      	mov	fp, r7
 8001f9c:	46b2      	mov	sl, r6
 8001f9e:	46a9      	mov	r9, r5
 8001fa0:	46a0      	mov	r8, r4
 8001fa2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001fa4:	2800      	cmp	r0, #0
 8001fa6:	d1f7      	bne.n	8001f98 <__ledf2+0x84>
 8001fa8:	2001      	movs	r0, #1
 8001faa:	4240      	negs	r0, r0
 8001fac:	e7f4      	b.n	8001f98 <__ledf2+0x84>
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d1ea      	bne.n	8001f88 <__ledf2+0x74>
 8001fb2:	464c      	mov	r4, r9
 8001fb4:	4326      	orrs	r6, r4
 8001fb6:	d1e7      	bne.n	8001f88 <__ledf2+0x74>
 8001fb8:	e7e8      	b.n	8001f8c <__ledf2+0x78>
 8001fba:	429a      	cmp	r2, r3
 8001fbc:	dd06      	ble.n	8001fcc <__ledf2+0xb8>
 8001fbe:	4243      	negs	r3, r0
 8001fc0:	4158      	adcs	r0, r3
 8001fc2:	2302      	movs	r3, #2
 8001fc4:	4240      	negs	r0, r0
 8001fc6:	4018      	ands	r0, r3
 8001fc8:	3801      	subs	r0, #1
 8001fca:	e7e5      	b.n	8001f98 <__ledf2+0x84>
 8001fcc:	429a      	cmp	r2, r3
 8001fce:	dbe9      	blt.n	8001fa4 <__ledf2+0x90>
 8001fd0:	454f      	cmp	r7, r9
 8001fd2:	d8db      	bhi.n	8001f8c <__ledf2+0x78>
 8001fd4:	d006      	beq.n	8001fe4 <__ledf2+0xd0>
 8001fd6:	2000      	movs	r0, #0
 8001fd8:	454f      	cmp	r7, r9
 8001fda:	d2dd      	bcs.n	8001f98 <__ledf2+0x84>
 8001fdc:	2900      	cmp	r1, #0
 8001fde:	d0e3      	beq.n	8001fa8 <__ledf2+0x94>
 8001fe0:	0008      	movs	r0, r1
 8001fe2:	e7d9      	b.n	8001f98 <__ledf2+0x84>
 8001fe4:	45c4      	cmp	ip, r8
 8001fe6:	d8d1      	bhi.n	8001f8c <__ledf2+0x78>
 8001fe8:	2000      	movs	r0, #0
 8001fea:	45c4      	cmp	ip, r8
 8001fec:	d2d4      	bcs.n	8001f98 <__ledf2+0x84>
 8001fee:	e7f5      	b.n	8001fdc <__ledf2+0xc8>
 8001ff0:	000007ff 	.word	0x000007ff

08001ff4 <__aeabi_dmul>:
 8001ff4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ff6:	4657      	mov	r7, sl
 8001ff8:	464e      	mov	r6, r9
 8001ffa:	4645      	mov	r5, r8
 8001ffc:	46de      	mov	lr, fp
 8001ffe:	b5e0      	push	{r5, r6, r7, lr}
 8002000:	4698      	mov	r8, r3
 8002002:	030c      	lsls	r4, r1, #12
 8002004:	004b      	lsls	r3, r1, #1
 8002006:	0006      	movs	r6, r0
 8002008:	4692      	mov	sl, r2
 800200a:	b087      	sub	sp, #28
 800200c:	0b24      	lsrs	r4, r4, #12
 800200e:	0d5b      	lsrs	r3, r3, #21
 8002010:	0fcf      	lsrs	r7, r1, #31
 8002012:	2b00      	cmp	r3, #0
 8002014:	d06c      	beq.n	80020f0 <__aeabi_dmul+0xfc>
 8002016:	4add      	ldr	r2, [pc, #884]	; (800238c <__aeabi_dmul+0x398>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d100      	bne.n	800201e <__aeabi_dmul+0x2a>
 800201c:	e086      	b.n	800212c <__aeabi_dmul+0x138>
 800201e:	0f42      	lsrs	r2, r0, #29
 8002020:	00e4      	lsls	r4, r4, #3
 8002022:	4314      	orrs	r4, r2
 8002024:	2280      	movs	r2, #128	; 0x80
 8002026:	0412      	lsls	r2, r2, #16
 8002028:	4314      	orrs	r4, r2
 800202a:	4ad9      	ldr	r2, [pc, #868]	; (8002390 <__aeabi_dmul+0x39c>)
 800202c:	00c5      	lsls	r5, r0, #3
 800202e:	4694      	mov	ip, r2
 8002030:	4463      	add	r3, ip
 8002032:	9300      	str	r3, [sp, #0]
 8002034:	2300      	movs	r3, #0
 8002036:	4699      	mov	r9, r3
 8002038:	469b      	mov	fp, r3
 800203a:	4643      	mov	r3, r8
 800203c:	4642      	mov	r2, r8
 800203e:	031e      	lsls	r6, r3, #12
 8002040:	0fd2      	lsrs	r2, r2, #31
 8002042:	005b      	lsls	r3, r3, #1
 8002044:	4650      	mov	r0, sl
 8002046:	4690      	mov	r8, r2
 8002048:	0b36      	lsrs	r6, r6, #12
 800204a:	0d5b      	lsrs	r3, r3, #21
 800204c:	d100      	bne.n	8002050 <__aeabi_dmul+0x5c>
 800204e:	e078      	b.n	8002142 <__aeabi_dmul+0x14e>
 8002050:	4ace      	ldr	r2, [pc, #824]	; (800238c <__aeabi_dmul+0x398>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d01d      	beq.n	8002092 <__aeabi_dmul+0x9e>
 8002056:	49ce      	ldr	r1, [pc, #824]	; (8002390 <__aeabi_dmul+0x39c>)
 8002058:	0f42      	lsrs	r2, r0, #29
 800205a:	468c      	mov	ip, r1
 800205c:	9900      	ldr	r1, [sp, #0]
 800205e:	4463      	add	r3, ip
 8002060:	00f6      	lsls	r6, r6, #3
 8002062:	468c      	mov	ip, r1
 8002064:	4316      	orrs	r6, r2
 8002066:	2280      	movs	r2, #128	; 0x80
 8002068:	449c      	add	ip, r3
 800206a:	0412      	lsls	r2, r2, #16
 800206c:	4663      	mov	r3, ip
 800206e:	4316      	orrs	r6, r2
 8002070:	00c2      	lsls	r2, r0, #3
 8002072:	2000      	movs	r0, #0
 8002074:	9300      	str	r3, [sp, #0]
 8002076:	9900      	ldr	r1, [sp, #0]
 8002078:	4643      	mov	r3, r8
 800207a:	3101      	adds	r1, #1
 800207c:	468c      	mov	ip, r1
 800207e:	4649      	mov	r1, r9
 8002080:	407b      	eors	r3, r7
 8002082:	9301      	str	r3, [sp, #4]
 8002084:	290f      	cmp	r1, #15
 8002086:	d900      	bls.n	800208a <__aeabi_dmul+0x96>
 8002088:	e07e      	b.n	8002188 <__aeabi_dmul+0x194>
 800208a:	4bc2      	ldr	r3, [pc, #776]	; (8002394 <__aeabi_dmul+0x3a0>)
 800208c:	0089      	lsls	r1, r1, #2
 800208e:	5859      	ldr	r1, [r3, r1]
 8002090:	468f      	mov	pc, r1
 8002092:	4652      	mov	r2, sl
 8002094:	9b00      	ldr	r3, [sp, #0]
 8002096:	4332      	orrs	r2, r6
 8002098:	d000      	beq.n	800209c <__aeabi_dmul+0xa8>
 800209a:	e156      	b.n	800234a <__aeabi_dmul+0x356>
 800209c:	49bb      	ldr	r1, [pc, #748]	; (800238c <__aeabi_dmul+0x398>)
 800209e:	2600      	movs	r6, #0
 80020a0:	468c      	mov	ip, r1
 80020a2:	4463      	add	r3, ip
 80020a4:	4649      	mov	r1, r9
 80020a6:	9300      	str	r3, [sp, #0]
 80020a8:	2302      	movs	r3, #2
 80020aa:	4319      	orrs	r1, r3
 80020ac:	4689      	mov	r9, r1
 80020ae:	2002      	movs	r0, #2
 80020b0:	e7e1      	b.n	8002076 <__aeabi_dmul+0x82>
 80020b2:	4643      	mov	r3, r8
 80020b4:	9301      	str	r3, [sp, #4]
 80020b6:	0034      	movs	r4, r6
 80020b8:	0015      	movs	r5, r2
 80020ba:	4683      	mov	fp, r0
 80020bc:	465b      	mov	r3, fp
 80020be:	2b02      	cmp	r3, #2
 80020c0:	d05e      	beq.n	8002180 <__aeabi_dmul+0x18c>
 80020c2:	2b03      	cmp	r3, #3
 80020c4:	d100      	bne.n	80020c8 <__aeabi_dmul+0xd4>
 80020c6:	e1f3      	b.n	80024b0 <__aeabi_dmul+0x4bc>
 80020c8:	2b01      	cmp	r3, #1
 80020ca:	d000      	beq.n	80020ce <__aeabi_dmul+0xda>
 80020cc:	e118      	b.n	8002300 <__aeabi_dmul+0x30c>
 80020ce:	2200      	movs	r2, #0
 80020d0:	2400      	movs	r4, #0
 80020d2:	2500      	movs	r5, #0
 80020d4:	9b01      	ldr	r3, [sp, #4]
 80020d6:	0512      	lsls	r2, r2, #20
 80020d8:	4322      	orrs	r2, r4
 80020da:	07db      	lsls	r3, r3, #31
 80020dc:	431a      	orrs	r2, r3
 80020de:	0028      	movs	r0, r5
 80020e0:	0011      	movs	r1, r2
 80020e2:	b007      	add	sp, #28
 80020e4:	bcf0      	pop	{r4, r5, r6, r7}
 80020e6:	46bb      	mov	fp, r7
 80020e8:	46b2      	mov	sl, r6
 80020ea:	46a9      	mov	r9, r5
 80020ec:	46a0      	mov	r8, r4
 80020ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020f0:	0025      	movs	r5, r4
 80020f2:	4305      	orrs	r5, r0
 80020f4:	d100      	bne.n	80020f8 <__aeabi_dmul+0x104>
 80020f6:	e141      	b.n	800237c <__aeabi_dmul+0x388>
 80020f8:	2c00      	cmp	r4, #0
 80020fa:	d100      	bne.n	80020fe <__aeabi_dmul+0x10a>
 80020fc:	e1ad      	b.n	800245a <__aeabi_dmul+0x466>
 80020fe:	0020      	movs	r0, r4
 8002100:	f000 fe46 	bl	8002d90 <__clzsi2>
 8002104:	0001      	movs	r1, r0
 8002106:	0002      	movs	r2, r0
 8002108:	390b      	subs	r1, #11
 800210a:	231d      	movs	r3, #29
 800210c:	0010      	movs	r0, r2
 800210e:	1a5b      	subs	r3, r3, r1
 8002110:	0031      	movs	r1, r6
 8002112:	0035      	movs	r5, r6
 8002114:	3808      	subs	r0, #8
 8002116:	4084      	lsls	r4, r0
 8002118:	40d9      	lsrs	r1, r3
 800211a:	4085      	lsls	r5, r0
 800211c:	430c      	orrs	r4, r1
 800211e:	489e      	ldr	r0, [pc, #632]	; (8002398 <__aeabi_dmul+0x3a4>)
 8002120:	1a83      	subs	r3, r0, r2
 8002122:	9300      	str	r3, [sp, #0]
 8002124:	2300      	movs	r3, #0
 8002126:	4699      	mov	r9, r3
 8002128:	469b      	mov	fp, r3
 800212a:	e786      	b.n	800203a <__aeabi_dmul+0x46>
 800212c:	0005      	movs	r5, r0
 800212e:	4325      	orrs	r5, r4
 8002130:	d000      	beq.n	8002134 <__aeabi_dmul+0x140>
 8002132:	e11c      	b.n	800236e <__aeabi_dmul+0x37a>
 8002134:	2208      	movs	r2, #8
 8002136:	9300      	str	r3, [sp, #0]
 8002138:	2302      	movs	r3, #2
 800213a:	2400      	movs	r4, #0
 800213c:	4691      	mov	r9, r2
 800213e:	469b      	mov	fp, r3
 8002140:	e77b      	b.n	800203a <__aeabi_dmul+0x46>
 8002142:	4652      	mov	r2, sl
 8002144:	4332      	orrs	r2, r6
 8002146:	d100      	bne.n	800214a <__aeabi_dmul+0x156>
 8002148:	e10a      	b.n	8002360 <__aeabi_dmul+0x36c>
 800214a:	2e00      	cmp	r6, #0
 800214c:	d100      	bne.n	8002150 <__aeabi_dmul+0x15c>
 800214e:	e176      	b.n	800243e <__aeabi_dmul+0x44a>
 8002150:	0030      	movs	r0, r6
 8002152:	f000 fe1d 	bl	8002d90 <__clzsi2>
 8002156:	0002      	movs	r2, r0
 8002158:	3a0b      	subs	r2, #11
 800215a:	231d      	movs	r3, #29
 800215c:	0001      	movs	r1, r0
 800215e:	1a9b      	subs	r3, r3, r2
 8002160:	4652      	mov	r2, sl
 8002162:	3908      	subs	r1, #8
 8002164:	40da      	lsrs	r2, r3
 8002166:	408e      	lsls	r6, r1
 8002168:	4316      	orrs	r6, r2
 800216a:	4652      	mov	r2, sl
 800216c:	408a      	lsls	r2, r1
 800216e:	9b00      	ldr	r3, [sp, #0]
 8002170:	4989      	ldr	r1, [pc, #548]	; (8002398 <__aeabi_dmul+0x3a4>)
 8002172:	1a18      	subs	r0, r3, r0
 8002174:	0003      	movs	r3, r0
 8002176:	468c      	mov	ip, r1
 8002178:	4463      	add	r3, ip
 800217a:	2000      	movs	r0, #0
 800217c:	9300      	str	r3, [sp, #0]
 800217e:	e77a      	b.n	8002076 <__aeabi_dmul+0x82>
 8002180:	2400      	movs	r4, #0
 8002182:	2500      	movs	r5, #0
 8002184:	4a81      	ldr	r2, [pc, #516]	; (800238c <__aeabi_dmul+0x398>)
 8002186:	e7a5      	b.n	80020d4 <__aeabi_dmul+0xe0>
 8002188:	0c2f      	lsrs	r7, r5, #16
 800218a:	042d      	lsls	r5, r5, #16
 800218c:	0c2d      	lsrs	r5, r5, #16
 800218e:	002b      	movs	r3, r5
 8002190:	0c11      	lsrs	r1, r2, #16
 8002192:	0412      	lsls	r2, r2, #16
 8002194:	0c12      	lsrs	r2, r2, #16
 8002196:	4353      	muls	r3, r2
 8002198:	4698      	mov	r8, r3
 800219a:	0013      	movs	r3, r2
 800219c:	0028      	movs	r0, r5
 800219e:	437b      	muls	r3, r7
 80021a0:	4699      	mov	r9, r3
 80021a2:	4348      	muls	r0, r1
 80021a4:	4448      	add	r0, r9
 80021a6:	4683      	mov	fp, r0
 80021a8:	4640      	mov	r0, r8
 80021aa:	000b      	movs	r3, r1
 80021ac:	0c00      	lsrs	r0, r0, #16
 80021ae:	4682      	mov	sl, r0
 80021b0:	4658      	mov	r0, fp
 80021b2:	437b      	muls	r3, r7
 80021b4:	4450      	add	r0, sl
 80021b6:	9302      	str	r3, [sp, #8]
 80021b8:	4581      	cmp	r9, r0
 80021ba:	d906      	bls.n	80021ca <__aeabi_dmul+0x1d6>
 80021bc:	469a      	mov	sl, r3
 80021be:	2380      	movs	r3, #128	; 0x80
 80021c0:	025b      	lsls	r3, r3, #9
 80021c2:	4699      	mov	r9, r3
 80021c4:	44ca      	add	sl, r9
 80021c6:	4653      	mov	r3, sl
 80021c8:	9302      	str	r3, [sp, #8]
 80021ca:	0c03      	lsrs	r3, r0, #16
 80021cc:	469b      	mov	fp, r3
 80021ce:	4643      	mov	r3, r8
 80021d0:	041b      	lsls	r3, r3, #16
 80021d2:	0400      	lsls	r0, r0, #16
 80021d4:	0c1b      	lsrs	r3, r3, #16
 80021d6:	4698      	mov	r8, r3
 80021d8:	0003      	movs	r3, r0
 80021da:	4443      	add	r3, r8
 80021dc:	9304      	str	r3, [sp, #16]
 80021de:	0c33      	lsrs	r3, r6, #16
 80021e0:	4699      	mov	r9, r3
 80021e2:	002b      	movs	r3, r5
 80021e4:	0436      	lsls	r6, r6, #16
 80021e6:	0c36      	lsrs	r6, r6, #16
 80021e8:	4373      	muls	r3, r6
 80021ea:	4698      	mov	r8, r3
 80021ec:	0033      	movs	r3, r6
 80021ee:	437b      	muls	r3, r7
 80021f0:	469a      	mov	sl, r3
 80021f2:	464b      	mov	r3, r9
 80021f4:	435d      	muls	r5, r3
 80021f6:	435f      	muls	r7, r3
 80021f8:	4643      	mov	r3, r8
 80021fa:	4455      	add	r5, sl
 80021fc:	0c18      	lsrs	r0, r3, #16
 80021fe:	1940      	adds	r0, r0, r5
 8002200:	4582      	cmp	sl, r0
 8002202:	d903      	bls.n	800220c <__aeabi_dmul+0x218>
 8002204:	2380      	movs	r3, #128	; 0x80
 8002206:	025b      	lsls	r3, r3, #9
 8002208:	469a      	mov	sl, r3
 800220a:	4457      	add	r7, sl
 800220c:	0c05      	lsrs	r5, r0, #16
 800220e:	19eb      	adds	r3, r5, r7
 8002210:	9305      	str	r3, [sp, #20]
 8002212:	4643      	mov	r3, r8
 8002214:	041d      	lsls	r5, r3, #16
 8002216:	0c2d      	lsrs	r5, r5, #16
 8002218:	0400      	lsls	r0, r0, #16
 800221a:	1940      	adds	r0, r0, r5
 800221c:	0c25      	lsrs	r5, r4, #16
 800221e:	0424      	lsls	r4, r4, #16
 8002220:	0c24      	lsrs	r4, r4, #16
 8002222:	0027      	movs	r7, r4
 8002224:	4357      	muls	r7, r2
 8002226:	436a      	muls	r2, r5
 8002228:	4690      	mov	r8, r2
 800222a:	002a      	movs	r2, r5
 800222c:	0c3b      	lsrs	r3, r7, #16
 800222e:	469a      	mov	sl, r3
 8002230:	434a      	muls	r2, r1
 8002232:	4361      	muls	r1, r4
 8002234:	4441      	add	r1, r8
 8002236:	4451      	add	r1, sl
 8002238:	4483      	add	fp, r0
 800223a:	4588      	cmp	r8, r1
 800223c:	d903      	bls.n	8002246 <__aeabi_dmul+0x252>
 800223e:	2380      	movs	r3, #128	; 0x80
 8002240:	025b      	lsls	r3, r3, #9
 8002242:	4698      	mov	r8, r3
 8002244:	4442      	add	r2, r8
 8002246:	043f      	lsls	r7, r7, #16
 8002248:	0c0b      	lsrs	r3, r1, #16
 800224a:	0c3f      	lsrs	r7, r7, #16
 800224c:	0409      	lsls	r1, r1, #16
 800224e:	19c9      	adds	r1, r1, r7
 8002250:	0027      	movs	r7, r4
 8002252:	4698      	mov	r8, r3
 8002254:	464b      	mov	r3, r9
 8002256:	4377      	muls	r7, r6
 8002258:	435c      	muls	r4, r3
 800225a:	436e      	muls	r6, r5
 800225c:	435d      	muls	r5, r3
 800225e:	0c3b      	lsrs	r3, r7, #16
 8002260:	4699      	mov	r9, r3
 8002262:	19a4      	adds	r4, r4, r6
 8002264:	444c      	add	r4, r9
 8002266:	4442      	add	r2, r8
 8002268:	9503      	str	r5, [sp, #12]
 800226a:	42a6      	cmp	r6, r4
 800226c:	d904      	bls.n	8002278 <__aeabi_dmul+0x284>
 800226e:	2380      	movs	r3, #128	; 0x80
 8002270:	025b      	lsls	r3, r3, #9
 8002272:	4698      	mov	r8, r3
 8002274:	4445      	add	r5, r8
 8002276:	9503      	str	r5, [sp, #12]
 8002278:	9b02      	ldr	r3, [sp, #8]
 800227a:	043f      	lsls	r7, r7, #16
 800227c:	445b      	add	r3, fp
 800227e:	001e      	movs	r6, r3
 8002280:	4283      	cmp	r3, r0
 8002282:	4180      	sbcs	r0, r0
 8002284:	0423      	lsls	r3, r4, #16
 8002286:	4698      	mov	r8, r3
 8002288:	9b05      	ldr	r3, [sp, #20]
 800228a:	0c3f      	lsrs	r7, r7, #16
 800228c:	4447      	add	r7, r8
 800228e:	4698      	mov	r8, r3
 8002290:	1876      	adds	r6, r6, r1
 8002292:	428e      	cmp	r6, r1
 8002294:	4189      	sbcs	r1, r1
 8002296:	4447      	add	r7, r8
 8002298:	4240      	negs	r0, r0
 800229a:	183d      	adds	r5, r7, r0
 800229c:	46a8      	mov	r8, r5
 800229e:	4693      	mov	fp, r2
 80022a0:	4249      	negs	r1, r1
 80022a2:	468a      	mov	sl, r1
 80022a4:	44c3      	add	fp, r8
 80022a6:	429f      	cmp	r7, r3
 80022a8:	41bf      	sbcs	r7, r7
 80022aa:	4580      	cmp	r8, r0
 80022ac:	4180      	sbcs	r0, r0
 80022ae:	9b03      	ldr	r3, [sp, #12]
 80022b0:	44da      	add	sl, fp
 80022b2:	4698      	mov	r8, r3
 80022b4:	4653      	mov	r3, sl
 80022b6:	4240      	negs	r0, r0
 80022b8:	427f      	negs	r7, r7
 80022ba:	4307      	orrs	r7, r0
 80022bc:	0c24      	lsrs	r4, r4, #16
 80022be:	4593      	cmp	fp, r2
 80022c0:	4192      	sbcs	r2, r2
 80022c2:	458a      	cmp	sl, r1
 80022c4:	4189      	sbcs	r1, r1
 80022c6:	193f      	adds	r7, r7, r4
 80022c8:	0ddc      	lsrs	r4, r3, #23
 80022ca:	9b04      	ldr	r3, [sp, #16]
 80022cc:	0275      	lsls	r5, r6, #9
 80022ce:	431d      	orrs	r5, r3
 80022d0:	1e68      	subs	r0, r5, #1
 80022d2:	4185      	sbcs	r5, r0
 80022d4:	4653      	mov	r3, sl
 80022d6:	4252      	negs	r2, r2
 80022d8:	4249      	negs	r1, r1
 80022da:	430a      	orrs	r2, r1
 80022dc:	18bf      	adds	r7, r7, r2
 80022de:	4447      	add	r7, r8
 80022e0:	0df6      	lsrs	r6, r6, #23
 80022e2:	027f      	lsls	r7, r7, #9
 80022e4:	4335      	orrs	r5, r6
 80022e6:	025a      	lsls	r2, r3, #9
 80022e8:	433c      	orrs	r4, r7
 80022ea:	4315      	orrs	r5, r2
 80022ec:	01fb      	lsls	r3, r7, #7
 80022ee:	d400      	bmi.n	80022f2 <__aeabi_dmul+0x2fe>
 80022f0:	e0c1      	b.n	8002476 <__aeabi_dmul+0x482>
 80022f2:	2101      	movs	r1, #1
 80022f4:	086a      	lsrs	r2, r5, #1
 80022f6:	400d      	ands	r5, r1
 80022f8:	4315      	orrs	r5, r2
 80022fa:	07e2      	lsls	r2, r4, #31
 80022fc:	4315      	orrs	r5, r2
 80022fe:	0864      	lsrs	r4, r4, #1
 8002300:	4926      	ldr	r1, [pc, #152]	; (800239c <__aeabi_dmul+0x3a8>)
 8002302:	4461      	add	r1, ip
 8002304:	2900      	cmp	r1, #0
 8002306:	dd56      	ble.n	80023b6 <__aeabi_dmul+0x3c2>
 8002308:	076b      	lsls	r3, r5, #29
 800230a:	d009      	beq.n	8002320 <__aeabi_dmul+0x32c>
 800230c:	220f      	movs	r2, #15
 800230e:	402a      	ands	r2, r5
 8002310:	2a04      	cmp	r2, #4
 8002312:	d005      	beq.n	8002320 <__aeabi_dmul+0x32c>
 8002314:	1d2a      	adds	r2, r5, #4
 8002316:	42aa      	cmp	r2, r5
 8002318:	41ad      	sbcs	r5, r5
 800231a:	426d      	negs	r5, r5
 800231c:	1964      	adds	r4, r4, r5
 800231e:	0015      	movs	r5, r2
 8002320:	01e3      	lsls	r3, r4, #7
 8002322:	d504      	bpl.n	800232e <__aeabi_dmul+0x33a>
 8002324:	2180      	movs	r1, #128	; 0x80
 8002326:	4a1e      	ldr	r2, [pc, #120]	; (80023a0 <__aeabi_dmul+0x3ac>)
 8002328:	00c9      	lsls	r1, r1, #3
 800232a:	4014      	ands	r4, r2
 800232c:	4461      	add	r1, ip
 800232e:	4a1d      	ldr	r2, [pc, #116]	; (80023a4 <__aeabi_dmul+0x3b0>)
 8002330:	4291      	cmp	r1, r2
 8002332:	dd00      	ble.n	8002336 <__aeabi_dmul+0x342>
 8002334:	e724      	b.n	8002180 <__aeabi_dmul+0x18c>
 8002336:	0762      	lsls	r2, r4, #29
 8002338:	08ed      	lsrs	r5, r5, #3
 800233a:	0264      	lsls	r4, r4, #9
 800233c:	0549      	lsls	r1, r1, #21
 800233e:	4315      	orrs	r5, r2
 8002340:	0b24      	lsrs	r4, r4, #12
 8002342:	0d4a      	lsrs	r2, r1, #21
 8002344:	e6c6      	b.n	80020d4 <__aeabi_dmul+0xe0>
 8002346:	9701      	str	r7, [sp, #4]
 8002348:	e6b8      	b.n	80020bc <__aeabi_dmul+0xc8>
 800234a:	4a10      	ldr	r2, [pc, #64]	; (800238c <__aeabi_dmul+0x398>)
 800234c:	2003      	movs	r0, #3
 800234e:	4694      	mov	ip, r2
 8002350:	4463      	add	r3, ip
 8002352:	464a      	mov	r2, r9
 8002354:	9300      	str	r3, [sp, #0]
 8002356:	2303      	movs	r3, #3
 8002358:	431a      	orrs	r2, r3
 800235a:	4691      	mov	r9, r2
 800235c:	4652      	mov	r2, sl
 800235e:	e68a      	b.n	8002076 <__aeabi_dmul+0x82>
 8002360:	4649      	mov	r1, r9
 8002362:	2301      	movs	r3, #1
 8002364:	4319      	orrs	r1, r3
 8002366:	4689      	mov	r9, r1
 8002368:	2600      	movs	r6, #0
 800236a:	2001      	movs	r0, #1
 800236c:	e683      	b.n	8002076 <__aeabi_dmul+0x82>
 800236e:	220c      	movs	r2, #12
 8002370:	9300      	str	r3, [sp, #0]
 8002372:	2303      	movs	r3, #3
 8002374:	0005      	movs	r5, r0
 8002376:	4691      	mov	r9, r2
 8002378:	469b      	mov	fp, r3
 800237a:	e65e      	b.n	800203a <__aeabi_dmul+0x46>
 800237c:	2304      	movs	r3, #4
 800237e:	4699      	mov	r9, r3
 8002380:	2300      	movs	r3, #0
 8002382:	9300      	str	r3, [sp, #0]
 8002384:	3301      	adds	r3, #1
 8002386:	2400      	movs	r4, #0
 8002388:	469b      	mov	fp, r3
 800238a:	e656      	b.n	800203a <__aeabi_dmul+0x46>
 800238c:	000007ff 	.word	0x000007ff
 8002390:	fffffc01 	.word	0xfffffc01
 8002394:	08006e38 	.word	0x08006e38
 8002398:	fffffc0d 	.word	0xfffffc0d
 800239c:	000003ff 	.word	0x000003ff
 80023a0:	feffffff 	.word	0xfeffffff
 80023a4:	000007fe 	.word	0x000007fe
 80023a8:	2300      	movs	r3, #0
 80023aa:	2480      	movs	r4, #128	; 0x80
 80023ac:	2500      	movs	r5, #0
 80023ae:	4a44      	ldr	r2, [pc, #272]	; (80024c0 <__aeabi_dmul+0x4cc>)
 80023b0:	9301      	str	r3, [sp, #4]
 80023b2:	0324      	lsls	r4, r4, #12
 80023b4:	e68e      	b.n	80020d4 <__aeabi_dmul+0xe0>
 80023b6:	2001      	movs	r0, #1
 80023b8:	1a40      	subs	r0, r0, r1
 80023ba:	2838      	cmp	r0, #56	; 0x38
 80023bc:	dd00      	ble.n	80023c0 <__aeabi_dmul+0x3cc>
 80023be:	e686      	b.n	80020ce <__aeabi_dmul+0xda>
 80023c0:	281f      	cmp	r0, #31
 80023c2:	dd5b      	ble.n	800247c <__aeabi_dmul+0x488>
 80023c4:	221f      	movs	r2, #31
 80023c6:	0023      	movs	r3, r4
 80023c8:	4252      	negs	r2, r2
 80023ca:	1a51      	subs	r1, r2, r1
 80023cc:	40cb      	lsrs	r3, r1
 80023ce:	0019      	movs	r1, r3
 80023d0:	2820      	cmp	r0, #32
 80023d2:	d003      	beq.n	80023dc <__aeabi_dmul+0x3e8>
 80023d4:	4a3b      	ldr	r2, [pc, #236]	; (80024c4 <__aeabi_dmul+0x4d0>)
 80023d6:	4462      	add	r2, ip
 80023d8:	4094      	lsls	r4, r2
 80023da:	4325      	orrs	r5, r4
 80023dc:	1e6a      	subs	r2, r5, #1
 80023de:	4195      	sbcs	r5, r2
 80023e0:	002a      	movs	r2, r5
 80023e2:	430a      	orrs	r2, r1
 80023e4:	2107      	movs	r1, #7
 80023e6:	000d      	movs	r5, r1
 80023e8:	2400      	movs	r4, #0
 80023ea:	4015      	ands	r5, r2
 80023ec:	4211      	tst	r1, r2
 80023ee:	d05b      	beq.n	80024a8 <__aeabi_dmul+0x4b4>
 80023f0:	210f      	movs	r1, #15
 80023f2:	2400      	movs	r4, #0
 80023f4:	4011      	ands	r1, r2
 80023f6:	2904      	cmp	r1, #4
 80023f8:	d053      	beq.n	80024a2 <__aeabi_dmul+0x4ae>
 80023fa:	1d11      	adds	r1, r2, #4
 80023fc:	4291      	cmp	r1, r2
 80023fe:	4192      	sbcs	r2, r2
 8002400:	4252      	negs	r2, r2
 8002402:	18a4      	adds	r4, r4, r2
 8002404:	000a      	movs	r2, r1
 8002406:	0223      	lsls	r3, r4, #8
 8002408:	d54b      	bpl.n	80024a2 <__aeabi_dmul+0x4ae>
 800240a:	2201      	movs	r2, #1
 800240c:	2400      	movs	r4, #0
 800240e:	2500      	movs	r5, #0
 8002410:	e660      	b.n	80020d4 <__aeabi_dmul+0xe0>
 8002412:	2380      	movs	r3, #128	; 0x80
 8002414:	031b      	lsls	r3, r3, #12
 8002416:	421c      	tst	r4, r3
 8002418:	d009      	beq.n	800242e <__aeabi_dmul+0x43a>
 800241a:	421e      	tst	r6, r3
 800241c:	d107      	bne.n	800242e <__aeabi_dmul+0x43a>
 800241e:	4333      	orrs	r3, r6
 8002420:	031c      	lsls	r4, r3, #12
 8002422:	4643      	mov	r3, r8
 8002424:	0015      	movs	r5, r2
 8002426:	0b24      	lsrs	r4, r4, #12
 8002428:	4a25      	ldr	r2, [pc, #148]	; (80024c0 <__aeabi_dmul+0x4cc>)
 800242a:	9301      	str	r3, [sp, #4]
 800242c:	e652      	b.n	80020d4 <__aeabi_dmul+0xe0>
 800242e:	2280      	movs	r2, #128	; 0x80
 8002430:	0312      	lsls	r2, r2, #12
 8002432:	4314      	orrs	r4, r2
 8002434:	0324      	lsls	r4, r4, #12
 8002436:	4a22      	ldr	r2, [pc, #136]	; (80024c0 <__aeabi_dmul+0x4cc>)
 8002438:	0b24      	lsrs	r4, r4, #12
 800243a:	9701      	str	r7, [sp, #4]
 800243c:	e64a      	b.n	80020d4 <__aeabi_dmul+0xe0>
 800243e:	f000 fca7 	bl	8002d90 <__clzsi2>
 8002442:	0003      	movs	r3, r0
 8002444:	001a      	movs	r2, r3
 8002446:	3215      	adds	r2, #21
 8002448:	3020      	adds	r0, #32
 800244a:	2a1c      	cmp	r2, #28
 800244c:	dc00      	bgt.n	8002450 <__aeabi_dmul+0x45c>
 800244e:	e684      	b.n	800215a <__aeabi_dmul+0x166>
 8002450:	4656      	mov	r6, sl
 8002452:	3b08      	subs	r3, #8
 8002454:	2200      	movs	r2, #0
 8002456:	409e      	lsls	r6, r3
 8002458:	e689      	b.n	800216e <__aeabi_dmul+0x17a>
 800245a:	f000 fc99 	bl	8002d90 <__clzsi2>
 800245e:	0001      	movs	r1, r0
 8002460:	0002      	movs	r2, r0
 8002462:	3115      	adds	r1, #21
 8002464:	3220      	adds	r2, #32
 8002466:	291c      	cmp	r1, #28
 8002468:	dc00      	bgt.n	800246c <__aeabi_dmul+0x478>
 800246a:	e64e      	b.n	800210a <__aeabi_dmul+0x116>
 800246c:	0034      	movs	r4, r6
 800246e:	3808      	subs	r0, #8
 8002470:	2500      	movs	r5, #0
 8002472:	4084      	lsls	r4, r0
 8002474:	e653      	b.n	800211e <__aeabi_dmul+0x12a>
 8002476:	9b00      	ldr	r3, [sp, #0]
 8002478:	469c      	mov	ip, r3
 800247a:	e741      	b.n	8002300 <__aeabi_dmul+0x30c>
 800247c:	4912      	ldr	r1, [pc, #72]	; (80024c8 <__aeabi_dmul+0x4d4>)
 800247e:	0022      	movs	r2, r4
 8002480:	4461      	add	r1, ip
 8002482:	002e      	movs	r6, r5
 8002484:	408d      	lsls	r5, r1
 8002486:	408a      	lsls	r2, r1
 8002488:	40c6      	lsrs	r6, r0
 800248a:	1e69      	subs	r1, r5, #1
 800248c:	418d      	sbcs	r5, r1
 800248e:	4332      	orrs	r2, r6
 8002490:	432a      	orrs	r2, r5
 8002492:	40c4      	lsrs	r4, r0
 8002494:	0753      	lsls	r3, r2, #29
 8002496:	d0b6      	beq.n	8002406 <__aeabi_dmul+0x412>
 8002498:	210f      	movs	r1, #15
 800249a:	4011      	ands	r1, r2
 800249c:	2904      	cmp	r1, #4
 800249e:	d1ac      	bne.n	80023fa <__aeabi_dmul+0x406>
 80024a0:	e7b1      	b.n	8002406 <__aeabi_dmul+0x412>
 80024a2:	0765      	lsls	r5, r4, #29
 80024a4:	0264      	lsls	r4, r4, #9
 80024a6:	0b24      	lsrs	r4, r4, #12
 80024a8:	08d2      	lsrs	r2, r2, #3
 80024aa:	4315      	orrs	r5, r2
 80024ac:	2200      	movs	r2, #0
 80024ae:	e611      	b.n	80020d4 <__aeabi_dmul+0xe0>
 80024b0:	2280      	movs	r2, #128	; 0x80
 80024b2:	0312      	lsls	r2, r2, #12
 80024b4:	4314      	orrs	r4, r2
 80024b6:	0324      	lsls	r4, r4, #12
 80024b8:	4a01      	ldr	r2, [pc, #4]	; (80024c0 <__aeabi_dmul+0x4cc>)
 80024ba:	0b24      	lsrs	r4, r4, #12
 80024bc:	e60a      	b.n	80020d4 <__aeabi_dmul+0xe0>
 80024be:	46c0      	nop			; (mov r8, r8)
 80024c0:	000007ff 	.word	0x000007ff
 80024c4:	0000043e 	.word	0x0000043e
 80024c8:	0000041e 	.word	0x0000041e

080024cc <__aeabi_dsub>:
 80024cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024ce:	4657      	mov	r7, sl
 80024d0:	464e      	mov	r6, r9
 80024d2:	4645      	mov	r5, r8
 80024d4:	46de      	mov	lr, fp
 80024d6:	0004      	movs	r4, r0
 80024d8:	b5e0      	push	{r5, r6, r7, lr}
 80024da:	001f      	movs	r7, r3
 80024dc:	0010      	movs	r0, r2
 80024de:	030b      	lsls	r3, r1, #12
 80024e0:	0f62      	lsrs	r2, r4, #29
 80024e2:	004e      	lsls	r6, r1, #1
 80024e4:	0fcd      	lsrs	r5, r1, #31
 80024e6:	0a5b      	lsrs	r3, r3, #9
 80024e8:	0339      	lsls	r1, r7, #12
 80024ea:	4313      	orrs	r3, r2
 80024ec:	0a49      	lsrs	r1, r1, #9
 80024ee:	00e2      	lsls	r2, r4, #3
 80024f0:	0f44      	lsrs	r4, r0, #29
 80024f2:	4321      	orrs	r1, r4
 80024f4:	4cc2      	ldr	r4, [pc, #776]	; (8002800 <__aeabi_dsub+0x334>)
 80024f6:	4691      	mov	r9, r2
 80024f8:	4692      	mov	sl, r2
 80024fa:	00c0      	lsls	r0, r0, #3
 80024fc:	007a      	lsls	r2, r7, #1
 80024fe:	4680      	mov	r8, r0
 8002500:	0d76      	lsrs	r6, r6, #21
 8002502:	0d52      	lsrs	r2, r2, #21
 8002504:	0fff      	lsrs	r7, r7, #31
 8002506:	42a2      	cmp	r2, r4
 8002508:	d100      	bne.n	800250c <__aeabi_dsub+0x40>
 800250a:	e0b4      	b.n	8002676 <__aeabi_dsub+0x1aa>
 800250c:	2401      	movs	r4, #1
 800250e:	4067      	eors	r7, r4
 8002510:	46bb      	mov	fp, r7
 8002512:	42bd      	cmp	r5, r7
 8002514:	d100      	bne.n	8002518 <__aeabi_dsub+0x4c>
 8002516:	e088      	b.n	800262a <__aeabi_dsub+0x15e>
 8002518:	1ab4      	subs	r4, r6, r2
 800251a:	46a4      	mov	ip, r4
 800251c:	2c00      	cmp	r4, #0
 800251e:	dc00      	bgt.n	8002522 <__aeabi_dsub+0x56>
 8002520:	e0b2      	b.n	8002688 <__aeabi_dsub+0x1bc>
 8002522:	2a00      	cmp	r2, #0
 8002524:	d100      	bne.n	8002528 <__aeabi_dsub+0x5c>
 8002526:	e0c5      	b.n	80026b4 <__aeabi_dsub+0x1e8>
 8002528:	4ab5      	ldr	r2, [pc, #724]	; (8002800 <__aeabi_dsub+0x334>)
 800252a:	4296      	cmp	r6, r2
 800252c:	d100      	bne.n	8002530 <__aeabi_dsub+0x64>
 800252e:	e28b      	b.n	8002a48 <__aeabi_dsub+0x57c>
 8002530:	2280      	movs	r2, #128	; 0x80
 8002532:	0412      	lsls	r2, r2, #16
 8002534:	4311      	orrs	r1, r2
 8002536:	4662      	mov	r2, ip
 8002538:	2a38      	cmp	r2, #56	; 0x38
 800253a:	dd00      	ble.n	800253e <__aeabi_dsub+0x72>
 800253c:	e1a1      	b.n	8002882 <__aeabi_dsub+0x3b6>
 800253e:	2a1f      	cmp	r2, #31
 8002540:	dd00      	ble.n	8002544 <__aeabi_dsub+0x78>
 8002542:	e216      	b.n	8002972 <__aeabi_dsub+0x4a6>
 8002544:	2720      	movs	r7, #32
 8002546:	000c      	movs	r4, r1
 8002548:	1abf      	subs	r7, r7, r2
 800254a:	40bc      	lsls	r4, r7
 800254c:	0002      	movs	r2, r0
 800254e:	46a0      	mov	r8, r4
 8002550:	4664      	mov	r4, ip
 8002552:	40b8      	lsls	r0, r7
 8002554:	40e2      	lsrs	r2, r4
 8002556:	4644      	mov	r4, r8
 8002558:	4314      	orrs	r4, r2
 800255a:	0002      	movs	r2, r0
 800255c:	1e50      	subs	r0, r2, #1
 800255e:	4182      	sbcs	r2, r0
 8002560:	4660      	mov	r0, ip
 8002562:	40c1      	lsrs	r1, r0
 8002564:	4322      	orrs	r2, r4
 8002566:	1a5b      	subs	r3, r3, r1
 8002568:	4649      	mov	r1, r9
 800256a:	1a8c      	subs	r4, r1, r2
 800256c:	45a1      	cmp	r9, r4
 800256e:	4192      	sbcs	r2, r2
 8002570:	4252      	negs	r2, r2
 8002572:	1a9b      	subs	r3, r3, r2
 8002574:	4698      	mov	r8, r3
 8002576:	4643      	mov	r3, r8
 8002578:	021b      	lsls	r3, r3, #8
 800257a:	d400      	bmi.n	800257e <__aeabi_dsub+0xb2>
 800257c:	e117      	b.n	80027ae <__aeabi_dsub+0x2e2>
 800257e:	4643      	mov	r3, r8
 8002580:	025b      	lsls	r3, r3, #9
 8002582:	0a5b      	lsrs	r3, r3, #9
 8002584:	4698      	mov	r8, r3
 8002586:	4643      	mov	r3, r8
 8002588:	2b00      	cmp	r3, #0
 800258a:	d100      	bne.n	800258e <__aeabi_dsub+0xc2>
 800258c:	e16c      	b.n	8002868 <__aeabi_dsub+0x39c>
 800258e:	4640      	mov	r0, r8
 8002590:	f000 fbfe 	bl	8002d90 <__clzsi2>
 8002594:	0002      	movs	r2, r0
 8002596:	3a08      	subs	r2, #8
 8002598:	2120      	movs	r1, #32
 800259a:	0020      	movs	r0, r4
 800259c:	4643      	mov	r3, r8
 800259e:	1a89      	subs	r1, r1, r2
 80025a0:	4093      	lsls	r3, r2
 80025a2:	40c8      	lsrs	r0, r1
 80025a4:	4094      	lsls	r4, r2
 80025a6:	4303      	orrs	r3, r0
 80025a8:	4296      	cmp	r6, r2
 80025aa:	dd00      	ble.n	80025ae <__aeabi_dsub+0xe2>
 80025ac:	e157      	b.n	800285e <__aeabi_dsub+0x392>
 80025ae:	1b96      	subs	r6, r2, r6
 80025b0:	1c71      	adds	r1, r6, #1
 80025b2:	291f      	cmp	r1, #31
 80025b4:	dd00      	ble.n	80025b8 <__aeabi_dsub+0xec>
 80025b6:	e1cb      	b.n	8002950 <__aeabi_dsub+0x484>
 80025b8:	2220      	movs	r2, #32
 80025ba:	0018      	movs	r0, r3
 80025bc:	0026      	movs	r6, r4
 80025be:	1a52      	subs	r2, r2, r1
 80025c0:	4094      	lsls	r4, r2
 80025c2:	4090      	lsls	r0, r2
 80025c4:	40ce      	lsrs	r6, r1
 80025c6:	40cb      	lsrs	r3, r1
 80025c8:	1e62      	subs	r2, r4, #1
 80025ca:	4194      	sbcs	r4, r2
 80025cc:	4330      	orrs	r0, r6
 80025ce:	4698      	mov	r8, r3
 80025d0:	2600      	movs	r6, #0
 80025d2:	4304      	orrs	r4, r0
 80025d4:	0763      	lsls	r3, r4, #29
 80025d6:	d009      	beq.n	80025ec <__aeabi_dsub+0x120>
 80025d8:	230f      	movs	r3, #15
 80025da:	4023      	ands	r3, r4
 80025dc:	2b04      	cmp	r3, #4
 80025de:	d005      	beq.n	80025ec <__aeabi_dsub+0x120>
 80025e0:	1d23      	adds	r3, r4, #4
 80025e2:	42a3      	cmp	r3, r4
 80025e4:	41a4      	sbcs	r4, r4
 80025e6:	4264      	negs	r4, r4
 80025e8:	44a0      	add	r8, r4
 80025ea:	001c      	movs	r4, r3
 80025ec:	4643      	mov	r3, r8
 80025ee:	021b      	lsls	r3, r3, #8
 80025f0:	d400      	bmi.n	80025f4 <__aeabi_dsub+0x128>
 80025f2:	e0df      	b.n	80027b4 <__aeabi_dsub+0x2e8>
 80025f4:	4b82      	ldr	r3, [pc, #520]	; (8002800 <__aeabi_dsub+0x334>)
 80025f6:	3601      	adds	r6, #1
 80025f8:	429e      	cmp	r6, r3
 80025fa:	d100      	bne.n	80025fe <__aeabi_dsub+0x132>
 80025fc:	e0fb      	b.n	80027f6 <__aeabi_dsub+0x32a>
 80025fe:	4642      	mov	r2, r8
 8002600:	4b80      	ldr	r3, [pc, #512]	; (8002804 <__aeabi_dsub+0x338>)
 8002602:	08e4      	lsrs	r4, r4, #3
 8002604:	401a      	ands	r2, r3
 8002606:	0013      	movs	r3, r2
 8002608:	0571      	lsls	r1, r6, #21
 800260a:	0752      	lsls	r2, r2, #29
 800260c:	025b      	lsls	r3, r3, #9
 800260e:	4322      	orrs	r2, r4
 8002610:	0b1b      	lsrs	r3, r3, #12
 8002612:	0d49      	lsrs	r1, r1, #21
 8002614:	0509      	lsls	r1, r1, #20
 8002616:	07ed      	lsls	r5, r5, #31
 8002618:	4319      	orrs	r1, r3
 800261a:	4329      	orrs	r1, r5
 800261c:	0010      	movs	r0, r2
 800261e:	bcf0      	pop	{r4, r5, r6, r7}
 8002620:	46bb      	mov	fp, r7
 8002622:	46b2      	mov	sl, r6
 8002624:	46a9      	mov	r9, r5
 8002626:	46a0      	mov	r8, r4
 8002628:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800262a:	1ab4      	subs	r4, r6, r2
 800262c:	46a4      	mov	ip, r4
 800262e:	2c00      	cmp	r4, #0
 8002630:	dd58      	ble.n	80026e4 <__aeabi_dsub+0x218>
 8002632:	2a00      	cmp	r2, #0
 8002634:	d100      	bne.n	8002638 <__aeabi_dsub+0x16c>
 8002636:	e09e      	b.n	8002776 <__aeabi_dsub+0x2aa>
 8002638:	4a71      	ldr	r2, [pc, #452]	; (8002800 <__aeabi_dsub+0x334>)
 800263a:	4296      	cmp	r6, r2
 800263c:	d100      	bne.n	8002640 <__aeabi_dsub+0x174>
 800263e:	e13b      	b.n	80028b8 <__aeabi_dsub+0x3ec>
 8002640:	2280      	movs	r2, #128	; 0x80
 8002642:	0412      	lsls	r2, r2, #16
 8002644:	4311      	orrs	r1, r2
 8002646:	4662      	mov	r2, ip
 8002648:	2a38      	cmp	r2, #56	; 0x38
 800264a:	dd00      	ble.n	800264e <__aeabi_dsub+0x182>
 800264c:	e0c1      	b.n	80027d2 <__aeabi_dsub+0x306>
 800264e:	2a1f      	cmp	r2, #31
 8002650:	dc00      	bgt.n	8002654 <__aeabi_dsub+0x188>
 8002652:	e1bb      	b.n	80029cc <__aeabi_dsub+0x500>
 8002654:	000c      	movs	r4, r1
 8002656:	3a20      	subs	r2, #32
 8002658:	40d4      	lsrs	r4, r2
 800265a:	0022      	movs	r2, r4
 800265c:	4664      	mov	r4, ip
 800265e:	2c20      	cmp	r4, #32
 8002660:	d004      	beq.n	800266c <__aeabi_dsub+0x1a0>
 8002662:	2740      	movs	r7, #64	; 0x40
 8002664:	1b3f      	subs	r7, r7, r4
 8002666:	40b9      	lsls	r1, r7
 8002668:	4308      	orrs	r0, r1
 800266a:	4680      	mov	r8, r0
 800266c:	4644      	mov	r4, r8
 800266e:	1e61      	subs	r1, r4, #1
 8002670:	418c      	sbcs	r4, r1
 8002672:	4314      	orrs	r4, r2
 8002674:	e0b1      	b.n	80027da <__aeabi_dsub+0x30e>
 8002676:	000c      	movs	r4, r1
 8002678:	4304      	orrs	r4, r0
 800267a:	d02a      	beq.n	80026d2 <__aeabi_dsub+0x206>
 800267c:	46bb      	mov	fp, r7
 800267e:	42bd      	cmp	r5, r7
 8002680:	d02d      	beq.n	80026de <__aeabi_dsub+0x212>
 8002682:	4c61      	ldr	r4, [pc, #388]	; (8002808 <__aeabi_dsub+0x33c>)
 8002684:	46a4      	mov	ip, r4
 8002686:	44b4      	add	ip, r6
 8002688:	4664      	mov	r4, ip
 800268a:	2c00      	cmp	r4, #0
 800268c:	d05c      	beq.n	8002748 <__aeabi_dsub+0x27c>
 800268e:	1b94      	subs	r4, r2, r6
 8002690:	46a4      	mov	ip, r4
 8002692:	2e00      	cmp	r6, #0
 8002694:	d000      	beq.n	8002698 <__aeabi_dsub+0x1cc>
 8002696:	e115      	b.n	80028c4 <__aeabi_dsub+0x3f8>
 8002698:	464d      	mov	r5, r9
 800269a:	431d      	orrs	r5, r3
 800269c:	d100      	bne.n	80026a0 <__aeabi_dsub+0x1d4>
 800269e:	e1c3      	b.n	8002a28 <__aeabi_dsub+0x55c>
 80026a0:	1e65      	subs	r5, r4, #1
 80026a2:	2c01      	cmp	r4, #1
 80026a4:	d100      	bne.n	80026a8 <__aeabi_dsub+0x1dc>
 80026a6:	e20c      	b.n	8002ac2 <__aeabi_dsub+0x5f6>
 80026a8:	4e55      	ldr	r6, [pc, #340]	; (8002800 <__aeabi_dsub+0x334>)
 80026aa:	42b4      	cmp	r4, r6
 80026ac:	d100      	bne.n	80026b0 <__aeabi_dsub+0x1e4>
 80026ae:	e1f8      	b.n	8002aa2 <__aeabi_dsub+0x5d6>
 80026b0:	46ac      	mov	ip, r5
 80026b2:	e10e      	b.n	80028d2 <__aeabi_dsub+0x406>
 80026b4:	000a      	movs	r2, r1
 80026b6:	4302      	orrs	r2, r0
 80026b8:	d100      	bne.n	80026bc <__aeabi_dsub+0x1f0>
 80026ba:	e136      	b.n	800292a <__aeabi_dsub+0x45e>
 80026bc:	0022      	movs	r2, r4
 80026be:	3a01      	subs	r2, #1
 80026c0:	2c01      	cmp	r4, #1
 80026c2:	d100      	bne.n	80026c6 <__aeabi_dsub+0x1fa>
 80026c4:	e1c6      	b.n	8002a54 <__aeabi_dsub+0x588>
 80026c6:	4c4e      	ldr	r4, [pc, #312]	; (8002800 <__aeabi_dsub+0x334>)
 80026c8:	45a4      	cmp	ip, r4
 80026ca:	d100      	bne.n	80026ce <__aeabi_dsub+0x202>
 80026cc:	e0f4      	b.n	80028b8 <__aeabi_dsub+0x3ec>
 80026ce:	4694      	mov	ip, r2
 80026d0:	e731      	b.n	8002536 <__aeabi_dsub+0x6a>
 80026d2:	2401      	movs	r4, #1
 80026d4:	4067      	eors	r7, r4
 80026d6:	46bb      	mov	fp, r7
 80026d8:	42bd      	cmp	r5, r7
 80026da:	d000      	beq.n	80026de <__aeabi_dsub+0x212>
 80026dc:	e71c      	b.n	8002518 <__aeabi_dsub+0x4c>
 80026de:	4c4a      	ldr	r4, [pc, #296]	; (8002808 <__aeabi_dsub+0x33c>)
 80026e0:	46a4      	mov	ip, r4
 80026e2:	44b4      	add	ip, r6
 80026e4:	4664      	mov	r4, ip
 80026e6:	2c00      	cmp	r4, #0
 80026e8:	d100      	bne.n	80026ec <__aeabi_dsub+0x220>
 80026ea:	e0cf      	b.n	800288c <__aeabi_dsub+0x3c0>
 80026ec:	1b94      	subs	r4, r2, r6
 80026ee:	46a4      	mov	ip, r4
 80026f0:	2e00      	cmp	r6, #0
 80026f2:	d100      	bne.n	80026f6 <__aeabi_dsub+0x22a>
 80026f4:	e15c      	b.n	80029b0 <__aeabi_dsub+0x4e4>
 80026f6:	4e42      	ldr	r6, [pc, #264]	; (8002800 <__aeabi_dsub+0x334>)
 80026f8:	42b2      	cmp	r2, r6
 80026fa:	d100      	bne.n	80026fe <__aeabi_dsub+0x232>
 80026fc:	e1ec      	b.n	8002ad8 <__aeabi_dsub+0x60c>
 80026fe:	2680      	movs	r6, #128	; 0x80
 8002700:	0436      	lsls	r6, r6, #16
 8002702:	4333      	orrs	r3, r6
 8002704:	4664      	mov	r4, ip
 8002706:	2c38      	cmp	r4, #56	; 0x38
 8002708:	dd00      	ble.n	800270c <__aeabi_dsub+0x240>
 800270a:	e1b3      	b.n	8002a74 <__aeabi_dsub+0x5a8>
 800270c:	2c1f      	cmp	r4, #31
 800270e:	dd00      	ble.n	8002712 <__aeabi_dsub+0x246>
 8002710:	e238      	b.n	8002b84 <__aeabi_dsub+0x6b8>
 8002712:	2620      	movs	r6, #32
 8002714:	1b36      	subs	r6, r6, r4
 8002716:	001c      	movs	r4, r3
 8002718:	40b4      	lsls	r4, r6
 800271a:	464f      	mov	r7, r9
 800271c:	46a0      	mov	r8, r4
 800271e:	4664      	mov	r4, ip
 8002720:	40e7      	lsrs	r7, r4
 8002722:	4644      	mov	r4, r8
 8002724:	433c      	orrs	r4, r7
 8002726:	464f      	mov	r7, r9
 8002728:	40b7      	lsls	r7, r6
 800272a:	003e      	movs	r6, r7
 800272c:	1e77      	subs	r7, r6, #1
 800272e:	41be      	sbcs	r6, r7
 8002730:	4334      	orrs	r4, r6
 8002732:	4666      	mov	r6, ip
 8002734:	40f3      	lsrs	r3, r6
 8002736:	18c9      	adds	r1, r1, r3
 8002738:	1824      	adds	r4, r4, r0
 800273a:	4284      	cmp	r4, r0
 800273c:	419b      	sbcs	r3, r3
 800273e:	425b      	negs	r3, r3
 8002740:	4698      	mov	r8, r3
 8002742:	0016      	movs	r6, r2
 8002744:	4488      	add	r8, r1
 8002746:	e04e      	b.n	80027e6 <__aeabi_dsub+0x31a>
 8002748:	4a30      	ldr	r2, [pc, #192]	; (800280c <__aeabi_dsub+0x340>)
 800274a:	1c74      	adds	r4, r6, #1
 800274c:	4214      	tst	r4, r2
 800274e:	d000      	beq.n	8002752 <__aeabi_dsub+0x286>
 8002750:	e0d6      	b.n	8002900 <__aeabi_dsub+0x434>
 8002752:	464a      	mov	r2, r9
 8002754:	431a      	orrs	r2, r3
 8002756:	2e00      	cmp	r6, #0
 8002758:	d000      	beq.n	800275c <__aeabi_dsub+0x290>
 800275a:	e15b      	b.n	8002a14 <__aeabi_dsub+0x548>
 800275c:	2a00      	cmp	r2, #0
 800275e:	d100      	bne.n	8002762 <__aeabi_dsub+0x296>
 8002760:	e1a5      	b.n	8002aae <__aeabi_dsub+0x5e2>
 8002762:	000a      	movs	r2, r1
 8002764:	4302      	orrs	r2, r0
 8002766:	d000      	beq.n	800276a <__aeabi_dsub+0x29e>
 8002768:	e1bb      	b.n	8002ae2 <__aeabi_dsub+0x616>
 800276a:	464a      	mov	r2, r9
 800276c:	0759      	lsls	r1, r3, #29
 800276e:	08d2      	lsrs	r2, r2, #3
 8002770:	430a      	orrs	r2, r1
 8002772:	08db      	lsrs	r3, r3, #3
 8002774:	e027      	b.n	80027c6 <__aeabi_dsub+0x2fa>
 8002776:	000a      	movs	r2, r1
 8002778:	4302      	orrs	r2, r0
 800277a:	d100      	bne.n	800277e <__aeabi_dsub+0x2b2>
 800277c:	e174      	b.n	8002a68 <__aeabi_dsub+0x59c>
 800277e:	0022      	movs	r2, r4
 8002780:	3a01      	subs	r2, #1
 8002782:	2c01      	cmp	r4, #1
 8002784:	d005      	beq.n	8002792 <__aeabi_dsub+0x2c6>
 8002786:	4c1e      	ldr	r4, [pc, #120]	; (8002800 <__aeabi_dsub+0x334>)
 8002788:	45a4      	cmp	ip, r4
 800278a:	d100      	bne.n	800278e <__aeabi_dsub+0x2c2>
 800278c:	e094      	b.n	80028b8 <__aeabi_dsub+0x3ec>
 800278e:	4694      	mov	ip, r2
 8002790:	e759      	b.n	8002646 <__aeabi_dsub+0x17a>
 8002792:	4448      	add	r0, r9
 8002794:	4548      	cmp	r0, r9
 8002796:	4192      	sbcs	r2, r2
 8002798:	185b      	adds	r3, r3, r1
 800279a:	4698      	mov	r8, r3
 800279c:	0004      	movs	r4, r0
 800279e:	4252      	negs	r2, r2
 80027a0:	4490      	add	r8, r2
 80027a2:	4643      	mov	r3, r8
 80027a4:	2602      	movs	r6, #2
 80027a6:	021b      	lsls	r3, r3, #8
 80027a8:	d500      	bpl.n	80027ac <__aeabi_dsub+0x2e0>
 80027aa:	e0c4      	b.n	8002936 <__aeabi_dsub+0x46a>
 80027ac:	3e01      	subs	r6, #1
 80027ae:	0763      	lsls	r3, r4, #29
 80027b0:	d000      	beq.n	80027b4 <__aeabi_dsub+0x2e8>
 80027b2:	e711      	b.n	80025d8 <__aeabi_dsub+0x10c>
 80027b4:	4643      	mov	r3, r8
 80027b6:	46b4      	mov	ip, r6
 80027b8:	0759      	lsls	r1, r3, #29
 80027ba:	08e2      	lsrs	r2, r4, #3
 80027bc:	430a      	orrs	r2, r1
 80027be:	08db      	lsrs	r3, r3, #3
 80027c0:	490f      	ldr	r1, [pc, #60]	; (8002800 <__aeabi_dsub+0x334>)
 80027c2:	458c      	cmp	ip, r1
 80027c4:	d040      	beq.n	8002848 <__aeabi_dsub+0x37c>
 80027c6:	4661      	mov	r1, ip
 80027c8:	031b      	lsls	r3, r3, #12
 80027ca:	0549      	lsls	r1, r1, #21
 80027cc:	0b1b      	lsrs	r3, r3, #12
 80027ce:	0d49      	lsrs	r1, r1, #21
 80027d0:	e720      	b.n	8002614 <__aeabi_dsub+0x148>
 80027d2:	4301      	orrs	r1, r0
 80027d4:	000c      	movs	r4, r1
 80027d6:	1e61      	subs	r1, r4, #1
 80027d8:	418c      	sbcs	r4, r1
 80027da:	444c      	add	r4, r9
 80027dc:	454c      	cmp	r4, r9
 80027de:	4192      	sbcs	r2, r2
 80027e0:	4252      	negs	r2, r2
 80027e2:	4690      	mov	r8, r2
 80027e4:	4498      	add	r8, r3
 80027e6:	4643      	mov	r3, r8
 80027e8:	021b      	lsls	r3, r3, #8
 80027ea:	d5e0      	bpl.n	80027ae <__aeabi_dsub+0x2e2>
 80027ec:	4b04      	ldr	r3, [pc, #16]	; (8002800 <__aeabi_dsub+0x334>)
 80027ee:	3601      	adds	r6, #1
 80027f0:	429e      	cmp	r6, r3
 80027f2:	d000      	beq.n	80027f6 <__aeabi_dsub+0x32a>
 80027f4:	e09f      	b.n	8002936 <__aeabi_dsub+0x46a>
 80027f6:	0031      	movs	r1, r6
 80027f8:	2300      	movs	r3, #0
 80027fa:	2200      	movs	r2, #0
 80027fc:	e70a      	b.n	8002614 <__aeabi_dsub+0x148>
 80027fe:	46c0      	nop			; (mov r8, r8)
 8002800:	000007ff 	.word	0x000007ff
 8002804:	ff7fffff 	.word	0xff7fffff
 8002808:	fffff801 	.word	0xfffff801
 800280c:	000007fe 	.word	0x000007fe
 8002810:	2a00      	cmp	r2, #0
 8002812:	d100      	bne.n	8002816 <__aeabi_dsub+0x34a>
 8002814:	e160      	b.n	8002ad8 <__aeabi_dsub+0x60c>
 8002816:	000a      	movs	r2, r1
 8002818:	4302      	orrs	r2, r0
 800281a:	d04d      	beq.n	80028b8 <__aeabi_dsub+0x3ec>
 800281c:	464a      	mov	r2, r9
 800281e:	075c      	lsls	r4, r3, #29
 8002820:	08d2      	lsrs	r2, r2, #3
 8002822:	4322      	orrs	r2, r4
 8002824:	2480      	movs	r4, #128	; 0x80
 8002826:	08db      	lsrs	r3, r3, #3
 8002828:	0324      	lsls	r4, r4, #12
 800282a:	4223      	tst	r3, r4
 800282c:	d007      	beq.n	800283e <__aeabi_dsub+0x372>
 800282e:	08ce      	lsrs	r6, r1, #3
 8002830:	4226      	tst	r6, r4
 8002832:	d104      	bne.n	800283e <__aeabi_dsub+0x372>
 8002834:	465d      	mov	r5, fp
 8002836:	0033      	movs	r3, r6
 8002838:	08c2      	lsrs	r2, r0, #3
 800283a:	0749      	lsls	r1, r1, #29
 800283c:	430a      	orrs	r2, r1
 800283e:	0f51      	lsrs	r1, r2, #29
 8002840:	00d2      	lsls	r2, r2, #3
 8002842:	08d2      	lsrs	r2, r2, #3
 8002844:	0749      	lsls	r1, r1, #29
 8002846:	430a      	orrs	r2, r1
 8002848:	0011      	movs	r1, r2
 800284a:	4319      	orrs	r1, r3
 800284c:	d100      	bne.n	8002850 <__aeabi_dsub+0x384>
 800284e:	e1c8      	b.n	8002be2 <__aeabi_dsub+0x716>
 8002850:	2180      	movs	r1, #128	; 0x80
 8002852:	0309      	lsls	r1, r1, #12
 8002854:	430b      	orrs	r3, r1
 8002856:	031b      	lsls	r3, r3, #12
 8002858:	49d5      	ldr	r1, [pc, #852]	; (8002bb0 <__aeabi_dsub+0x6e4>)
 800285a:	0b1b      	lsrs	r3, r3, #12
 800285c:	e6da      	b.n	8002614 <__aeabi_dsub+0x148>
 800285e:	49d5      	ldr	r1, [pc, #852]	; (8002bb4 <__aeabi_dsub+0x6e8>)
 8002860:	1ab6      	subs	r6, r6, r2
 8002862:	400b      	ands	r3, r1
 8002864:	4698      	mov	r8, r3
 8002866:	e6b5      	b.n	80025d4 <__aeabi_dsub+0x108>
 8002868:	0020      	movs	r0, r4
 800286a:	f000 fa91 	bl	8002d90 <__clzsi2>
 800286e:	0002      	movs	r2, r0
 8002870:	3218      	adds	r2, #24
 8002872:	2a1f      	cmp	r2, #31
 8002874:	dc00      	bgt.n	8002878 <__aeabi_dsub+0x3ac>
 8002876:	e68f      	b.n	8002598 <__aeabi_dsub+0xcc>
 8002878:	0023      	movs	r3, r4
 800287a:	3808      	subs	r0, #8
 800287c:	4083      	lsls	r3, r0
 800287e:	2400      	movs	r4, #0
 8002880:	e692      	b.n	80025a8 <__aeabi_dsub+0xdc>
 8002882:	4308      	orrs	r0, r1
 8002884:	0002      	movs	r2, r0
 8002886:	1e50      	subs	r0, r2, #1
 8002888:	4182      	sbcs	r2, r0
 800288a:	e66d      	b.n	8002568 <__aeabi_dsub+0x9c>
 800288c:	4cca      	ldr	r4, [pc, #808]	; (8002bb8 <__aeabi_dsub+0x6ec>)
 800288e:	1c72      	adds	r2, r6, #1
 8002890:	4222      	tst	r2, r4
 8002892:	d000      	beq.n	8002896 <__aeabi_dsub+0x3ca>
 8002894:	e0ad      	b.n	80029f2 <__aeabi_dsub+0x526>
 8002896:	464a      	mov	r2, r9
 8002898:	431a      	orrs	r2, r3
 800289a:	2e00      	cmp	r6, #0
 800289c:	d1b8      	bne.n	8002810 <__aeabi_dsub+0x344>
 800289e:	2a00      	cmp	r2, #0
 80028a0:	d100      	bne.n	80028a4 <__aeabi_dsub+0x3d8>
 80028a2:	e158      	b.n	8002b56 <__aeabi_dsub+0x68a>
 80028a4:	000a      	movs	r2, r1
 80028a6:	4302      	orrs	r2, r0
 80028a8:	d000      	beq.n	80028ac <__aeabi_dsub+0x3e0>
 80028aa:	e159      	b.n	8002b60 <__aeabi_dsub+0x694>
 80028ac:	464a      	mov	r2, r9
 80028ae:	0759      	lsls	r1, r3, #29
 80028b0:	08d2      	lsrs	r2, r2, #3
 80028b2:	430a      	orrs	r2, r1
 80028b4:	08db      	lsrs	r3, r3, #3
 80028b6:	e786      	b.n	80027c6 <__aeabi_dsub+0x2fa>
 80028b8:	464a      	mov	r2, r9
 80028ba:	0759      	lsls	r1, r3, #29
 80028bc:	08d2      	lsrs	r2, r2, #3
 80028be:	430a      	orrs	r2, r1
 80028c0:	08db      	lsrs	r3, r3, #3
 80028c2:	e7c1      	b.n	8002848 <__aeabi_dsub+0x37c>
 80028c4:	4dba      	ldr	r5, [pc, #744]	; (8002bb0 <__aeabi_dsub+0x6e4>)
 80028c6:	42aa      	cmp	r2, r5
 80028c8:	d100      	bne.n	80028cc <__aeabi_dsub+0x400>
 80028ca:	e11e      	b.n	8002b0a <__aeabi_dsub+0x63e>
 80028cc:	2580      	movs	r5, #128	; 0x80
 80028ce:	042d      	lsls	r5, r5, #16
 80028d0:	432b      	orrs	r3, r5
 80028d2:	4664      	mov	r4, ip
 80028d4:	2c38      	cmp	r4, #56	; 0x38
 80028d6:	dc5d      	bgt.n	8002994 <__aeabi_dsub+0x4c8>
 80028d8:	2c1f      	cmp	r4, #31
 80028da:	dd00      	ble.n	80028de <__aeabi_dsub+0x412>
 80028dc:	e0d0      	b.n	8002a80 <__aeabi_dsub+0x5b4>
 80028de:	2520      	movs	r5, #32
 80028e0:	4667      	mov	r7, ip
 80028e2:	1b2d      	subs	r5, r5, r4
 80028e4:	464e      	mov	r6, r9
 80028e6:	001c      	movs	r4, r3
 80028e8:	40fe      	lsrs	r6, r7
 80028ea:	40ac      	lsls	r4, r5
 80028ec:	4334      	orrs	r4, r6
 80028ee:	464e      	mov	r6, r9
 80028f0:	40ae      	lsls	r6, r5
 80028f2:	0035      	movs	r5, r6
 80028f4:	40fb      	lsrs	r3, r7
 80028f6:	1e6e      	subs	r6, r5, #1
 80028f8:	41b5      	sbcs	r5, r6
 80028fa:	1ac9      	subs	r1, r1, r3
 80028fc:	432c      	orrs	r4, r5
 80028fe:	e04e      	b.n	800299e <__aeabi_dsub+0x4d2>
 8002900:	464a      	mov	r2, r9
 8002902:	1a14      	subs	r4, r2, r0
 8002904:	45a1      	cmp	r9, r4
 8002906:	4192      	sbcs	r2, r2
 8002908:	4252      	negs	r2, r2
 800290a:	4690      	mov	r8, r2
 800290c:	1a5f      	subs	r7, r3, r1
 800290e:	003a      	movs	r2, r7
 8002910:	4647      	mov	r7, r8
 8002912:	1bd2      	subs	r2, r2, r7
 8002914:	4690      	mov	r8, r2
 8002916:	0212      	lsls	r2, r2, #8
 8002918:	d500      	bpl.n	800291c <__aeabi_dsub+0x450>
 800291a:	e08b      	b.n	8002a34 <__aeabi_dsub+0x568>
 800291c:	4642      	mov	r2, r8
 800291e:	4322      	orrs	r2, r4
 8002920:	d000      	beq.n	8002924 <__aeabi_dsub+0x458>
 8002922:	e630      	b.n	8002586 <__aeabi_dsub+0xba>
 8002924:	2300      	movs	r3, #0
 8002926:	2500      	movs	r5, #0
 8002928:	e74d      	b.n	80027c6 <__aeabi_dsub+0x2fa>
 800292a:	464a      	mov	r2, r9
 800292c:	0759      	lsls	r1, r3, #29
 800292e:	08d2      	lsrs	r2, r2, #3
 8002930:	430a      	orrs	r2, r1
 8002932:	08db      	lsrs	r3, r3, #3
 8002934:	e744      	b.n	80027c0 <__aeabi_dsub+0x2f4>
 8002936:	4642      	mov	r2, r8
 8002938:	4b9e      	ldr	r3, [pc, #632]	; (8002bb4 <__aeabi_dsub+0x6e8>)
 800293a:	0861      	lsrs	r1, r4, #1
 800293c:	401a      	ands	r2, r3
 800293e:	0013      	movs	r3, r2
 8002940:	2201      	movs	r2, #1
 8002942:	4014      	ands	r4, r2
 8002944:	430c      	orrs	r4, r1
 8002946:	07da      	lsls	r2, r3, #31
 8002948:	085b      	lsrs	r3, r3, #1
 800294a:	4698      	mov	r8, r3
 800294c:	4314      	orrs	r4, r2
 800294e:	e641      	b.n	80025d4 <__aeabi_dsub+0x108>
 8002950:	001a      	movs	r2, r3
 8002952:	3e1f      	subs	r6, #31
 8002954:	40f2      	lsrs	r2, r6
 8002956:	0016      	movs	r6, r2
 8002958:	2920      	cmp	r1, #32
 800295a:	d003      	beq.n	8002964 <__aeabi_dsub+0x498>
 800295c:	2240      	movs	r2, #64	; 0x40
 800295e:	1a51      	subs	r1, r2, r1
 8002960:	408b      	lsls	r3, r1
 8002962:	431c      	orrs	r4, r3
 8002964:	1e62      	subs	r2, r4, #1
 8002966:	4194      	sbcs	r4, r2
 8002968:	2300      	movs	r3, #0
 800296a:	4334      	orrs	r4, r6
 800296c:	4698      	mov	r8, r3
 800296e:	2600      	movs	r6, #0
 8002970:	e71d      	b.n	80027ae <__aeabi_dsub+0x2e2>
 8002972:	000c      	movs	r4, r1
 8002974:	3a20      	subs	r2, #32
 8002976:	40d4      	lsrs	r4, r2
 8002978:	0022      	movs	r2, r4
 800297a:	4664      	mov	r4, ip
 800297c:	2c20      	cmp	r4, #32
 800297e:	d004      	beq.n	800298a <__aeabi_dsub+0x4be>
 8002980:	2740      	movs	r7, #64	; 0x40
 8002982:	1b3f      	subs	r7, r7, r4
 8002984:	40b9      	lsls	r1, r7
 8002986:	4308      	orrs	r0, r1
 8002988:	4680      	mov	r8, r0
 800298a:	4644      	mov	r4, r8
 800298c:	1e61      	subs	r1, r4, #1
 800298e:	418c      	sbcs	r4, r1
 8002990:	4322      	orrs	r2, r4
 8002992:	e5e9      	b.n	8002568 <__aeabi_dsub+0x9c>
 8002994:	464c      	mov	r4, r9
 8002996:	4323      	orrs	r3, r4
 8002998:	001c      	movs	r4, r3
 800299a:	1e63      	subs	r3, r4, #1
 800299c:	419c      	sbcs	r4, r3
 800299e:	1b04      	subs	r4, r0, r4
 80029a0:	42a0      	cmp	r0, r4
 80029a2:	419b      	sbcs	r3, r3
 80029a4:	425b      	negs	r3, r3
 80029a6:	1acb      	subs	r3, r1, r3
 80029a8:	4698      	mov	r8, r3
 80029aa:	465d      	mov	r5, fp
 80029ac:	0016      	movs	r6, r2
 80029ae:	e5e2      	b.n	8002576 <__aeabi_dsub+0xaa>
 80029b0:	464e      	mov	r6, r9
 80029b2:	431e      	orrs	r6, r3
 80029b4:	d100      	bne.n	80029b8 <__aeabi_dsub+0x4ec>
 80029b6:	e0ae      	b.n	8002b16 <__aeabi_dsub+0x64a>
 80029b8:	1e66      	subs	r6, r4, #1
 80029ba:	2c01      	cmp	r4, #1
 80029bc:	d100      	bne.n	80029c0 <__aeabi_dsub+0x4f4>
 80029be:	e0fd      	b.n	8002bbc <__aeabi_dsub+0x6f0>
 80029c0:	4f7b      	ldr	r7, [pc, #492]	; (8002bb0 <__aeabi_dsub+0x6e4>)
 80029c2:	42bc      	cmp	r4, r7
 80029c4:	d100      	bne.n	80029c8 <__aeabi_dsub+0x4fc>
 80029c6:	e107      	b.n	8002bd8 <__aeabi_dsub+0x70c>
 80029c8:	46b4      	mov	ip, r6
 80029ca:	e69b      	b.n	8002704 <__aeabi_dsub+0x238>
 80029cc:	4664      	mov	r4, ip
 80029ce:	2220      	movs	r2, #32
 80029d0:	1b12      	subs	r2, r2, r4
 80029d2:	000c      	movs	r4, r1
 80029d4:	4094      	lsls	r4, r2
 80029d6:	0007      	movs	r7, r0
 80029d8:	4090      	lsls	r0, r2
 80029da:	46a0      	mov	r8, r4
 80029dc:	4664      	mov	r4, ip
 80029de:	1e42      	subs	r2, r0, #1
 80029e0:	4190      	sbcs	r0, r2
 80029e2:	4662      	mov	r2, ip
 80029e4:	40e7      	lsrs	r7, r4
 80029e6:	4644      	mov	r4, r8
 80029e8:	40d1      	lsrs	r1, r2
 80029ea:	433c      	orrs	r4, r7
 80029ec:	4304      	orrs	r4, r0
 80029ee:	185b      	adds	r3, r3, r1
 80029f0:	e6f3      	b.n	80027da <__aeabi_dsub+0x30e>
 80029f2:	4c6f      	ldr	r4, [pc, #444]	; (8002bb0 <__aeabi_dsub+0x6e4>)
 80029f4:	42a2      	cmp	r2, r4
 80029f6:	d100      	bne.n	80029fa <__aeabi_dsub+0x52e>
 80029f8:	e0d5      	b.n	8002ba6 <__aeabi_dsub+0x6da>
 80029fa:	4448      	add	r0, r9
 80029fc:	185b      	adds	r3, r3, r1
 80029fe:	4548      	cmp	r0, r9
 8002a00:	4189      	sbcs	r1, r1
 8002a02:	4249      	negs	r1, r1
 8002a04:	185b      	adds	r3, r3, r1
 8002a06:	07dc      	lsls	r4, r3, #31
 8002a08:	0840      	lsrs	r0, r0, #1
 8002a0a:	085b      	lsrs	r3, r3, #1
 8002a0c:	4698      	mov	r8, r3
 8002a0e:	0016      	movs	r6, r2
 8002a10:	4304      	orrs	r4, r0
 8002a12:	e6cc      	b.n	80027ae <__aeabi_dsub+0x2e2>
 8002a14:	2a00      	cmp	r2, #0
 8002a16:	d000      	beq.n	8002a1a <__aeabi_dsub+0x54e>
 8002a18:	e082      	b.n	8002b20 <__aeabi_dsub+0x654>
 8002a1a:	000a      	movs	r2, r1
 8002a1c:	4302      	orrs	r2, r0
 8002a1e:	d140      	bne.n	8002aa2 <__aeabi_dsub+0x5d6>
 8002a20:	2380      	movs	r3, #128	; 0x80
 8002a22:	2500      	movs	r5, #0
 8002a24:	031b      	lsls	r3, r3, #12
 8002a26:	e713      	b.n	8002850 <__aeabi_dsub+0x384>
 8002a28:	074b      	lsls	r3, r1, #29
 8002a2a:	08c2      	lsrs	r2, r0, #3
 8002a2c:	431a      	orrs	r2, r3
 8002a2e:	465d      	mov	r5, fp
 8002a30:	08cb      	lsrs	r3, r1, #3
 8002a32:	e6c5      	b.n	80027c0 <__aeabi_dsub+0x2f4>
 8002a34:	464a      	mov	r2, r9
 8002a36:	1a84      	subs	r4, r0, r2
 8002a38:	42a0      	cmp	r0, r4
 8002a3a:	4192      	sbcs	r2, r2
 8002a3c:	1acb      	subs	r3, r1, r3
 8002a3e:	4252      	negs	r2, r2
 8002a40:	1a9b      	subs	r3, r3, r2
 8002a42:	4698      	mov	r8, r3
 8002a44:	465d      	mov	r5, fp
 8002a46:	e59e      	b.n	8002586 <__aeabi_dsub+0xba>
 8002a48:	464a      	mov	r2, r9
 8002a4a:	0759      	lsls	r1, r3, #29
 8002a4c:	08d2      	lsrs	r2, r2, #3
 8002a4e:	430a      	orrs	r2, r1
 8002a50:	08db      	lsrs	r3, r3, #3
 8002a52:	e6f9      	b.n	8002848 <__aeabi_dsub+0x37c>
 8002a54:	464a      	mov	r2, r9
 8002a56:	1a14      	subs	r4, r2, r0
 8002a58:	45a1      	cmp	r9, r4
 8002a5a:	4192      	sbcs	r2, r2
 8002a5c:	1a5b      	subs	r3, r3, r1
 8002a5e:	4252      	negs	r2, r2
 8002a60:	1a9b      	subs	r3, r3, r2
 8002a62:	4698      	mov	r8, r3
 8002a64:	2601      	movs	r6, #1
 8002a66:	e586      	b.n	8002576 <__aeabi_dsub+0xaa>
 8002a68:	464a      	mov	r2, r9
 8002a6a:	0759      	lsls	r1, r3, #29
 8002a6c:	08d2      	lsrs	r2, r2, #3
 8002a6e:	430a      	orrs	r2, r1
 8002a70:	08db      	lsrs	r3, r3, #3
 8002a72:	e6a5      	b.n	80027c0 <__aeabi_dsub+0x2f4>
 8002a74:	464c      	mov	r4, r9
 8002a76:	4323      	orrs	r3, r4
 8002a78:	001c      	movs	r4, r3
 8002a7a:	1e63      	subs	r3, r4, #1
 8002a7c:	419c      	sbcs	r4, r3
 8002a7e:	e65b      	b.n	8002738 <__aeabi_dsub+0x26c>
 8002a80:	4665      	mov	r5, ip
 8002a82:	001e      	movs	r6, r3
 8002a84:	3d20      	subs	r5, #32
 8002a86:	40ee      	lsrs	r6, r5
 8002a88:	2c20      	cmp	r4, #32
 8002a8a:	d005      	beq.n	8002a98 <__aeabi_dsub+0x5cc>
 8002a8c:	2540      	movs	r5, #64	; 0x40
 8002a8e:	1b2d      	subs	r5, r5, r4
 8002a90:	40ab      	lsls	r3, r5
 8002a92:	464c      	mov	r4, r9
 8002a94:	431c      	orrs	r4, r3
 8002a96:	46a2      	mov	sl, r4
 8002a98:	4654      	mov	r4, sl
 8002a9a:	1e63      	subs	r3, r4, #1
 8002a9c:	419c      	sbcs	r4, r3
 8002a9e:	4334      	orrs	r4, r6
 8002aa0:	e77d      	b.n	800299e <__aeabi_dsub+0x4d2>
 8002aa2:	074b      	lsls	r3, r1, #29
 8002aa4:	08c2      	lsrs	r2, r0, #3
 8002aa6:	431a      	orrs	r2, r3
 8002aa8:	465d      	mov	r5, fp
 8002aaa:	08cb      	lsrs	r3, r1, #3
 8002aac:	e6cc      	b.n	8002848 <__aeabi_dsub+0x37c>
 8002aae:	000a      	movs	r2, r1
 8002ab0:	4302      	orrs	r2, r0
 8002ab2:	d100      	bne.n	8002ab6 <__aeabi_dsub+0x5ea>
 8002ab4:	e736      	b.n	8002924 <__aeabi_dsub+0x458>
 8002ab6:	074b      	lsls	r3, r1, #29
 8002ab8:	08c2      	lsrs	r2, r0, #3
 8002aba:	431a      	orrs	r2, r3
 8002abc:	465d      	mov	r5, fp
 8002abe:	08cb      	lsrs	r3, r1, #3
 8002ac0:	e681      	b.n	80027c6 <__aeabi_dsub+0x2fa>
 8002ac2:	464a      	mov	r2, r9
 8002ac4:	1a84      	subs	r4, r0, r2
 8002ac6:	42a0      	cmp	r0, r4
 8002ac8:	4192      	sbcs	r2, r2
 8002aca:	1acb      	subs	r3, r1, r3
 8002acc:	4252      	negs	r2, r2
 8002ace:	1a9b      	subs	r3, r3, r2
 8002ad0:	4698      	mov	r8, r3
 8002ad2:	465d      	mov	r5, fp
 8002ad4:	2601      	movs	r6, #1
 8002ad6:	e54e      	b.n	8002576 <__aeabi_dsub+0xaa>
 8002ad8:	074b      	lsls	r3, r1, #29
 8002ada:	08c2      	lsrs	r2, r0, #3
 8002adc:	431a      	orrs	r2, r3
 8002ade:	08cb      	lsrs	r3, r1, #3
 8002ae0:	e6b2      	b.n	8002848 <__aeabi_dsub+0x37c>
 8002ae2:	464a      	mov	r2, r9
 8002ae4:	1a14      	subs	r4, r2, r0
 8002ae6:	45a1      	cmp	r9, r4
 8002ae8:	4192      	sbcs	r2, r2
 8002aea:	1a5f      	subs	r7, r3, r1
 8002aec:	4252      	negs	r2, r2
 8002aee:	1aba      	subs	r2, r7, r2
 8002af0:	4690      	mov	r8, r2
 8002af2:	0212      	lsls	r2, r2, #8
 8002af4:	d56b      	bpl.n	8002bce <__aeabi_dsub+0x702>
 8002af6:	464a      	mov	r2, r9
 8002af8:	1a84      	subs	r4, r0, r2
 8002afa:	42a0      	cmp	r0, r4
 8002afc:	4192      	sbcs	r2, r2
 8002afe:	1acb      	subs	r3, r1, r3
 8002b00:	4252      	negs	r2, r2
 8002b02:	1a9b      	subs	r3, r3, r2
 8002b04:	4698      	mov	r8, r3
 8002b06:	465d      	mov	r5, fp
 8002b08:	e564      	b.n	80025d4 <__aeabi_dsub+0x108>
 8002b0a:	074b      	lsls	r3, r1, #29
 8002b0c:	08c2      	lsrs	r2, r0, #3
 8002b0e:	431a      	orrs	r2, r3
 8002b10:	465d      	mov	r5, fp
 8002b12:	08cb      	lsrs	r3, r1, #3
 8002b14:	e698      	b.n	8002848 <__aeabi_dsub+0x37c>
 8002b16:	074b      	lsls	r3, r1, #29
 8002b18:	08c2      	lsrs	r2, r0, #3
 8002b1a:	431a      	orrs	r2, r3
 8002b1c:	08cb      	lsrs	r3, r1, #3
 8002b1e:	e64f      	b.n	80027c0 <__aeabi_dsub+0x2f4>
 8002b20:	000a      	movs	r2, r1
 8002b22:	4302      	orrs	r2, r0
 8002b24:	d090      	beq.n	8002a48 <__aeabi_dsub+0x57c>
 8002b26:	464a      	mov	r2, r9
 8002b28:	075c      	lsls	r4, r3, #29
 8002b2a:	08d2      	lsrs	r2, r2, #3
 8002b2c:	4314      	orrs	r4, r2
 8002b2e:	2280      	movs	r2, #128	; 0x80
 8002b30:	08db      	lsrs	r3, r3, #3
 8002b32:	0312      	lsls	r2, r2, #12
 8002b34:	4213      	tst	r3, r2
 8002b36:	d008      	beq.n	8002b4a <__aeabi_dsub+0x67e>
 8002b38:	08ce      	lsrs	r6, r1, #3
 8002b3a:	4216      	tst	r6, r2
 8002b3c:	d105      	bne.n	8002b4a <__aeabi_dsub+0x67e>
 8002b3e:	08c0      	lsrs	r0, r0, #3
 8002b40:	0749      	lsls	r1, r1, #29
 8002b42:	4308      	orrs	r0, r1
 8002b44:	0004      	movs	r4, r0
 8002b46:	465d      	mov	r5, fp
 8002b48:	0033      	movs	r3, r6
 8002b4a:	0f61      	lsrs	r1, r4, #29
 8002b4c:	00e2      	lsls	r2, r4, #3
 8002b4e:	0749      	lsls	r1, r1, #29
 8002b50:	08d2      	lsrs	r2, r2, #3
 8002b52:	430a      	orrs	r2, r1
 8002b54:	e678      	b.n	8002848 <__aeabi_dsub+0x37c>
 8002b56:	074b      	lsls	r3, r1, #29
 8002b58:	08c2      	lsrs	r2, r0, #3
 8002b5a:	431a      	orrs	r2, r3
 8002b5c:	08cb      	lsrs	r3, r1, #3
 8002b5e:	e632      	b.n	80027c6 <__aeabi_dsub+0x2fa>
 8002b60:	4448      	add	r0, r9
 8002b62:	185b      	adds	r3, r3, r1
 8002b64:	4548      	cmp	r0, r9
 8002b66:	4192      	sbcs	r2, r2
 8002b68:	4698      	mov	r8, r3
 8002b6a:	4252      	negs	r2, r2
 8002b6c:	4490      	add	r8, r2
 8002b6e:	4643      	mov	r3, r8
 8002b70:	0004      	movs	r4, r0
 8002b72:	021b      	lsls	r3, r3, #8
 8002b74:	d400      	bmi.n	8002b78 <__aeabi_dsub+0x6ac>
 8002b76:	e61a      	b.n	80027ae <__aeabi_dsub+0x2e2>
 8002b78:	4642      	mov	r2, r8
 8002b7a:	4b0e      	ldr	r3, [pc, #56]	; (8002bb4 <__aeabi_dsub+0x6e8>)
 8002b7c:	2601      	movs	r6, #1
 8002b7e:	401a      	ands	r2, r3
 8002b80:	4690      	mov	r8, r2
 8002b82:	e614      	b.n	80027ae <__aeabi_dsub+0x2e2>
 8002b84:	4666      	mov	r6, ip
 8002b86:	001f      	movs	r7, r3
 8002b88:	3e20      	subs	r6, #32
 8002b8a:	40f7      	lsrs	r7, r6
 8002b8c:	2c20      	cmp	r4, #32
 8002b8e:	d005      	beq.n	8002b9c <__aeabi_dsub+0x6d0>
 8002b90:	2640      	movs	r6, #64	; 0x40
 8002b92:	1b36      	subs	r6, r6, r4
 8002b94:	40b3      	lsls	r3, r6
 8002b96:	464c      	mov	r4, r9
 8002b98:	431c      	orrs	r4, r3
 8002b9a:	46a2      	mov	sl, r4
 8002b9c:	4654      	mov	r4, sl
 8002b9e:	1e63      	subs	r3, r4, #1
 8002ba0:	419c      	sbcs	r4, r3
 8002ba2:	433c      	orrs	r4, r7
 8002ba4:	e5c8      	b.n	8002738 <__aeabi_dsub+0x26c>
 8002ba6:	0011      	movs	r1, r2
 8002ba8:	2300      	movs	r3, #0
 8002baa:	2200      	movs	r2, #0
 8002bac:	e532      	b.n	8002614 <__aeabi_dsub+0x148>
 8002bae:	46c0      	nop			; (mov r8, r8)
 8002bb0:	000007ff 	.word	0x000007ff
 8002bb4:	ff7fffff 	.word	0xff7fffff
 8002bb8:	000007fe 	.word	0x000007fe
 8002bbc:	464a      	mov	r2, r9
 8002bbe:	1814      	adds	r4, r2, r0
 8002bc0:	4284      	cmp	r4, r0
 8002bc2:	4192      	sbcs	r2, r2
 8002bc4:	185b      	adds	r3, r3, r1
 8002bc6:	4698      	mov	r8, r3
 8002bc8:	4252      	negs	r2, r2
 8002bca:	4490      	add	r8, r2
 8002bcc:	e5e9      	b.n	80027a2 <__aeabi_dsub+0x2d6>
 8002bce:	4642      	mov	r2, r8
 8002bd0:	4322      	orrs	r2, r4
 8002bd2:	d100      	bne.n	8002bd6 <__aeabi_dsub+0x70a>
 8002bd4:	e6a6      	b.n	8002924 <__aeabi_dsub+0x458>
 8002bd6:	e5ea      	b.n	80027ae <__aeabi_dsub+0x2e2>
 8002bd8:	074b      	lsls	r3, r1, #29
 8002bda:	08c2      	lsrs	r2, r0, #3
 8002bdc:	431a      	orrs	r2, r3
 8002bde:	08cb      	lsrs	r3, r1, #3
 8002be0:	e632      	b.n	8002848 <__aeabi_dsub+0x37c>
 8002be2:	2200      	movs	r2, #0
 8002be4:	4901      	ldr	r1, [pc, #4]	; (8002bec <__aeabi_dsub+0x720>)
 8002be6:	0013      	movs	r3, r2
 8002be8:	e514      	b.n	8002614 <__aeabi_dsub+0x148>
 8002bea:	46c0      	nop			; (mov r8, r8)
 8002bec:	000007ff 	.word	0x000007ff

08002bf0 <__aeabi_f2d>:
 8002bf0:	b570      	push	{r4, r5, r6, lr}
 8002bf2:	0043      	lsls	r3, r0, #1
 8002bf4:	0246      	lsls	r6, r0, #9
 8002bf6:	0fc4      	lsrs	r4, r0, #31
 8002bf8:	20fe      	movs	r0, #254	; 0xfe
 8002bfa:	0e1b      	lsrs	r3, r3, #24
 8002bfc:	1c59      	adds	r1, r3, #1
 8002bfe:	0a75      	lsrs	r5, r6, #9
 8002c00:	4208      	tst	r0, r1
 8002c02:	d00c      	beq.n	8002c1e <__aeabi_f2d+0x2e>
 8002c04:	22e0      	movs	r2, #224	; 0xe0
 8002c06:	0092      	lsls	r2, r2, #2
 8002c08:	4694      	mov	ip, r2
 8002c0a:	076d      	lsls	r5, r5, #29
 8002c0c:	0b36      	lsrs	r6, r6, #12
 8002c0e:	4463      	add	r3, ip
 8002c10:	051b      	lsls	r3, r3, #20
 8002c12:	4333      	orrs	r3, r6
 8002c14:	07e4      	lsls	r4, r4, #31
 8002c16:	4323      	orrs	r3, r4
 8002c18:	0028      	movs	r0, r5
 8002c1a:	0019      	movs	r1, r3
 8002c1c:	bd70      	pop	{r4, r5, r6, pc}
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d114      	bne.n	8002c4c <__aeabi_f2d+0x5c>
 8002c22:	2d00      	cmp	r5, #0
 8002c24:	d01b      	beq.n	8002c5e <__aeabi_f2d+0x6e>
 8002c26:	0028      	movs	r0, r5
 8002c28:	f000 f8b2 	bl	8002d90 <__clzsi2>
 8002c2c:	280a      	cmp	r0, #10
 8002c2e:	dc1c      	bgt.n	8002c6a <__aeabi_f2d+0x7a>
 8002c30:	230b      	movs	r3, #11
 8002c32:	002a      	movs	r2, r5
 8002c34:	1a1b      	subs	r3, r3, r0
 8002c36:	40da      	lsrs	r2, r3
 8002c38:	0003      	movs	r3, r0
 8002c3a:	3315      	adds	r3, #21
 8002c3c:	409d      	lsls	r5, r3
 8002c3e:	4b0e      	ldr	r3, [pc, #56]	; (8002c78 <__aeabi_f2d+0x88>)
 8002c40:	0312      	lsls	r2, r2, #12
 8002c42:	1a1b      	subs	r3, r3, r0
 8002c44:	055b      	lsls	r3, r3, #21
 8002c46:	0b16      	lsrs	r6, r2, #12
 8002c48:	0d5b      	lsrs	r3, r3, #21
 8002c4a:	e7e1      	b.n	8002c10 <__aeabi_f2d+0x20>
 8002c4c:	2d00      	cmp	r5, #0
 8002c4e:	d009      	beq.n	8002c64 <__aeabi_f2d+0x74>
 8002c50:	0b32      	lsrs	r2, r6, #12
 8002c52:	2680      	movs	r6, #128	; 0x80
 8002c54:	0336      	lsls	r6, r6, #12
 8002c56:	4b09      	ldr	r3, [pc, #36]	; (8002c7c <__aeabi_f2d+0x8c>)
 8002c58:	076d      	lsls	r5, r5, #29
 8002c5a:	4316      	orrs	r6, r2
 8002c5c:	e7d8      	b.n	8002c10 <__aeabi_f2d+0x20>
 8002c5e:	2300      	movs	r3, #0
 8002c60:	2600      	movs	r6, #0
 8002c62:	e7d5      	b.n	8002c10 <__aeabi_f2d+0x20>
 8002c64:	2600      	movs	r6, #0
 8002c66:	4b05      	ldr	r3, [pc, #20]	; (8002c7c <__aeabi_f2d+0x8c>)
 8002c68:	e7d2      	b.n	8002c10 <__aeabi_f2d+0x20>
 8002c6a:	0003      	movs	r3, r0
 8002c6c:	002a      	movs	r2, r5
 8002c6e:	3b0b      	subs	r3, #11
 8002c70:	409a      	lsls	r2, r3
 8002c72:	2500      	movs	r5, #0
 8002c74:	e7e3      	b.n	8002c3e <__aeabi_f2d+0x4e>
 8002c76:	46c0      	nop			; (mov r8, r8)
 8002c78:	00000389 	.word	0x00000389
 8002c7c:	000007ff 	.word	0x000007ff

08002c80 <__aeabi_d2f>:
 8002c80:	0002      	movs	r2, r0
 8002c82:	004b      	lsls	r3, r1, #1
 8002c84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c86:	0308      	lsls	r0, r1, #12
 8002c88:	0d5b      	lsrs	r3, r3, #21
 8002c8a:	4e3d      	ldr	r6, [pc, #244]	; (8002d80 <__aeabi_d2f+0x100>)
 8002c8c:	0fcc      	lsrs	r4, r1, #31
 8002c8e:	0a40      	lsrs	r0, r0, #9
 8002c90:	0f51      	lsrs	r1, r2, #29
 8002c92:	1c5f      	adds	r7, r3, #1
 8002c94:	4308      	orrs	r0, r1
 8002c96:	00d5      	lsls	r5, r2, #3
 8002c98:	4237      	tst	r7, r6
 8002c9a:	d00a      	beq.n	8002cb2 <__aeabi_d2f+0x32>
 8002c9c:	4939      	ldr	r1, [pc, #228]	; (8002d84 <__aeabi_d2f+0x104>)
 8002c9e:	185e      	adds	r6, r3, r1
 8002ca0:	2efe      	cmp	r6, #254	; 0xfe
 8002ca2:	dd16      	ble.n	8002cd2 <__aeabi_d2f+0x52>
 8002ca4:	23ff      	movs	r3, #255	; 0xff
 8002ca6:	2100      	movs	r1, #0
 8002ca8:	05db      	lsls	r3, r3, #23
 8002caa:	430b      	orrs	r3, r1
 8002cac:	07e0      	lsls	r0, r4, #31
 8002cae:	4318      	orrs	r0, r3
 8002cb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d106      	bne.n	8002cc4 <__aeabi_d2f+0x44>
 8002cb6:	4328      	orrs	r0, r5
 8002cb8:	d027      	beq.n	8002d0a <__aeabi_d2f+0x8a>
 8002cba:	2105      	movs	r1, #5
 8002cbc:	0189      	lsls	r1, r1, #6
 8002cbe:	0a49      	lsrs	r1, r1, #9
 8002cc0:	b2db      	uxtb	r3, r3
 8002cc2:	e7f1      	b.n	8002ca8 <__aeabi_d2f+0x28>
 8002cc4:	4305      	orrs	r5, r0
 8002cc6:	d0ed      	beq.n	8002ca4 <__aeabi_d2f+0x24>
 8002cc8:	2180      	movs	r1, #128	; 0x80
 8002cca:	03c9      	lsls	r1, r1, #15
 8002ccc:	23ff      	movs	r3, #255	; 0xff
 8002cce:	4301      	orrs	r1, r0
 8002cd0:	e7ea      	b.n	8002ca8 <__aeabi_d2f+0x28>
 8002cd2:	2e00      	cmp	r6, #0
 8002cd4:	dd1c      	ble.n	8002d10 <__aeabi_d2f+0x90>
 8002cd6:	0192      	lsls	r2, r2, #6
 8002cd8:	0011      	movs	r1, r2
 8002cda:	1e4a      	subs	r2, r1, #1
 8002cdc:	4191      	sbcs	r1, r2
 8002cde:	00c0      	lsls	r0, r0, #3
 8002ce0:	0f6d      	lsrs	r5, r5, #29
 8002ce2:	4301      	orrs	r1, r0
 8002ce4:	4329      	orrs	r1, r5
 8002ce6:	074b      	lsls	r3, r1, #29
 8002ce8:	d048      	beq.n	8002d7c <__aeabi_d2f+0xfc>
 8002cea:	230f      	movs	r3, #15
 8002cec:	400b      	ands	r3, r1
 8002cee:	2b04      	cmp	r3, #4
 8002cf0:	d000      	beq.n	8002cf4 <__aeabi_d2f+0x74>
 8002cf2:	3104      	adds	r1, #4
 8002cf4:	2380      	movs	r3, #128	; 0x80
 8002cf6:	04db      	lsls	r3, r3, #19
 8002cf8:	400b      	ands	r3, r1
 8002cfa:	d03f      	beq.n	8002d7c <__aeabi_d2f+0xfc>
 8002cfc:	1c72      	adds	r2, r6, #1
 8002cfe:	2efe      	cmp	r6, #254	; 0xfe
 8002d00:	d0d0      	beq.n	8002ca4 <__aeabi_d2f+0x24>
 8002d02:	0189      	lsls	r1, r1, #6
 8002d04:	0a49      	lsrs	r1, r1, #9
 8002d06:	b2d3      	uxtb	r3, r2
 8002d08:	e7ce      	b.n	8002ca8 <__aeabi_d2f+0x28>
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	2100      	movs	r1, #0
 8002d0e:	e7cb      	b.n	8002ca8 <__aeabi_d2f+0x28>
 8002d10:	0032      	movs	r2, r6
 8002d12:	3217      	adds	r2, #23
 8002d14:	db22      	blt.n	8002d5c <__aeabi_d2f+0xdc>
 8002d16:	2180      	movs	r1, #128	; 0x80
 8002d18:	221e      	movs	r2, #30
 8002d1a:	0409      	lsls	r1, r1, #16
 8002d1c:	4308      	orrs	r0, r1
 8002d1e:	1b92      	subs	r2, r2, r6
 8002d20:	2a1f      	cmp	r2, #31
 8002d22:	dd1d      	ble.n	8002d60 <__aeabi_d2f+0xe0>
 8002d24:	2102      	movs	r1, #2
 8002d26:	4249      	negs	r1, r1
 8002d28:	1b8e      	subs	r6, r1, r6
 8002d2a:	0001      	movs	r1, r0
 8002d2c:	40f1      	lsrs	r1, r6
 8002d2e:	000e      	movs	r6, r1
 8002d30:	2a20      	cmp	r2, #32
 8002d32:	d004      	beq.n	8002d3e <__aeabi_d2f+0xbe>
 8002d34:	4a14      	ldr	r2, [pc, #80]	; (8002d88 <__aeabi_d2f+0x108>)
 8002d36:	4694      	mov	ip, r2
 8002d38:	4463      	add	r3, ip
 8002d3a:	4098      	lsls	r0, r3
 8002d3c:	4305      	orrs	r5, r0
 8002d3e:	0029      	movs	r1, r5
 8002d40:	1e4d      	subs	r5, r1, #1
 8002d42:	41a9      	sbcs	r1, r5
 8002d44:	4331      	orrs	r1, r6
 8002d46:	2600      	movs	r6, #0
 8002d48:	074b      	lsls	r3, r1, #29
 8002d4a:	d1ce      	bne.n	8002cea <__aeabi_d2f+0x6a>
 8002d4c:	2080      	movs	r0, #128	; 0x80
 8002d4e:	000b      	movs	r3, r1
 8002d50:	04c0      	lsls	r0, r0, #19
 8002d52:	2201      	movs	r2, #1
 8002d54:	4003      	ands	r3, r0
 8002d56:	4201      	tst	r1, r0
 8002d58:	d1d3      	bne.n	8002d02 <__aeabi_d2f+0x82>
 8002d5a:	e7af      	b.n	8002cbc <__aeabi_d2f+0x3c>
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	e7ac      	b.n	8002cba <__aeabi_d2f+0x3a>
 8002d60:	490a      	ldr	r1, [pc, #40]	; (8002d8c <__aeabi_d2f+0x10c>)
 8002d62:	468c      	mov	ip, r1
 8002d64:	0029      	movs	r1, r5
 8002d66:	4463      	add	r3, ip
 8002d68:	40d1      	lsrs	r1, r2
 8002d6a:	409d      	lsls	r5, r3
 8002d6c:	000a      	movs	r2, r1
 8002d6e:	0029      	movs	r1, r5
 8002d70:	4098      	lsls	r0, r3
 8002d72:	1e4d      	subs	r5, r1, #1
 8002d74:	41a9      	sbcs	r1, r5
 8002d76:	4301      	orrs	r1, r0
 8002d78:	4311      	orrs	r1, r2
 8002d7a:	e7e4      	b.n	8002d46 <__aeabi_d2f+0xc6>
 8002d7c:	0033      	movs	r3, r6
 8002d7e:	e79d      	b.n	8002cbc <__aeabi_d2f+0x3c>
 8002d80:	000007fe 	.word	0x000007fe
 8002d84:	fffffc80 	.word	0xfffffc80
 8002d88:	fffffca2 	.word	0xfffffca2
 8002d8c:	fffffc82 	.word	0xfffffc82

08002d90 <__clzsi2>:
 8002d90:	211c      	movs	r1, #28
 8002d92:	2301      	movs	r3, #1
 8002d94:	041b      	lsls	r3, r3, #16
 8002d96:	4298      	cmp	r0, r3
 8002d98:	d301      	bcc.n	8002d9e <__clzsi2+0xe>
 8002d9a:	0c00      	lsrs	r0, r0, #16
 8002d9c:	3910      	subs	r1, #16
 8002d9e:	0a1b      	lsrs	r3, r3, #8
 8002da0:	4298      	cmp	r0, r3
 8002da2:	d301      	bcc.n	8002da8 <__clzsi2+0x18>
 8002da4:	0a00      	lsrs	r0, r0, #8
 8002da6:	3908      	subs	r1, #8
 8002da8:	091b      	lsrs	r3, r3, #4
 8002daa:	4298      	cmp	r0, r3
 8002dac:	d301      	bcc.n	8002db2 <__clzsi2+0x22>
 8002dae:	0900      	lsrs	r0, r0, #4
 8002db0:	3904      	subs	r1, #4
 8002db2:	a202      	add	r2, pc, #8	; (adr r2, 8002dbc <__clzsi2+0x2c>)
 8002db4:	5c10      	ldrb	r0, [r2, r0]
 8002db6:	1840      	adds	r0, r0, r1
 8002db8:	4770      	bx	lr
 8002dba:	46c0      	nop			; (mov r8, r8)
 8002dbc:	02020304 	.word	0x02020304
 8002dc0:	01010101 	.word	0x01010101
	...

08002dcc <dSW_state>:
 *  Created on: Jul 3, 2021
 *      Author: seven
 */
#include "dSW.h"

int16_t dSW_state(void){
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b082      	sub	sp, #8
 8002dd0:	af00      	add	r7, sp, #0
	int16_t result = 0;
 8002dd2:	1dbb      	adds	r3, r7, #6
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	801a      	strh	r2, [r3, #0]

	result |= HAL_GPIO_ReadPin(dSW4_GPIO_Port,dSW4_Pin);
 8002dd8:	2380      	movs	r3, #128	; 0x80
 8002dda:	021a      	lsls	r2, r3, #8
 8002ddc:	2390      	movs	r3, #144	; 0x90
 8002dde:	05db      	lsls	r3, r3, #23
 8002de0:	0011      	movs	r1, r2
 8002de2:	0018      	movs	r0, r3
 8002de4:	f001 ff62 	bl	8004cac <HAL_GPIO_ReadPin>
 8002de8:	0003      	movs	r3, r0
 8002dea:	b219      	sxth	r1, r3
 8002dec:	1dbb      	adds	r3, r7, #6
 8002dee:	1dba      	adds	r2, r7, #6
 8002df0:	8812      	ldrh	r2, [r2, #0]
 8002df2:	430a      	orrs	r2, r1
 8002df4:	801a      	strh	r2, [r3, #0]
	result <<= 1;
 8002df6:	1dbb      	adds	r3, r7, #6
 8002df8:	2200      	movs	r2, #0
 8002dfa:	5e9b      	ldrsh	r3, [r3, r2]
 8002dfc:	005a      	lsls	r2, r3, #1
 8002dfe:	1dbb      	adds	r3, r7, #6
 8002e00:	801a      	strh	r2, [r3, #0]
	result |= HAL_GPIO_ReadPin(dSW3_GPIO_Port,dSW3_Pin);
 8002e02:	4b1b      	ldr	r3, [pc, #108]	; (8002e70 <dSW_state+0xa4>)
 8002e04:	2108      	movs	r1, #8
 8002e06:	0018      	movs	r0, r3
 8002e08:	f001 ff50 	bl	8004cac <HAL_GPIO_ReadPin>
 8002e0c:	0003      	movs	r3, r0
 8002e0e:	b219      	sxth	r1, r3
 8002e10:	1dbb      	adds	r3, r7, #6
 8002e12:	1dba      	adds	r2, r7, #6
 8002e14:	8812      	ldrh	r2, [r2, #0]
 8002e16:	430a      	orrs	r2, r1
 8002e18:	801a      	strh	r2, [r3, #0]
	result <<= 1;
 8002e1a:	1dbb      	adds	r3, r7, #6
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	5e9b      	ldrsh	r3, [r3, r2]
 8002e20:	005a      	lsls	r2, r3, #1
 8002e22:	1dbb      	adds	r3, r7, #6
 8002e24:	801a      	strh	r2, [r3, #0]
	result |= HAL_GPIO_ReadPin(dSW2_GPIO_Port,dSW2_Pin);
 8002e26:	4b12      	ldr	r3, [pc, #72]	; (8002e70 <dSW_state+0xa4>)
 8002e28:	2110      	movs	r1, #16
 8002e2a:	0018      	movs	r0, r3
 8002e2c:	f001 ff3e 	bl	8004cac <HAL_GPIO_ReadPin>
 8002e30:	0003      	movs	r3, r0
 8002e32:	b219      	sxth	r1, r3
 8002e34:	1dbb      	adds	r3, r7, #6
 8002e36:	1dba      	adds	r2, r7, #6
 8002e38:	8812      	ldrh	r2, [r2, #0]
 8002e3a:	430a      	orrs	r2, r1
 8002e3c:	801a      	strh	r2, [r3, #0]
	result <<= 1;
 8002e3e:	1dbb      	adds	r3, r7, #6
 8002e40:	2200      	movs	r2, #0
 8002e42:	5e9b      	ldrsh	r3, [r3, r2]
 8002e44:	005a      	lsls	r2, r3, #1
 8002e46:	1dbb      	adds	r3, r7, #6
 8002e48:	801a      	strh	r2, [r3, #0]
	result |= HAL_GPIO_ReadPin(dSW1_GPIO_Port,dSW1_Pin);
 8002e4a:	4b09      	ldr	r3, [pc, #36]	; (8002e70 <dSW_state+0xa4>)
 8002e4c:	2120      	movs	r1, #32
 8002e4e:	0018      	movs	r0, r3
 8002e50:	f001 ff2c 	bl	8004cac <HAL_GPIO_ReadPin>
 8002e54:	0003      	movs	r3, r0
 8002e56:	b219      	sxth	r1, r3
 8002e58:	1dbb      	adds	r3, r7, #6
 8002e5a:	1dba      	adds	r2, r7, #6
 8002e5c:	8812      	ldrh	r2, [r2, #0]
 8002e5e:	430a      	orrs	r2, r1
 8002e60:	801a      	strh	r2, [r3, #0]

	return result;
 8002e62:	1dbb      	adds	r3, r7, #6
 8002e64:	2200      	movs	r2, #0
 8002e66:	5e9b      	ldrsh	r3, [r3, r2]
}
 8002e68:	0018      	movs	r0, r3
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	b002      	add	sp, #8
 8002e6e:	bd80      	pop	{r7, pc}
 8002e70:	48000400 	.word	0x48000400

08002e74 <Set_inverter>:
 *      Author: seven
 */

#include "inverter.h"

void Set_inverter(m_carrier_t value, uint32_t max){
 8002e74:	b084      	sub	sp, #16
 8002e76:	b5b0      	push	{r4, r5, r7, lr}
 8002e78:	b084      	sub	sp, #16
 8002e7a:	af00      	add	r7, sp, #0
 8002e7c:	2520      	movs	r5, #32
 8002e7e:	197c      	adds	r4, r7, r5
 8002e80:	6020      	str	r0, [r4, #0]
 8002e82:	6061      	str	r1, [r4, #4]
 8002e84:	60a2      	str	r2, [r4, #8]
 8002e86:	60e3      	str	r3, [r4, #12]
	uint32_t u, v, w;

	u = (uint32_t)((value.Vu)*max/2) + max/2;
 8002e88:	197b      	adds	r3, r7, r5
 8002e8a:	681c      	ldr	r4, [r3, #0]
 8002e8c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002e8e:	f7fe f905 	bl	800109c <__aeabi_ui2f>
 8002e92:	1c03      	adds	r3, r0, #0
 8002e94:	1c19      	adds	r1, r3, #0
 8002e96:	1c20      	adds	r0, r4, #0
 8002e98:	f7fd fdb8 	bl	8000a0c <__aeabi_fmul>
 8002e9c:	1c03      	adds	r3, r0, #0
 8002e9e:	2180      	movs	r1, #128	; 0x80
 8002ea0:	05c9      	lsls	r1, r1, #23
 8002ea2:	1c18      	adds	r0, r3, #0
 8002ea4:	f7fd fbe8 	bl	8000678 <__aeabi_fdiv>
 8002ea8:	1c03      	adds	r3, r0, #0
 8002eaa:	1c18      	adds	r0, r3, #0
 8002eac:	f7fd fa30 	bl	8000310 <__aeabi_f2uiz>
 8002eb0:	0002      	movs	r2, r0
 8002eb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002eb4:	085b      	lsrs	r3, r3, #1
 8002eb6:	18d3      	adds	r3, r2, r3
 8002eb8:	60fb      	str	r3, [r7, #12]
	v = (uint32_t)((value.Vv)*max/2) + max/2;
 8002eba:	197b      	adds	r3, r7, r5
 8002ebc:	685c      	ldr	r4, [r3, #4]
 8002ebe:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002ec0:	f7fe f8ec 	bl	800109c <__aeabi_ui2f>
 8002ec4:	1c03      	adds	r3, r0, #0
 8002ec6:	1c19      	adds	r1, r3, #0
 8002ec8:	1c20      	adds	r0, r4, #0
 8002eca:	f7fd fd9f 	bl	8000a0c <__aeabi_fmul>
 8002ece:	1c03      	adds	r3, r0, #0
 8002ed0:	2180      	movs	r1, #128	; 0x80
 8002ed2:	05c9      	lsls	r1, r1, #23
 8002ed4:	1c18      	adds	r0, r3, #0
 8002ed6:	f7fd fbcf 	bl	8000678 <__aeabi_fdiv>
 8002eda:	1c03      	adds	r3, r0, #0
 8002edc:	1c18      	adds	r0, r3, #0
 8002ede:	f7fd fa17 	bl	8000310 <__aeabi_f2uiz>
 8002ee2:	0002      	movs	r2, r0
 8002ee4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ee6:	085b      	lsrs	r3, r3, #1
 8002ee8:	18d3      	adds	r3, r2, r3
 8002eea:	60bb      	str	r3, [r7, #8]
	w = (uint32_t)((value.Vw)*max/2) + max/2;
 8002eec:	197b      	adds	r3, r7, r5
 8002eee:	689c      	ldr	r4, [r3, #8]
 8002ef0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002ef2:	f7fe f8d3 	bl	800109c <__aeabi_ui2f>
 8002ef6:	1c03      	adds	r3, r0, #0
 8002ef8:	1c19      	adds	r1, r3, #0
 8002efa:	1c20      	adds	r0, r4, #0
 8002efc:	f7fd fd86 	bl	8000a0c <__aeabi_fmul>
 8002f00:	1c03      	adds	r3, r0, #0
 8002f02:	2180      	movs	r1, #128	; 0x80
 8002f04:	05c9      	lsls	r1, r1, #23
 8002f06:	1c18      	adds	r0, r3, #0
 8002f08:	f7fd fbb6 	bl	8000678 <__aeabi_fdiv>
 8002f0c:	1c03      	adds	r3, r0, #0
 8002f0e:	1c18      	adds	r0, r3, #0
 8002f10:	f7fd f9fe 	bl	8000310 <__aeabi_f2uiz>
 8002f14:	0002      	movs	r2, r0
 8002f16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f18:	085b      	lsrs	r3, r3, #1
 8002f1a:	18d3      	adds	r3, r2, r3
 8002f1c:	607b      	str	r3, [r7, #4]

/*	u = max*9/10;
	v = max*5/10;
	w = max*1/10;
*/
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, u);
 8002f1e:	4b09      	ldr	r3, [pc, #36]	; (8002f44 <Set_inverter+0xd0>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	68fa      	ldr	r2, [r7, #12]
 8002f24:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, v);
 8002f26:	4b07      	ldr	r3, [pc, #28]	; (8002f44 <Set_inverter+0xd0>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	68ba      	ldr	r2, [r7, #8]
 8002f2c:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, w);
 8002f2e:	4b05      	ldr	r3, [pc, #20]	; (8002f44 <Set_inverter+0xd0>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	687a      	ldr	r2, [r7, #4]
 8002f34:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002f36:	46c0      	nop			; (mov r8, r8)
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	b004      	add	sp, #16
 8002f3c:	bcb0      	pop	{r4, r5, r7}
 8002f3e:	bc08      	pop	{r3}
 8002f40:	b004      	add	sp, #16
 8002f42:	4718      	bx	r3
 8002f44:	200000a0 	.word	0x200000a0

08002f48 <LEDpwm_Init>:

#include "led.h"

static uint32_t g_st_period = 1000;

void LEDpwm_Init(TIM_HandleTypeDef htim){
 8002f48:	b084      	sub	sp, #16
 8002f4a:	b5b0      	push	{r4, r5, r7, lr}
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	250c      	movs	r5, #12
 8002f50:	1d3c      	adds	r4, r7, #4
 8002f52:	1964      	adds	r4, r4, r5
 8002f54:	6020      	str	r0, [r4, #0]
 8002f56:	6061      	str	r1, [r4, #4]
 8002f58:	60a2      	str	r2, [r4, #8]
 8002f5a:	60e3      	str	r3, [r4, #12]
	g_st_period = htim.Init.Period;
 8002f5c:	1d3b      	adds	r3, r7, #4
 8002f5e:	195b      	adds	r3, r3, r5
 8002f60:	68da      	ldr	r2, [r3, #12]
 8002f62:	4b04      	ldr	r3, [pc, #16]	; (8002f74 <LEDpwm_Init+0x2c>)
 8002f64:	601a      	str	r2, [r3, #0]
}
 8002f66:	46c0      	nop			; (mov r8, r8)
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bcb0      	pop	{r4, r5, r7}
 8002f6c:	bc08      	pop	{r3}
 8002f6e:	b004      	add	sp, #16
 8002f70:	4718      	bx	r3
 8002f72:	46c0      	nop			; (mov r8, r8)
 8002f74:	20000000 	.word	0x20000000

08002f78 <LED_pwm>:

void LED_pwm(uint32_t ledch, uint32_t pulse){
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b082      	sub	sp, #8
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
 8002f80:	6039      	str	r1, [r7, #0]
	pulse *= g_st_period/1000+1;
 8002f82:	4b16      	ldr	r3, [pc, #88]	; (8002fdc <LED_pwm+0x64>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	22fa      	movs	r2, #250	; 0xfa
 8002f88:	0091      	lsls	r1, r2, #2
 8002f8a:	0018      	movs	r0, r3
 8002f8c:	f7fd f8bc 	bl	8000108 <__udivsi3>
 8002f90:	0003      	movs	r3, r0
 8002f92:	1c5a      	adds	r2, r3, #1
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	4353      	muls	r3, r2
 8002f98:	603b      	str	r3, [r7, #0]
	__HAL_TIM_SET_COMPARE(&htim16, ledch, pulse);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d104      	bne.n	8002faa <LED_pwm+0x32>
 8002fa0:	4b0f      	ldr	r3, [pc, #60]	; (8002fe0 <LED_pwm+0x68>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	683a      	ldr	r2, [r7, #0]
 8002fa6:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002fa8:	e013      	b.n	8002fd2 <LED_pwm+0x5a>
	__HAL_TIM_SET_COMPARE(&htim16, ledch, pulse);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2b04      	cmp	r3, #4
 8002fae:	d104      	bne.n	8002fba <LED_pwm+0x42>
 8002fb0:	4b0b      	ldr	r3, [pc, #44]	; (8002fe0 <LED_pwm+0x68>)
 8002fb2:	681a      	ldr	r2, [r3, #0]
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002fb8:	e00b      	b.n	8002fd2 <LED_pwm+0x5a>
	__HAL_TIM_SET_COMPARE(&htim16, ledch, pulse);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2b08      	cmp	r3, #8
 8002fbe:	d104      	bne.n	8002fca <LED_pwm+0x52>
 8002fc0:	4b07      	ldr	r3, [pc, #28]	; (8002fe0 <LED_pwm+0x68>)
 8002fc2:	681a      	ldr	r2, [r3, #0]
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8002fc8:	e003      	b.n	8002fd2 <LED_pwm+0x5a>
	__HAL_TIM_SET_COMPARE(&htim16, ledch, pulse);
 8002fca:	4b05      	ldr	r3, [pc, #20]	; (8002fe0 <LED_pwm+0x68>)
 8002fcc:	681a      	ldr	r2, [r3, #0]
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	6413      	str	r3, [r2, #64]	; 0x40
}
 8002fd2:	46c0      	nop			; (mov r8, r8)
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	b002      	add	sp, #8
 8002fd8:	bd80      	pop	{r7, pc}
 8002fda:	46c0      	nop			; (mov r8, r8)
 8002fdc:	20000000 	.word	0x20000000
 8002fe0:	200001b4 	.word	0x200001b4

08002fe4 <User_Init>:
static void MX_TIM1_Init(void);
static void MX_TIM14_Init(void);
static void MX_I2C1_Init(void);
static void MX_TIM16_Init(void);
/* USER CODE BEGIN PFP */
void User_Init(void){
 8002fe4:	b590      	push	{r4, r7, lr}
 8002fe6:	b08f      	sub	sp, #60	; 0x3c
 8002fe8:	af0e      	add	r7, sp, #56	; 0x38
	/* timer */
	HAL_TIM_Base_Start_IT(&htim14);
 8002fea:	4b27      	ldr	r3, [pc, #156]	; (8003088 <User_Init+0xa4>)
 8002fec:	0018      	movs	r0, r3
 8002fee:	f002 fe4f 	bl	8005c90 <HAL_TIM_Base_Start_IT>
	/* ADC DMA */


	/* User LED PWM */
	HAL_TIM_Base_Start(&htim16);
 8002ff2:	4b26      	ldr	r3, [pc, #152]	; (800308c <User_Init+0xa8>)
 8002ff4:	0018      	movs	r0, r3
 8002ff6:	f002 fe07 	bl	8005c08 <HAL_TIM_Base_Start>
	if(HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1) != HAL_OK) Error_Handler();
 8002ffa:	4b24      	ldr	r3, [pc, #144]	; (800308c <User_Init+0xa8>)
 8002ffc:	2100      	movs	r1, #0
 8002ffe:	0018      	movs	r0, r3
 8003000:	f002 feea 	bl	8005dd8 <HAL_TIM_PWM_Start>
 8003004:	1e03      	subs	r3, r0, #0
 8003006:	d001      	beq.n	800300c <User_Init+0x28>
 8003008:	f000 fbee 	bl	80037e8 <Error_Handler>
	LEDpwm_Init(htim16);
 800300c:	4c1f      	ldr	r4, [pc, #124]	; (800308c <User_Init+0xa8>)
 800300e:	466b      	mov	r3, sp
 8003010:	0018      	movs	r0, r3
 8003012:	0023      	movs	r3, r4
 8003014:	3310      	adds	r3, #16
 8003016:	2238      	movs	r2, #56	; 0x38
 8003018:	0019      	movs	r1, r3
 800301a:	f003 fe5f 	bl	8006cdc <memcpy>
 800301e:	6820      	ldr	r0, [r4, #0]
 8003020:	6861      	ldr	r1, [r4, #4]
 8003022:	68a2      	ldr	r2, [r4, #8]
 8003024:	68e3      	ldr	r3, [r4, #12]
 8003026:	f7ff ff8f 	bl	8002f48 <LEDpwm_Init>

	/* motor PWM */
	//HAL_TIM_Base_Start(&htim1);
	HAL_TIM_Base_Start_IT(&htim1);
 800302a:	4b19      	ldr	r3, [pc, #100]	; (8003090 <User_Init+0xac>)
 800302c:	0018      	movs	r0, r3
 800302e:	f002 fe2f 	bl	8005c90 <HAL_TIM_Base_Start_IT>
	if(HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1) != HAL_OK) Error_Handler();
 8003032:	4b17      	ldr	r3, [pc, #92]	; (8003090 <User_Init+0xac>)
 8003034:	2100      	movs	r1, #0
 8003036:	0018      	movs	r0, r3
 8003038:	f002 fece 	bl	8005dd8 <HAL_TIM_PWM_Start>
 800303c:	1e03      	subs	r3, r0, #0
 800303e:	d001      	beq.n	8003044 <User_Init+0x60>
 8003040:	f000 fbd2 	bl	80037e8 <Error_Handler>
	if(HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_2) != HAL_OK) Error_Handler();
 8003044:	4b12      	ldr	r3, [pc, #72]	; (8003090 <User_Init+0xac>)
 8003046:	2104      	movs	r1, #4
 8003048:	0018      	movs	r0, r3
 800304a:	f002 fec5 	bl	8005dd8 <HAL_TIM_PWM_Start>
 800304e:	1e03      	subs	r3, r0, #0
 8003050:	d001      	beq.n	8003056 <User_Init+0x72>
 8003052:	f000 fbc9 	bl	80037e8 <Error_Handler>
	if(HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_3) != HAL_OK) Error_Handler();
 8003056:	4b0e      	ldr	r3, [pc, #56]	; (8003090 <User_Init+0xac>)
 8003058:	2108      	movs	r1, #8
 800305a:	0018      	movs	r0, r3
 800305c:	f002 febc 	bl	8005dd8 <HAL_TIM_PWM_Start>
 8003060:	1e03      	subs	r3, r0, #0
 8003062:	d001      	beq.n	8003068 <User_Init+0x84>
 8003064:	f000 fbc0 	bl	80037e8 <Error_Handler>

	HAL_Delay(1000);
 8003068:	23fa      	movs	r3, #250	; 0xfa
 800306a:	009b      	lsls	r3, r3, #2
 800306c:	0018      	movs	r0, r3
 800306e:	f001 f85f 	bl	8004130 <HAL_Delay>

	g_pi_val.ki = 0;
 8003072:	4b08      	ldr	r3, [pc, #32]	; (8003094 <User_Init+0xb0>)
 8003074:	2200      	movs	r2, #0
 8003076:	80da      	strh	r2, [r3, #6]
	g_pi_val.kp = 10;
 8003078:	4b06      	ldr	r3, [pc, #24]	; (8003094 <User_Init+0xb0>)
 800307a:	220a      	movs	r2, #10
 800307c:	809a      	strh	r2, [r3, #4]
}
 800307e:	46c0      	nop			; (mov r8, r8)
 8003080:	46bd      	mov	sp, r7
 8003082:	b001      	add	sp, #4
 8003084:	bd90      	pop	{r4, r7, pc}
 8003086:	46c0      	nop			; (mov r8, r8)
 8003088:	200000e8 	.word	0x200000e8
 800308c:	200001b4 	.word	0x200001b4
 8003090:	200000a0 	.word	0x200000a0
 8003094:	20000048 	.word	0x20000048

08003098 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003098:	b590      	push	{r4, r7, lr}
 800309a:	b083      	sub	sp, #12
 800309c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	int raw = 0;
 800309e:	2300      	movs	r3, #0
 80030a0:	607b      	str	r3, [r7, #4]
	int16_t dSW = 0;
 80030a2:	1cbb      	adds	r3, r7, #2
 80030a4:	2200      	movs	r2, #0
 80030a6:	801a      	strh	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80030a8:	f000 ffde 	bl	8004068 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80030ac:	f000 f870 	bl	8003190 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80030b0:	f000 fb0a 	bl	80036c8 <MX_GPIO_Init>
  MX_DMA_Init();
 80030b4:	f000 faea 	bl	800368c <MX_DMA_Init>
  MX_ADC_Init();
 80030b8:	f000 f8d8 	bl	800326c <MX_ADC_Init>
  MX_TIM1_Init();
 80030bc:	f000 f970 	bl	80033a0 <MX_TIM1_Init>
  MX_TIM14_Init();
 80030c0:	f000 fa3a 	bl	8003538 <MX_TIM14_Init>
  MX_I2C1_Init();
 80030c4:	f000 f92c 	bl	8003320 <MX_I2C1_Init>
  MX_TIM16_Init();
 80030c8:	f000 fa5a 	bl	8003580 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
  User_Init();
 80030cc:	f7ff ff8a 	bl	8002fe4 <User_Init>
  /* USER CODE BEGIN WHILE */
  while (1){
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(g_tim14_cnt >= cntl_cyc){
 80030d0:	4b2c      	ldr	r3, [pc, #176]	; (8003184 <main+0xec>)
 80030d2:	881b      	ldrh	r3, [r3, #0]
 80030d4:	2b63      	cmp	r3, #99	; 0x63
 80030d6:	d911      	bls.n	80030fc <main+0x64>
		  //raw = def_AS5600_Read_Raw;
		  raw += 10;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	330a      	adds	r3, #10
 80030dc:	607b      	str	r3, [r7, #4]
		  LED1PWM(raw);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	0019      	movs	r1, r3
 80030e2:	2000      	movs	r0, #0
 80030e4:	f7ff ff48 	bl	8002f78 <LED_pwm>
		  //raw += 10;
		  if(raw >= 1000){
 80030e8:	687a      	ldr	r2, [r7, #4]
 80030ea:	23fa      	movs	r3, #250	; 0xfa
 80030ec:	009b      	lsls	r3, r3, #2
 80030ee:	429a      	cmp	r2, r3
 80030f0:	db01      	blt.n	80030f6 <main+0x5e>
			  raw = 0;
 80030f2:	2300      	movs	r3, #0
 80030f4:	607b      	str	r3, [r7, #4]
		  }
		  g_tim14_cnt = 0;
 80030f6:	4b23      	ldr	r3, [pc, #140]	; (8003184 <main+0xec>)
 80030f8:	2200      	movs	r2, #0
 80030fa:	801a      	strh	r2, [r3, #0]
	  }
/* for debug */
	  if(g_dSW_cnt >= 5000){ 	//500ms
 80030fc:	4b22      	ldr	r3, [pc, #136]	; (8003188 <main+0xf0>)
 80030fe:	881b      	ldrh	r3, [r3, #0]
 8003100:	4a22      	ldr	r2, [pc, #136]	; (800318c <main+0xf4>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d9e4      	bls.n	80030d0 <main+0x38>
		  dSW = dSW_state();
 8003106:	1cbc      	adds	r4, r7, #2
 8003108:	f7ff fe60 	bl	8002dcc <dSW_state>
 800310c:	0003      	movs	r3, r0
 800310e:	8023      	strh	r3, [r4, #0]

		  switch(dSW){
 8003110:	1cbb      	adds	r3, r7, #2
 8003112:	2200      	movs	r2, #0
 8003114:	5e9b      	ldrsh	r3, [r3, r2]
 8003116:	2b04      	cmp	r3, #4
 8003118:	d020      	beq.n	800315c <main+0xc4>
 800311a:	dc27      	bgt.n	800316c <main+0xd4>
 800311c:	2b02      	cmp	r3, #2
 800311e:	d015      	beq.n	800314c <main+0xb4>
 8003120:	dc24      	bgt.n	800316c <main+0xd4>
 8003122:	2b00      	cmp	r3, #0
 8003124:	d002      	beq.n	800312c <main+0x94>
 8003126:	2b01      	cmp	r3, #1
 8003128:	d008      	beq.n	800313c <main+0xa4>
 800312a:	e01f      	b.n	800316c <main+0xd4>
		  	  case 0:
		  		  MD_EN_OFF;
 800312c:	2390      	movs	r3, #144	; 0x90
 800312e:	05db      	lsls	r3, r3, #23
 8003130:	2200      	movs	r2, #0
 8003132:	2120      	movs	r1, #32
 8003134:	0018      	movs	r0, r3
 8003136:	f001 fdd6 	bl	8004ce6 <HAL_GPIO_WritePin>
		  	  	  break;
 800313a:	e01f      	b.n	800317c <main+0xe4>
		  	  case 1:
		  		  MD_EN_ON;
 800313c:	2390      	movs	r3, #144	; 0x90
 800313e:	05db      	lsls	r3, r3, #23
 8003140:	2201      	movs	r2, #1
 8003142:	2120      	movs	r1, #32
 8003144:	0018      	movs	r0, r3
 8003146:	f001 fdce 	bl	8004ce6 <HAL_GPIO_WritePin>
		  		  break;
 800314a:	e017      	b.n	800317c <main+0xe4>
		  	  case 2:
		  		  MD_EN_OFF;
 800314c:	2390      	movs	r3, #144	; 0x90
 800314e:	05db      	lsls	r3, r3, #23
 8003150:	2200      	movs	r2, #0
 8003152:	2120      	movs	r1, #32
 8003154:	0018      	movs	r0, r3
 8003156:	f001 fdc6 	bl	8004ce6 <HAL_GPIO_WritePin>
				  break;
 800315a:	e00f      	b.n	800317c <main+0xe4>
			  case 4:
				  MD_EN_OFF;
 800315c:	2390      	movs	r3, #144	; 0x90
 800315e:	05db      	lsls	r3, r3, #23
 8003160:	2200      	movs	r2, #0
 8003162:	2120      	movs	r1, #32
 8003164:	0018      	movs	r0, r3
 8003166:	f001 fdbe 	bl	8004ce6 <HAL_GPIO_WritePin>
				  break;
 800316a:	e007      	b.n	800317c <main+0xe4>
			  default:
				  MD_EN_OFF;
 800316c:	2390      	movs	r3, #144	; 0x90
 800316e:	05db      	lsls	r3, r3, #23
 8003170:	2200      	movs	r2, #0
 8003172:	2120      	movs	r1, #32
 8003174:	0018      	movs	r0, r3
 8003176:	f001 fdb6 	bl	8004ce6 <HAL_GPIO_WritePin>
				  break;
 800317a:	46c0      	nop			; (mov r8, r8)
		  }
		  g_dSW_cnt = 0;
 800317c:	4b02      	ldr	r3, [pc, #8]	; (8003188 <main+0xf0>)
 800317e:	2200      	movs	r2, #0
 8003180:	801a      	strh	r2, [r3, #0]
	  if(g_tim14_cnt >= cntl_cyc){
 8003182:	e7a5      	b.n	80030d0 <main+0x38>
 8003184:	2000002c 	.word	0x2000002c
 8003188:	20000052 	.word	0x20000052
 800318c:	00001387 	.word	0x00001387

08003190 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003190:	b590      	push	{r4, r7, lr}
 8003192:	b099      	sub	sp, #100	; 0x64
 8003194:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003196:	242c      	movs	r4, #44	; 0x2c
 8003198:	193b      	adds	r3, r7, r4
 800319a:	0018      	movs	r0, r3
 800319c:	2334      	movs	r3, #52	; 0x34
 800319e:	001a      	movs	r2, r3
 80031a0:	2100      	movs	r1, #0
 80031a2:	f003 fda4 	bl	8006cee <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80031a6:	231c      	movs	r3, #28
 80031a8:	18fb      	adds	r3, r7, r3
 80031aa:	0018      	movs	r0, r3
 80031ac:	2310      	movs	r3, #16
 80031ae:	001a      	movs	r2, r3
 80031b0:	2100      	movs	r1, #0
 80031b2:	f003 fd9c 	bl	8006cee <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80031b6:	1d3b      	adds	r3, r7, #4
 80031b8:	0018      	movs	r0, r3
 80031ba:	2318      	movs	r3, #24
 80031bc:	001a      	movs	r2, r3
 80031be:	2100      	movs	r1, #0
 80031c0:	f003 fd95 	bl	8006cee <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14
 80031c4:	0021      	movs	r1, r4
 80031c6:	187b      	adds	r3, r7, r1
 80031c8:	2213      	movs	r2, #19
 80031ca:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80031cc:	187b      	adds	r3, r7, r1
 80031ce:	2201      	movs	r2, #1
 80031d0:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80031d2:	187b      	adds	r3, r7, r1
 80031d4:	2201      	movs	r2, #1
 80031d6:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 80031d8:	187b      	adds	r3, r7, r1
 80031da:	2201      	movs	r2, #1
 80031dc:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80031de:	187b      	adds	r3, r7, r1
 80031e0:	2210      	movs	r2, #16
 80031e2:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 80031e4:	187b      	adds	r3, r7, r1
 80031e6:	2210      	movs	r2, #16
 80031e8:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80031ea:	187b      	adds	r3, r7, r1
 80031ec:	2202      	movs	r2, #2
 80031ee:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80031f0:	187b      	adds	r3, r7, r1
 80031f2:	2280      	movs	r2, #128	; 0x80
 80031f4:	0252      	lsls	r2, r2, #9
 80031f6:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80031f8:	187b      	adds	r3, r7, r1
 80031fa:	22a0      	movs	r2, #160	; 0xa0
 80031fc:	0392      	lsls	r2, r2, #14
 80031fe:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV2;
 8003200:	187b      	adds	r3, r7, r1
 8003202:	2201      	movs	r2, #1
 8003204:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003206:	187b      	adds	r3, r7, r1
 8003208:	0018      	movs	r0, r3
 800320a:	f001 feb7 	bl	8004f7c <HAL_RCC_OscConfig>
 800320e:	1e03      	subs	r3, r0, #0
 8003210:	d001      	beq.n	8003216 <SystemClock_Config+0x86>
  {
    Error_Handler();
 8003212:	f000 fae9 	bl	80037e8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003216:	211c      	movs	r1, #28
 8003218:	187b      	adds	r3, r7, r1
 800321a:	2207      	movs	r2, #7
 800321c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800321e:	187b      	adds	r3, r7, r1
 8003220:	2202      	movs	r2, #2
 8003222:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003224:	187b      	adds	r3, r7, r1
 8003226:	2200      	movs	r2, #0
 8003228:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800322a:	187b      	adds	r3, r7, r1
 800322c:	2200      	movs	r2, #0
 800322e:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8003230:	187b      	adds	r3, r7, r1
 8003232:	2101      	movs	r1, #1
 8003234:	0018      	movs	r0, r3
 8003236:	f002 fa27 	bl	8005688 <HAL_RCC_ClockConfig>
 800323a:	1e03      	subs	r3, r0, #0
 800323c:	d001      	beq.n	8003242 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800323e:	f000 fad3 	bl	80037e8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8003242:	1d3b      	adds	r3, r7, #4
 8003244:	2220      	movs	r2, #32
 8003246:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8003248:	1d3b      	adds	r3, r7, #4
 800324a:	2200      	movs	r2, #0
 800324c:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800324e:	1d3b      	adds	r3, r7, #4
 8003250:	0018      	movs	r0, r3
 8003252:	f002 fb9b 	bl	800598c <HAL_RCCEx_PeriphCLKConfig>
 8003256:	1e03      	subs	r3, r0, #0
 8003258:	d001      	beq.n	800325e <SystemClock_Config+0xce>
  {
    Error_Handler();
 800325a:	f000 fac5 	bl	80037e8 <Error_Handler>
  }
  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 800325e:	f002 faed 	bl	800583c <HAL_RCC_EnableCSS>
}
 8003262:	46c0      	nop			; (mov r8, r8)
 8003264:	46bd      	mov	sp, r7
 8003266:	b019      	add	sp, #100	; 0x64
 8003268:	bd90      	pop	{r4, r7, pc}
	...

0800326c <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b084      	sub	sp, #16
 8003270:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003272:	1d3b      	adds	r3, r7, #4
 8003274:	0018      	movs	r0, r3
 8003276:	230c      	movs	r3, #12
 8003278:	001a      	movs	r2, r3
 800327a:	2100      	movs	r1, #0
 800327c:	f003 fd37 	bl	8006cee <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8003280:	4b25      	ldr	r3, [pc, #148]	; (8003318 <MX_ADC_Init+0xac>)
 8003282:	4a26      	ldr	r2, [pc, #152]	; (800331c <MX_ADC_Init+0xb0>)
 8003284:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8003286:	4b24      	ldr	r3, [pc, #144]	; (8003318 <MX_ADC_Init+0xac>)
 8003288:	2200      	movs	r2, #0
 800328a:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 800328c:	4b22      	ldr	r3, [pc, #136]	; (8003318 <MX_ADC_Init+0xac>)
 800328e:	2200      	movs	r2, #0
 8003290:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003292:	4b21      	ldr	r3, [pc, #132]	; (8003318 <MX_ADC_Init+0xac>)
 8003294:	2200      	movs	r2, #0
 8003296:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8003298:	4b1f      	ldr	r3, [pc, #124]	; (8003318 <MX_ADC_Init+0xac>)
 800329a:	2201      	movs	r2, #1
 800329c:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800329e:	4b1e      	ldr	r3, [pc, #120]	; (8003318 <MX_ADC_Init+0xac>)
 80032a0:	2204      	movs	r2, #4
 80032a2:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 80032a4:	4b1c      	ldr	r3, [pc, #112]	; (8003318 <MX_ADC_Init+0xac>)
 80032a6:	2200      	movs	r2, #0
 80032a8:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80032aa:	4b1b      	ldr	r3, [pc, #108]	; (8003318 <MX_ADC_Init+0xac>)
 80032ac:	2200      	movs	r2, #0
 80032ae:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = ENABLE;
 80032b0:	4b19      	ldr	r3, [pc, #100]	; (8003318 <MX_ADC_Init+0xac>)
 80032b2:	2201      	movs	r2, #1
 80032b4:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80032b6:	4b18      	ldr	r3, [pc, #96]	; (8003318 <MX_ADC_Init+0xac>)
 80032b8:	2200      	movs	r2, #0
 80032ba:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80032bc:	4b16      	ldr	r3, [pc, #88]	; (8003318 <MX_ADC_Init+0xac>)
 80032be:	22c2      	movs	r2, #194	; 0xc2
 80032c0:	32ff      	adds	r2, #255	; 0xff
 80032c2:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80032c4:	4b14      	ldr	r3, [pc, #80]	; (8003318 <MX_ADC_Init+0xac>)
 80032c6:	2200      	movs	r2, #0
 80032c8:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = ENABLE;
 80032ca:	4b13      	ldr	r3, [pc, #76]	; (8003318 <MX_ADC_Init+0xac>)
 80032cc:	2224      	movs	r2, #36	; 0x24
 80032ce:	2101      	movs	r1, #1
 80032d0:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80032d2:	4b11      	ldr	r3, [pc, #68]	; (8003318 <MX_ADC_Init+0xac>)
 80032d4:	2201      	movs	r2, #1
 80032d6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80032d8:	4b0f      	ldr	r3, [pc, #60]	; (8003318 <MX_ADC_Init+0xac>)
 80032da:	0018      	movs	r0, r3
 80032dc:	f000 ff4c 	bl	8004178 <HAL_ADC_Init>
 80032e0:	1e03      	subs	r3, r0, #0
 80032e2:	d001      	beq.n	80032e8 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 80032e4:	f000 fa80 	bl	80037e8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80032e8:	1d3b      	adds	r3, r7, #4
 80032ea:	2208      	movs	r2, #8
 80032ec:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80032ee:	1d3b      	adds	r3, r7, #4
 80032f0:	2280      	movs	r2, #128	; 0x80
 80032f2:	0152      	lsls	r2, r2, #5
 80032f4:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 80032f6:	1d3b      	adds	r3, r7, #4
 80032f8:	2202      	movs	r2, #2
 80032fa:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80032fc:	1d3a      	adds	r2, r7, #4
 80032fe:	4b06      	ldr	r3, [pc, #24]	; (8003318 <MX_ADC_Init+0xac>)
 8003300:	0011      	movs	r1, r2
 8003302:	0018      	movs	r0, r3
 8003304:	f001 f878 	bl	80043f8 <HAL_ADC_ConfigChannel>
 8003308:	1e03      	subs	r3, r0, #0
 800330a:	d001      	beq.n	8003310 <MX_ADC_Init+0xa4>
  {
    Error_Handler();
 800330c:	f000 fa6c 	bl	80037e8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8003310:	46c0      	nop			; (mov r8, r8)
 8003312:	46bd      	mov	sp, r7
 8003314:	b004      	add	sp, #16
 8003316:	bd80      	pop	{r7, pc}
 8003318:	20000174 	.word	0x20000174
 800331c:	40012400 	.word	0x40012400

08003320 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003324:	4b1b      	ldr	r3, [pc, #108]	; (8003394 <MX_I2C1_Init+0x74>)
 8003326:	4a1c      	ldr	r2, [pc, #112]	; (8003398 <MX_I2C1_Init+0x78>)
 8003328:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 800332a:	4b1a      	ldr	r3, [pc, #104]	; (8003394 <MX_I2C1_Init+0x74>)
 800332c:	4a1b      	ldr	r2, [pc, #108]	; (800339c <MX_I2C1_Init+0x7c>)
 800332e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8003330:	4b18      	ldr	r3, [pc, #96]	; (8003394 <MX_I2C1_Init+0x74>)
 8003332:	2200      	movs	r2, #0
 8003334:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003336:	4b17      	ldr	r3, [pc, #92]	; (8003394 <MX_I2C1_Init+0x74>)
 8003338:	2201      	movs	r2, #1
 800333a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800333c:	4b15      	ldr	r3, [pc, #84]	; (8003394 <MX_I2C1_Init+0x74>)
 800333e:	2200      	movs	r2, #0
 8003340:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8003342:	4b14      	ldr	r3, [pc, #80]	; (8003394 <MX_I2C1_Init+0x74>)
 8003344:	2200      	movs	r2, #0
 8003346:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003348:	4b12      	ldr	r3, [pc, #72]	; (8003394 <MX_I2C1_Init+0x74>)
 800334a:	2200      	movs	r2, #0
 800334c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800334e:	4b11      	ldr	r3, [pc, #68]	; (8003394 <MX_I2C1_Init+0x74>)
 8003350:	2200      	movs	r2, #0
 8003352:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003354:	4b0f      	ldr	r3, [pc, #60]	; (8003394 <MX_I2C1_Init+0x74>)
 8003356:	2200      	movs	r2, #0
 8003358:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800335a:	4b0e      	ldr	r3, [pc, #56]	; (8003394 <MX_I2C1_Init+0x74>)
 800335c:	0018      	movs	r0, r3
 800335e:	f001 fcdf 	bl	8004d20 <HAL_I2C_Init>
 8003362:	1e03      	subs	r3, r0, #0
 8003364:	d001      	beq.n	800336a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8003366:	f000 fa3f 	bl	80037e8 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800336a:	4b0a      	ldr	r3, [pc, #40]	; (8003394 <MX_I2C1_Init+0x74>)
 800336c:	2100      	movs	r1, #0
 800336e:	0018      	movs	r0, r3
 8003370:	f001 fd6c 	bl	8004e4c <HAL_I2CEx_ConfigAnalogFilter>
 8003374:	1e03      	subs	r3, r0, #0
 8003376:	d001      	beq.n	800337c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8003378:	f000 fa36 	bl	80037e8 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800337c:	4b05      	ldr	r3, [pc, #20]	; (8003394 <MX_I2C1_Init+0x74>)
 800337e:	2100      	movs	r1, #0
 8003380:	0018      	movs	r0, r3
 8003382:	f001 fdaf 	bl	8004ee4 <HAL_I2CEx_ConfigDigitalFilter>
 8003386:	1e03      	subs	r3, r0, #0
 8003388:	d001      	beq.n	800338e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800338a:	f000 fa2d 	bl	80037e8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800338e:	46c0      	nop			; (mov r8, r8)
 8003390:	46bd      	mov	sp, r7
 8003392:	bd80      	pop	{r7, pc}
 8003394:	20000054 	.word	0x20000054
 8003398:	40005400 	.word	0x40005400
 800339c:	2000090e 	.word	0x2000090e

080033a0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b096      	sub	sp, #88	; 0x58
 80033a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80033a6:	2348      	movs	r3, #72	; 0x48
 80033a8:	18fb      	adds	r3, r7, r3
 80033aa:	0018      	movs	r0, r3
 80033ac:	2310      	movs	r3, #16
 80033ae:	001a      	movs	r2, r3
 80033b0:	2100      	movs	r1, #0
 80033b2:	f003 fc9c 	bl	8006cee <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80033b6:	2340      	movs	r3, #64	; 0x40
 80033b8:	18fb      	adds	r3, r7, r3
 80033ba:	0018      	movs	r0, r3
 80033bc:	2308      	movs	r3, #8
 80033be:	001a      	movs	r2, r3
 80033c0:	2100      	movs	r1, #0
 80033c2:	f003 fc94 	bl	8006cee <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80033c6:	2324      	movs	r3, #36	; 0x24
 80033c8:	18fb      	adds	r3, r7, r3
 80033ca:	0018      	movs	r0, r3
 80033cc:	231c      	movs	r3, #28
 80033ce:	001a      	movs	r2, r3
 80033d0:	2100      	movs	r1, #0
 80033d2:	f003 fc8c 	bl	8006cee <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80033d6:	1d3b      	adds	r3, r7, #4
 80033d8:	0018      	movs	r0, r3
 80033da:	2320      	movs	r3, #32
 80033dc:	001a      	movs	r2, r3
 80033de:	2100      	movs	r1, #0
 80033e0:	f003 fc85 	bl	8006cee <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80033e4:	4b51      	ldr	r3, [pc, #324]	; (800352c <MX_TIM1_Init+0x18c>)
 80033e6:	4a52      	ldr	r2, [pc, #328]	; (8003530 <MX_TIM1_Init+0x190>)
 80033e8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80033ea:	4b50      	ldr	r3, [pc, #320]	; (800352c <MX_TIM1_Init+0x18c>)
 80033ec:	2200      	movs	r2, #0
 80033ee:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 80033f0:	4b4e      	ldr	r3, [pc, #312]	; (800352c <MX_TIM1_Init+0x18c>)
 80033f2:	2220      	movs	r2, #32
 80033f4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2400-1;
 80033f6:	4b4d      	ldr	r3, [pc, #308]	; (800352c <MX_TIM1_Init+0x18c>)
 80033f8:	4a4e      	ldr	r2, [pc, #312]	; (8003534 <MX_TIM1_Init+0x194>)
 80033fa:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80033fc:	4b4b      	ldr	r3, [pc, #300]	; (800352c <MX_TIM1_Init+0x18c>)
 80033fe:	2200      	movs	r2, #0
 8003400:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003402:	4b4a      	ldr	r3, [pc, #296]	; (800352c <MX_TIM1_Init+0x18c>)
 8003404:	2200      	movs	r2, #0
 8003406:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003408:	4b48      	ldr	r3, [pc, #288]	; (800352c <MX_TIM1_Init+0x18c>)
 800340a:	2200      	movs	r2, #0
 800340c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800340e:	4b47      	ldr	r3, [pc, #284]	; (800352c <MX_TIM1_Init+0x18c>)
 8003410:	0018      	movs	r0, r3
 8003412:	f002 fba9 	bl	8005b68 <HAL_TIM_Base_Init>
 8003416:	1e03      	subs	r3, r0, #0
 8003418:	d001      	beq.n	800341e <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 800341a:	f000 f9e5 	bl	80037e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800341e:	2148      	movs	r1, #72	; 0x48
 8003420:	187b      	adds	r3, r7, r1
 8003422:	2280      	movs	r2, #128	; 0x80
 8003424:	0152      	lsls	r2, r2, #5
 8003426:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003428:	187a      	adds	r2, r7, r1
 800342a:	4b40      	ldr	r3, [pc, #256]	; (800352c <MX_TIM1_Init+0x18c>)
 800342c:	0011      	movs	r1, r2
 800342e:	0018      	movs	r0, r3
 8003430:	f002 ff5a 	bl	80062e8 <HAL_TIM_ConfigClockSource>
 8003434:	1e03      	subs	r3, r0, #0
 8003436:	d001      	beq.n	800343c <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8003438:	f000 f9d6 	bl	80037e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800343c:	4b3b      	ldr	r3, [pc, #236]	; (800352c <MX_TIM1_Init+0x18c>)
 800343e:	0018      	movs	r0, r3
 8003440:	f002 fc72 	bl	8005d28 <HAL_TIM_PWM_Init>
 8003444:	1e03      	subs	r3, r0, #0
 8003446:	d001      	beq.n	800344c <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 8003448:	f000 f9ce 	bl	80037e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800344c:	2140      	movs	r1, #64	; 0x40
 800344e:	187b      	adds	r3, r7, r1
 8003450:	2200      	movs	r2, #0
 8003452:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003454:	187b      	adds	r3, r7, r1
 8003456:	2200      	movs	r2, #0
 8003458:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800345a:	187a      	adds	r2, r7, r1
 800345c:	4b33      	ldr	r3, [pc, #204]	; (800352c <MX_TIM1_Init+0x18c>)
 800345e:	0011      	movs	r1, r2
 8003460:	0018      	movs	r0, r3
 8003462:	f003 fb51 	bl	8006b08 <HAL_TIMEx_MasterConfigSynchronization>
 8003466:	1e03      	subs	r3, r0, #0
 8003468:	d001      	beq.n	800346e <MX_TIM1_Init+0xce>
  {
    Error_Handler();
 800346a:	f000 f9bd 	bl	80037e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800346e:	2124      	movs	r1, #36	; 0x24
 8003470:	187b      	adds	r3, r7, r1
 8003472:	2260      	movs	r2, #96	; 0x60
 8003474:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8003476:	187b      	adds	r3, r7, r1
 8003478:	2200      	movs	r2, #0
 800347a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800347c:	187b      	adds	r3, r7, r1
 800347e:	2200      	movs	r2, #0
 8003480:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003482:	187b      	adds	r3, r7, r1
 8003484:	2200      	movs	r2, #0
 8003486:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003488:	187b      	adds	r3, r7, r1
 800348a:	2200      	movs	r2, #0
 800348c:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800348e:	187b      	adds	r3, r7, r1
 8003490:	2200      	movs	r2, #0
 8003492:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003494:	187b      	adds	r3, r7, r1
 8003496:	2200      	movs	r2, #0
 8003498:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800349a:	1879      	adds	r1, r7, r1
 800349c:	4b23      	ldr	r3, [pc, #140]	; (800352c <MX_TIM1_Init+0x18c>)
 800349e:	2200      	movs	r2, #0
 80034a0:	0018      	movs	r0, r3
 80034a2:	f002 fe5b 	bl	800615c <HAL_TIM_PWM_ConfigChannel>
 80034a6:	1e03      	subs	r3, r0, #0
 80034a8:	d001      	beq.n	80034ae <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 80034aa:	f000 f99d 	bl	80037e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80034ae:	2324      	movs	r3, #36	; 0x24
 80034b0:	18f9      	adds	r1, r7, r3
 80034b2:	4b1e      	ldr	r3, [pc, #120]	; (800352c <MX_TIM1_Init+0x18c>)
 80034b4:	2204      	movs	r2, #4
 80034b6:	0018      	movs	r0, r3
 80034b8:	f002 fe50 	bl	800615c <HAL_TIM_PWM_ConfigChannel>
 80034bc:	1e03      	subs	r3, r0, #0
 80034be:	d001      	beq.n	80034c4 <MX_TIM1_Init+0x124>
  {
    Error_Handler();
 80034c0:	f000 f992 	bl	80037e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80034c4:	2324      	movs	r3, #36	; 0x24
 80034c6:	18f9      	adds	r1, r7, r3
 80034c8:	4b18      	ldr	r3, [pc, #96]	; (800352c <MX_TIM1_Init+0x18c>)
 80034ca:	2208      	movs	r2, #8
 80034cc:	0018      	movs	r0, r3
 80034ce:	f002 fe45 	bl	800615c <HAL_TIM_PWM_ConfigChannel>
 80034d2:	1e03      	subs	r3, r0, #0
 80034d4:	d001      	beq.n	80034da <MX_TIM1_Init+0x13a>
  {
    Error_Handler();
 80034d6:	f000 f987 	bl	80037e8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80034da:	1d3b      	adds	r3, r7, #4
 80034dc:	2200      	movs	r2, #0
 80034de:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80034e0:	1d3b      	adds	r3, r7, #4
 80034e2:	2200      	movs	r2, #0
 80034e4:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80034e6:	1d3b      	adds	r3, r7, #4
 80034e8:	2200      	movs	r2, #0
 80034ea:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80034ec:	1d3b      	adds	r3, r7, #4
 80034ee:	2200      	movs	r2, #0
 80034f0:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80034f2:	1d3b      	adds	r3, r7, #4
 80034f4:	2200      	movs	r2, #0
 80034f6:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80034f8:	1d3b      	adds	r3, r7, #4
 80034fa:	2280      	movs	r2, #128	; 0x80
 80034fc:	0192      	lsls	r2, r2, #6
 80034fe:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003500:	1d3b      	adds	r3, r7, #4
 8003502:	2200      	movs	r2, #0
 8003504:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003506:	1d3a      	adds	r2, r7, #4
 8003508:	4b08      	ldr	r3, [pc, #32]	; (800352c <MX_TIM1_Init+0x18c>)
 800350a:	0011      	movs	r1, r2
 800350c:	0018      	movs	r0, r3
 800350e:	f003 fb53 	bl	8006bb8 <HAL_TIMEx_ConfigBreakDeadTime>
 8003512:	1e03      	subs	r3, r0, #0
 8003514:	d001      	beq.n	800351a <MX_TIM1_Init+0x17a>
  {
    Error_Handler();
 8003516:	f000 f967 	bl	80037e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800351a:	4b04      	ldr	r3, [pc, #16]	; (800352c <MX_TIM1_Init+0x18c>)
 800351c:	0018      	movs	r0, r3
 800351e:	f000 fc69 	bl	8003df4 <HAL_TIM_MspPostInit>

}
 8003522:	46c0      	nop			; (mov r8, r8)
 8003524:	46bd      	mov	sp, r7
 8003526:	b016      	add	sp, #88	; 0x58
 8003528:	bd80      	pop	{r7, pc}
 800352a:	46c0      	nop			; (mov r8, r8)
 800352c:	200000a0 	.word	0x200000a0
 8003530:	40012c00 	.word	0x40012c00
 8003534:	0000095f 	.word	0x0000095f

08003538 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 800353c:	4b0e      	ldr	r3, [pc, #56]	; (8003578 <MX_TIM14_Init+0x40>)
 800353e:	4a0f      	ldr	r2, [pc, #60]	; (800357c <MX_TIM14_Init+0x44>)
 8003540:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 47;
 8003542:	4b0d      	ldr	r3, [pc, #52]	; (8003578 <MX_TIM14_Init+0x40>)
 8003544:	222f      	movs	r2, #47	; 0x2f
 8003546:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003548:	4b0b      	ldr	r3, [pc, #44]	; (8003578 <MX_TIM14_Init+0x40>)
 800354a:	2200      	movs	r2, #0
 800354c:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 99;
 800354e:	4b0a      	ldr	r3, [pc, #40]	; (8003578 <MX_TIM14_Init+0x40>)
 8003550:	2263      	movs	r2, #99	; 0x63
 8003552:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003554:	4b08      	ldr	r3, [pc, #32]	; (8003578 <MX_TIM14_Init+0x40>)
 8003556:	2200      	movs	r2, #0
 8003558:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800355a:	4b07      	ldr	r3, [pc, #28]	; (8003578 <MX_TIM14_Init+0x40>)
 800355c:	2200      	movs	r2, #0
 800355e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8003560:	4b05      	ldr	r3, [pc, #20]	; (8003578 <MX_TIM14_Init+0x40>)
 8003562:	0018      	movs	r0, r3
 8003564:	f002 fb00 	bl	8005b68 <HAL_TIM_Base_Init>
 8003568:	1e03      	subs	r3, r0, #0
 800356a:	d001      	beq.n	8003570 <MX_TIM14_Init+0x38>
  {
    Error_Handler();
 800356c:	f000 f93c 	bl	80037e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8003570:	46c0      	nop			; (mov r8, r8)
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}
 8003576:	46c0      	nop			; (mov r8, r8)
 8003578:	200000e8 	.word	0x200000e8
 800357c:	40002000 	.word	0x40002000

08003580 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b090      	sub	sp, #64	; 0x40
 8003584:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8003586:	2324      	movs	r3, #36	; 0x24
 8003588:	18fb      	adds	r3, r7, r3
 800358a:	0018      	movs	r0, r3
 800358c:	231c      	movs	r3, #28
 800358e:	001a      	movs	r2, r3
 8003590:	2100      	movs	r1, #0
 8003592:	f003 fbac 	bl	8006cee <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003596:	1d3b      	adds	r3, r7, #4
 8003598:	0018      	movs	r0, r3
 800359a:	2320      	movs	r3, #32
 800359c:	001a      	movs	r2, r3
 800359e:	2100      	movs	r1, #0
 80035a0:	f003 fba5 	bl	8006cee <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80035a4:	4b36      	ldr	r3, [pc, #216]	; (8003680 <MX_TIM16_Init+0x100>)
 80035a6:	4a37      	ldr	r2, [pc, #220]	; (8003684 <MX_TIM16_Init+0x104>)
 80035a8:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 80035aa:	4b35      	ldr	r3, [pc, #212]	; (8003680 <MX_TIM16_Init+0x100>)
 80035ac:	2200      	movs	r2, #0
 80035ae:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80035b0:	4b33      	ldr	r3, [pc, #204]	; (8003680 <MX_TIM16_Init+0x100>)
 80035b2:	2200      	movs	r2, #0
 80035b4:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 80035b6:	4b32      	ldr	r3, [pc, #200]	; (8003680 <MX_TIM16_Init+0x100>)
 80035b8:	4a33      	ldr	r2, [pc, #204]	; (8003688 <MX_TIM16_Init+0x108>)
 80035ba:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80035bc:	4b30      	ldr	r3, [pc, #192]	; (8003680 <MX_TIM16_Init+0x100>)
 80035be:	2200      	movs	r2, #0
 80035c0:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80035c2:	4b2f      	ldr	r3, [pc, #188]	; (8003680 <MX_TIM16_Init+0x100>)
 80035c4:	2200      	movs	r2, #0
 80035c6:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80035c8:	4b2d      	ldr	r3, [pc, #180]	; (8003680 <MX_TIM16_Init+0x100>)
 80035ca:	2200      	movs	r2, #0
 80035cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80035ce:	4b2c      	ldr	r3, [pc, #176]	; (8003680 <MX_TIM16_Init+0x100>)
 80035d0:	0018      	movs	r0, r3
 80035d2:	f002 fac9 	bl	8005b68 <HAL_TIM_Base_Init>
 80035d6:	1e03      	subs	r3, r0, #0
 80035d8:	d001      	beq.n	80035de <MX_TIM16_Init+0x5e>
  {
    Error_Handler();
 80035da:	f000 f905 	bl	80037e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 80035de:	4b28      	ldr	r3, [pc, #160]	; (8003680 <MX_TIM16_Init+0x100>)
 80035e0:	0018      	movs	r0, r3
 80035e2:	f002 fba1 	bl	8005d28 <HAL_TIM_PWM_Init>
 80035e6:	1e03      	subs	r3, r0, #0
 80035e8:	d001      	beq.n	80035ee <MX_TIM16_Init+0x6e>
  {
    Error_Handler();
 80035ea:	f000 f8fd 	bl	80037e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80035ee:	2124      	movs	r1, #36	; 0x24
 80035f0:	187b      	adds	r3, r7, r1
 80035f2:	2260      	movs	r2, #96	; 0x60
 80035f4:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80035f6:	187b      	adds	r3, r7, r1
 80035f8:	2200      	movs	r2, #0
 80035fa:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80035fc:	187b      	adds	r3, r7, r1
 80035fe:	2200      	movs	r2, #0
 8003600:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003602:	187b      	adds	r3, r7, r1
 8003604:	2200      	movs	r2, #0
 8003606:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003608:	187b      	adds	r3, r7, r1
 800360a:	2200      	movs	r2, #0
 800360c:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800360e:	187b      	adds	r3, r7, r1
 8003610:	2200      	movs	r2, #0
 8003612:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003614:	187b      	adds	r3, r7, r1
 8003616:	2200      	movs	r2, #0
 8003618:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800361a:	1879      	adds	r1, r7, r1
 800361c:	4b18      	ldr	r3, [pc, #96]	; (8003680 <MX_TIM16_Init+0x100>)
 800361e:	2200      	movs	r2, #0
 8003620:	0018      	movs	r0, r3
 8003622:	f002 fd9b 	bl	800615c <HAL_TIM_PWM_ConfigChannel>
 8003626:	1e03      	subs	r3, r0, #0
 8003628:	d001      	beq.n	800362e <MX_TIM16_Init+0xae>
  {
    Error_Handler();
 800362a:	f000 f8dd 	bl	80037e8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800362e:	1d3b      	adds	r3, r7, #4
 8003630:	2200      	movs	r2, #0
 8003632:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003634:	1d3b      	adds	r3, r7, #4
 8003636:	2200      	movs	r2, #0
 8003638:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800363a:	1d3b      	adds	r3, r7, #4
 800363c:	2200      	movs	r2, #0
 800363e:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003640:	1d3b      	adds	r3, r7, #4
 8003642:	2200      	movs	r2, #0
 8003644:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003646:	1d3b      	adds	r3, r7, #4
 8003648:	2200      	movs	r2, #0
 800364a:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800364c:	1d3b      	adds	r3, r7, #4
 800364e:	2280      	movs	r2, #128	; 0x80
 8003650:	0192      	lsls	r2, r2, #6
 8003652:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003654:	1d3b      	adds	r3, r7, #4
 8003656:	2200      	movs	r2, #0
 8003658:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 800365a:	1d3a      	adds	r2, r7, #4
 800365c:	4b08      	ldr	r3, [pc, #32]	; (8003680 <MX_TIM16_Init+0x100>)
 800365e:	0011      	movs	r1, r2
 8003660:	0018      	movs	r0, r3
 8003662:	f003 faa9 	bl	8006bb8 <HAL_TIMEx_ConfigBreakDeadTime>
 8003666:	1e03      	subs	r3, r0, #0
 8003668:	d001      	beq.n	800366e <MX_TIM16_Init+0xee>
  {
    Error_Handler();
 800366a:	f000 f8bd 	bl	80037e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 800366e:	4b04      	ldr	r3, [pc, #16]	; (8003680 <MX_TIM16_Init+0x100>)
 8003670:	0018      	movs	r0, r3
 8003672:	f000 fbbf 	bl	8003df4 <HAL_TIM_MspPostInit>

}
 8003676:	46c0      	nop			; (mov r8, r8)
 8003678:	46bd      	mov	sp, r7
 800367a:	b010      	add	sp, #64	; 0x40
 800367c:	bd80      	pop	{r7, pc}
 800367e:	46c0      	nop			; (mov r8, r8)
 8003680:	200001b4 	.word	0x200001b4
 8003684:	40014400 	.word	0x40014400
 8003688:	0000ffff 	.word	0x0000ffff

0800368c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b082      	sub	sp, #8
 8003690:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003692:	4b0c      	ldr	r3, [pc, #48]	; (80036c4 <MX_DMA_Init+0x38>)
 8003694:	695a      	ldr	r2, [r3, #20]
 8003696:	4b0b      	ldr	r3, [pc, #44]	; (80036c4 <MX_DMA_Init+0x38>)
 8003698:	2101      	movs	r1, #1
 800369a:	430a      	orrs	r2, r1
 800369c:	615a      	str	r2, [r3, #20]
 800369e:	4b09      	ldr	r3, [pc, #36]	; (80036c4 <MX_DMA_Init+0x38>)
 80036a0:	695b      	ldr	r3, [r3, #20]
 80036a2:	2201      	movs	r2, #1
 80036a4:	4013      	ands	r3, r2
 80036a6:	607b      	str	r3, [r7, #4]
 80036a8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80036aa:	2200      	movs	r2, #0
 80036ac:	2100      	movs	r1, #0
 80036ae:	2009      	movs	r0, #9
 80036b0:	f001 f85c 	bl	800476c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80036b4:	2009      	movs	r0, #9
 80036b6:	f001 f86e 	bl	8004796 <HAL_NVIC_EnableIRQ>

}
 80036ba:	46c0      	nop			; (mov r8, r8)
 80036bc:	46bd      	mov	sp, r7
 80036be:	b002      	add	sp, #8
 80036c0:	bd80      	pop	{r7, pc}
 80036c2:	46c0      	nop			; (mov r8, r8)
 80036c4:	40021000 	.word	0x40021000

080036c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80036c8:	b590      	push	{r4, r7, lr}
 80036ca:	b089      	sub	sp, #36	; 0x24
 80036cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036ce:	240c      	movs	r4, #12
 80036d0:	193b      	adds	r3, r7, r4
 80036d2:	0018      	movs	r0, r3
 80036d4:	2314      	movs	r3, #20
 80036d6:	001a      	movs	r2, r3
 80036d8:	2100      	movs	r1, #0
 80036da:	f003 fb08 	bl	8006cee <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80036de:	4b40      	ldr	r3, [pc, #256]	; (80037e0 <MX_GPIO_Init+0x118>)
 80036e0:	695a      	ldr	r2, [r3, #20]
 80036e2:	4b3f      	ldr	r3, [pc, #252]	; (80037e0 <MX_GPIO_Init+0x118>)
 80036e4:	2180      	movs	r1, #128	; 0x80
 80036e6:	03c9      	lsls	r1, r1, #15
 80036e8:	430a      	orrs	r2, r1
 80036ea:	615a      	str	r2, [r3, #20]
 80036ec:	4b3c      	ldr	r3, [pc, #240]	; (80037e0 <MX_GPIO_Init+0x118>)
 80036ee:	695a      	ldr	r2, [r3, #20]
 80036f0:	2380      	movs	r3, #128	; 0x80
 80036f2:	03db      	lsls	r3, r3, #15
 80036f4:	4013      	ands	r3, r2
 80036f6:	60bb      	str	r3, [r7, #8]
 80036f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80036fa:	4b39      	ldr	r3, [pc, #228]	; (80037e0 <MX_GPIO_Init+0x118>)
 80036fc:	695a      	ldr	r2, [r3, #20]
 80036fe:	4b38      	ldr	r3, [pc, #224]	; (80037e0 <MX_GPIO_Init+0x118>)
 8003700:	2180      	movs	r1, #128	; 0x80
 8003702:	0289      	lsls	r1, r1, #10
 8003704:	430a      	orrs	r2, r1
 8003706:	615a      	str	r2, [r3, #20]
 8003708:	4b35      	ldr	r3, [pc, #212]	; (80037e0 <MX_GPIO_Init+0x118>)
 800370a:	695a      	ldr	r2, [r3, #20]
 800370c:	2380      	movs	r3, #128	; 0x80
 800370e:	029b      	lsls	r3, r3, #10
 8003710:	4013      	ands	r3, r2
 8003712:	607b      	str	r3, [r7, #4]
 8003714:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003716:	4b32      	ldr	r3, [pc, #200]	; (80037e0 <MX_GPIO_Init+0x118>)
 8003718:	695a      	ldr	r2, [r3, #20]
 800371a:	4b31      	ldr	r3, [pc, #196]	; (80037e0 <MX_GPIO_Init+0x118>)
 800371c:	2180      	movs	r1, #128	; 0x80
 800371e:	02c9      	lsls	r1, r1, #11
 8003720:	430a      	orrs	r2, r1
 8003722:	615a      	str	r2, [r3, #20]
 8003724:	4b2e      	ldr	r3, [pc, #184]	; (80037e0 <MX_GPIO_Init+0x118>)
 8003726:	695a      	ldr	r2, [r3, #20]
 8003728:	2380      	movs	r3, #128	; 0x80
 800372a:	02db      	lsls	r3, r3, #11
 800372c:	4013      	ands	r3, r2
 800372e:	603b      	str	r3, [r7, #0]
 8003730:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MD_EN_GPIO_Port, MD_EN_Pin, GPIO_PIN_RESET);
 8003732:	2390      	movs	r3, #144	; 0x90
 8003734:	05db      	lsls	r3, r3, #23
 8003736:	2200      	movs	r2, #0
 8003738:	2120      	movs	r1, #32
 800373a:	0018      	movs	r0, r3
 800373c:	f001 fad3 	bl	8004ce6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : MD_EN_Pin */
  GPIO_InitStruct.Pin = MD_EN_Pin;
 8003740:	193b      	adds	r3, r7, r4
 8003742:	2220      	movs	r2, #32
 8003744:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003746:	193b      	adds	r3, r7, r4
 8003748:	2201      	movs	r2, #1
 800374a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800374c:	193b      	adds	r3, r7, r4
 800374e:	2202      	movs	r2, #2
 8003750:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003752:	193b      	adds	r3, r7, r4
 8003754:	2200      	movs	r2, #0
 8003756:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(MD_EN_GPIO_Port, &GPIO_InitStruct);
 8003758:	193a      	adds	r2, r7, r4
 800375a:	2390      	movs	r3, #144	; 0x90
 800375c:	05db      	lsls	r3, r3, #23
 800375e:	0011      	movs	r1, r2
 8003760:	0018      	movs	r0, r3
 8003762:	f001 f93b 	bl	80049dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8003766:	0021      	movs	r1, r4
 8003768:	187b      	adds	r3, r7, r1
 800376a:	22c0      	movs	r2, #192	; 0xc0
 800376c:	0152      	lsls	r2, r2, #5
 800376e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003770:	000c      	movs	r4, r1
 8003772:	193b      	adds	r3, r7, r4
 8003774:	2202      	movs	r2, #2
 8003776:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003778:	193b      	adds	r3, r7, r4
 800377a:	2200      	movs	r2, #0
 800377c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800377e:	193b      	adds	r3, r7, r4
 8003780:	2203      	movs	r2, #3
 8003782:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF4_CAN;
 8003784:	193b      	adds	r3, r7, r4
 8003786:	2204      	movs	r2, #4
 8003788:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800378a:	193a      	adds	r2, r7, r4
 800378c:	2390      	movs	r3, #144	; 0x90
 800378e:	05db      	lsls	r3, r3, #23
 8003790:	0011      	movs	r1, r2
 8003792:	0018      	movs	r0, r3
 8003794:	f001 f922 	bl	80049dc <HAL_GPIO_Init>

  /*Configure GPIO pin : dSW4_Pin */
  GPIO_InitStruct.Pin = dSW4_Pin;
 8003798:	193b      	adds	r3, r7, r4
 800379a:	2280      	movs	r2, #128	; 0x80
 800379c:	0212      	lsls	r2, r2, #8
 800379e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80037a0:	193b      	adds	r3, r7, r4
 80037a2:	2200      	movs	r2, #0
 80037a4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80037a6:	193b      	adds	r3, r7, r4
 80037a8:	2201      	movs	r2, #1
 80037aa:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(dSW4_GPIO_Port, &GPIO_InitStruct);
 80037ac:	193a      	adds	r2, r7, r4
 80037ae:	2390      	movs	r3, #144	; 0x90
 80037b0:	05db      	lsls	r3, r3, #23
 80037b2:	0011      	movs	r1, r2
 80037b4:	0018      	movs	r0, r3
 80037b6:	f001 f911 	bl	80049dc <HAL_GPIO_Init>

  /*Configure GPIO pins : dSW3_Pin dSW2_Pin dSW1_Pin */
  GPIO_InitStruct.Pin = dSW3_Pin|dSW2_Pin|dSW1_Pin;
 80037ba:	193b      	adds	r3, r7, r4
 80037bc:	2238      	movs	r2, #56	; 0x38
 80037be:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80037c0:	193b      	adds	r3, r7, r4
 80037c2:	2200      	movs	r2, #0
 80037c4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80037c6:	193b      	adds	r3, r7, r4
 80037c8:	2201      	movs	r2, #1
 80037ca:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037cc:	193b      	adds	r3, r7, r4
 80037ce:	4a05      	ldr	r2, [pc, #20]	; (80037e4 <MX_GPIO_Init+0x11c>)
 80037d0:	0019      	movs	r1, r3
 80037d2:	0010      	movs	r0, r2
 80037d4:	f001 f902 	bl	80049dc <HAL_GPIO_Init>

}
 80037d8:	46c0      	nop			; (mov r8, r8)
 80037da:	46bd      	mov	sp, r7
 80037dc:	b009      	add	sp, #36	; 0x24
 80037de:	bd90      	pop	{r4, r7, pc}
 80037e0:	40021000 	.word	0x40021000
 80037e4:	48000400 	.word	0x48000400

080037e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80037ec:	46c0      	nop			; (mov r8, r8)
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}
	...

080037f4 <my_sin>:
 */

#include "mylib.h"
#include "stdint.h"

float my_sin(float x){
 80037f4:	b5b0      	push	{r4, r5, r7, lr}
 80037f6:	b086      	sub	sp, #24
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
	float result = x, t = x;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	617b      	str	r3, [r7, #20]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	613b      	str	r3, [r7, #16]
	int8_t i = 0;
 8003804:	210f      	movs	r1, #15
 8003806:	187b      	adds	r3, r7, r1
 8003808:	2200      	movs	r2, #0
 800380a:	701a      	strb	r2, [r3, #0]

	for(i=1;i<11;i++){
 800380c:	187b      	adds	r3, r7, r1
 800380e:	2201      	movs	r2, #1
 8003810:	701a      	strb	r2, [r3, #0]
 8003812:	e031      	b.n	8003878 <my_sin+0x84>
		t *= -(x*x)/((i*2)*(i*2 + 1));
 8003814:	6879      	ldr	r1, [r7, #4]
 8003816:	6878      	ldr	r0, [r7, #4]
 8003818:	f7fd f8f8 	bl	8000a0c <__aeabi_fmul>
 800381c:	1c03      	adds	r3, r0, #0
 800381e:	1c1a      	adds	r2, r3, #0
 8003820:	2380      	movs	r3, #128	; 0x80
 8003822:	061b      	lsls	r3, r3, #24
 8003824:	4053      	eors	r3, r2
 8003826:	001c      	movs	r4, r3
 8003828:	250f      	movs	r5, #15
 800382a:	197b      	adds	r3, r7, r5
 800382c:	781b      	ldrb	r3, [r3, #0]
 800382e:	b25b      	sxtb	r3, r3
 8003830:	197a      	adds	r2, r7, r5
 8003832:	7812      	ldrb	r2, [r2, #0]
 8003834:	b252      	sxtb	r2, r2
 8003836:	0052      	lsls	r2, r2, #1
 8003838:	3201      	adds	r2, #1
 800383a:	4353      	muls	r3, r2
 800383c:	005b      	lsls	r3, r3, #1
 800383e:	0018      	movs	r0, r3
 8003840:	f7fd fbe6 	bl	8001010 <__aeabi_i2f>
 8003844:	1c03      	adds	r3, r0, #0
 8003846:	1c19      	adds	r1, r3, #0
 8003848:	1c20      	adds	r0, r4, #0
 800384a:	f7fc ff15 	bl	8000678 <__aeabi_fdiv>
 800384e:	1c03      	adds	r3, r0, #0
 8003850:	1c19      	adds	r1, r3, #0
 8003852:	6938      	ldr	r0, [r7, #16]
 8003854:	f7fd f8da 	bl	8000a0c <__aeabi_fmul>
 8003858:	1c03      	adds	r3, r0, #0
 800385a:	613b      	str	r3, [r7, #16]
		result += t;
 800385c:	6939      	ldr	r1, [r7, #16]
 800385e:	6978      	ldr	r0, [r7, #20]
 8003860:	f7fc fd6e 	bl	8000340 <__aeabi_fadd>
 8003864:	1c03      	adds	r3, r0, #0
 8003866:	617b      	str	r3, [r7, #20]
	for(i=1;i<11;i++){
 8003868:	197b      	adds	r3, r7, r5
 800386a:	781b      	ldrb	r3, [r3, #0]
 800386c:	b25b      	sxtb	r3, r3
 800386e:	b2db      	uxtb	r3, r3
 8003870:	3301      	adds	r3, #1
 8003872:	b2da      	uxtb	r2, r3
 8003874:	197b      	adds	r3, r7, r5
 8003876:	701a      	strb	r2, [r3, #0]
 8003878:	230f      	movs	r3, #15
 800387a:	18fb      	adds	r3, r7, r3
 800387c:	781b      	ldrb	r3, [r3, #0]
 800387e:	b25b      	sxtb	r3, r3
 8003880:	2b0a      	cmp	r3, #10
 8003882:	ddc7      	ble.n	8003814 <my_sin+0x20>
	}
	if(result>1) result = 1;
 8003884:	21fe      	movs	r1, #254	; 0xfe
 8003886:	0589      	lsls	r1, r1, #22
 8003888:	6978      	ldr	r0, [r7, #20]
 800388a:	f7fc fd2d 	bl	80002e8 <__aeabi_fcmpgt>
 800388e:	1e03      	subs	r3, r0, #0
 8003890:	d003      	beq.n	800389a <my_sin+0xa6>
 8003892:	23fe      	movs	r3, #254	; 0xfe
 8003894:	059b      	lsls	r3, r3, #22
 8003896:	617b      	str	r3, [r7, #20]
 8003898:	e007      	b.n	80038aa <my_sin+0xb6>
	else if(result<-1) result = -1;
 800389a:	4906      	ldr	r1, [pc, #24]	; (80038b4 <my_sin+0xc0>)
 800389c:	6978      	ldr	r0, [r7, #20]
 800389e:	f7fc fd0f 	bl	80002c0 <__aeabi_fcmplt>
 80038a2:	1e03      	subs	r3, r0, #0
 80038a4:	d001      	beq.n	80038aa <my_sin+0xb6>
 80038a6:	4b03      	ldr	r3, [pc, #12]	; (80038b4 <my_sin+0xc0>)
 80038a8:	617b      	str	r3, [r7, #20]
	else;
	return result;
 80038aa:	697b      	ldr	r3, [r7, #20]
}
 80038ac:	1c18      	adds	r0, r3, #0
 80038ae:	46bd      	mov	sp, r7
 80038b0:	b006      	add	sp, #24
 80038b2:	bdb0      	pop	{r4, r5, r7, pc}
 80038b4:	bf800000 	.word	0xbf800000

080038b8 <my_cos>:

float my_cos(float x){		// -PI =< x =< PI
 80038b8:	b590      	push	{r4, r7, lr}
 80038ba:	b087      	sub	sp, #28
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
	float result = 1, t = 1;
 80038c0:	23fe      	movs	r3, #254	; 0xfe
 80038c2:	059b      	lsls	r3, r3, #22
 80038c4:	617b      	str	r3, [r7, #20]
 80038c6:	23fe      	movs	r3, #254	; 0xfe
 80038c8:	059b      	lsls	r3, r3, #22
 80038ca:	613b      	str	r3, [r7, #16]
	int i = 0;
 80038cc:	2300      	movs	r3, #0
 80038ce:	60fb      	str	r3, [r7, #12]

	if(x >= PI){
 80038d0:	6878      	ldr	r0, [r7, #4]
 80038d2:	f7ff f98d 	bl	8002bf0 <__aeabi_f2d>
 80038d6:	4a2d      	ldr	r2, [pc, #180]	; (800398c <my_cos+0xd4>)
 80038d8:	4b2d      	ldr	r3, [pc, #180]	; (8003990 <my_cos+0xd8>)
 80038da:	f7fc fcd5 	bl	8000288 <__aeabi_dcmpge>
 80038de:	1e03      	subs	r3, r0, #0
 80038e0:	d00e      	beq.n	8003900 <my_cos+0x48>
		x -= TWOPI;
 80038e2:	6878      	ldr	r0, [r7, #4]
 80038e4:	f7ff f984 	bl	8002bf0 <__aeabi_f2d>
 80038e8:	4a28      	ldr	r2, [pc, #160]	; (800398c <my_cos+0xd4>)
 80038ea:	4b2a      	ldr	r3, [pc, #168]	; (8003994 <my_cos+0xdc>)
 80038ec:	f7fe fdee 	bl	80024cc <__aeabi_dsub>
 80038f0:	0002      	movs	r2, r0
 80038f2:	000b      	movs	r3, r1
 80038f4:	0010      	movs	r0, r2
 80038f6:	0019      	movs	r1, r3
 80038f8:	f7ff f9c2 	bl	8002c80 <__aeabi_d2f>
 80038fc:	1c03      	adds	r3, r0, #0
 80038fe:	607b      	str	r3, [r7, #4]
	}

	for(i=1;i<11;i++){
 8003900:	2301      	movs	r3, #1
 8003902:	60fb      	str	r3, [r7, #12]
 8003904:	e027      	b.n	8003956 <my_cos+0x9e>
		t *= -(x*x)/((i*2)*(i*2 - 1));
 8003906:	6879      	ldr	r1, [r7, #4]
 8003908:	6878      	ldr	r0, [r7, #4]
 800390a:	f7fd f87f 	bl	8000a0c <__aeabi_fmul>
 800390e:	1c03      	adds	r3, r0, #0
 8003910:	1c1a      	adds	r2, r3, #0
 8003912:	2380      	movs	r3, #128	; 0x80
 8003914:	061b      	lsls	r3, r3, #24
 8003916:	4053      	eors	r3, r2
 8003918:	001c      	movs	r4, r3
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	005b      	lsls	r3, r3, #1
 800391e:	3b01      	subs	r3, #1
 8003920:	68fa      	ldr	r2, [r7, #12]
 8003922:	4353      	muls	r3, r2
 8003924:	005b      	lsls	r3, r3, #1
 8003926:	0018      	movs	r0, r3
 8003928:	f7fd fb72 	bl	8001010 <__aeabi_i2f>
 800392c:	1c03      	adds	r3, r0, #0
 800392e:	1c19      	adds	r1, r3, #0
 8003930:	1c20      	adds	r0, r4, #0
 8003932:	f7fc fea1 	bl	8000678 <__aeabi_fdiv>
 8003936:	1c03      	adds	r3, r0, #0
 8003938:	1c19      	adds	r1, r3, #0
 800393a:	6938      	ldr	r0, [r7, #16]
 800393c:	f7fd f866 	bl	8000a0c <__aeabi_fmul>
 8003940:	1c03      	adds	r3, r0, #0
 8003942:	613b      	str	r3, [r7, #16]
		result += t;
 8003944:	6939      	ldr	r1, [r7, #16]
 8003946:	6978      	ldr	r0, [r7, #20]
 8003948:	f7fc fcfa 	bl	8000340 <__aeabi_fadd>
 800394c:	1c03      	adds	r3, r0, #0
 800394e:	617b      	str	r3, [r7, #20]
	for(i=1;i<11;i++){
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	3301      	adds	r3, #1
 8003954:	60fb      	str	r3, [r7, #12]
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	2b0a      	cmp	r3, #10
 800395a:	ddd4      	ble.n	8003906 <my_cos+0x4e>
	}

	if(result>1) result = 1;
 800395c:	21fe      	movs	r1, #254	; 0xfe
 800395e:	0589      	lsls	r1, r1, #22
 8003960:	6978      	ldr	r0, [r7, #20]
 8003962:	f7fc fcc1 	bl	80002e8 <__aeabi_fcmpgt>
 8003966:	1e03      	subs	r3, r0, #0
 8003968:	d003      	beq.n	8003972 <my_cos+0xba>
 800396a:	23fe      	movs	r3, #254	; 0xfe
 800396c:	059b      	lsls	r3, r3, #22
 800396e:	617b      	str	r3, [r7, #20]
 8003970:	e007      	b.n	8003982 <my_cos+0xca>
	else if(result<-1) result = -1;
 8003972:	4909      	ldr	r1, [pc, #36]	; (8003998 <my_cos+0xe0>)
 8003974:	6978      	ldr	r0, [r7, #20]
 8003976:	f7fc fca3 	bl	80002c0 <__aeabi_fcmplt>
 800397a:	1e03      	subs	r3, r0, #0
 800397c:	d001      	beq.n	8003982 <my_cos+0xca>
 800397e:	4b06      	ldr	r3, [pc, #24]	; (8003998 <my_cos+0xe0>)
 8003980:	617b      	str	r3, [r7, #20]
	else;
	return result;
 8003982:	697b      	ldr	r3, [r7, #20]
}
 8003984:	1c18      	adds	r0, r3, #0
 8003986:	46bd      	mov	sp, r7
 8003988:	b007      	add	sp, #28
 800398a:	bd90      	pop	{r4, r7, pc}
 800398c:	54411744 	.word	0x54411744
 8003990:	400921fb 	.word	0x400921fb
 8003994:	401921fb 	.word	0x401921fb
 8003998:	bf800000 	.word	0xbf800000

0800399c <dq2uvw>:
//HIP変調
void HIP(m_carrier_t *a, float *Vmax, float *Vmin){
}

//ts エンコーダ値更新周期[s], vm モータ電圧[mV], Fe1 PWMキャリア周波数[Hz]
void dq2uvw(m_carrier_t *a, int16_t angle){
 800399c:	b5b0      	push	{r4, r5, r7, lr}
 800399e:	b088      	sub	sp, #32
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
 80039a4:	000a      	movs	r2, r1
 80039a6:	1cbb      	adds	r3, r7, #2
 80039a8:	801a      	strh	r2, [r3, #0]
	float rad, Va, Vb, sin0, cos0;

	rad = (float)angle*TWOPI/3600;
 80039aa:	1cbb      	adds	r3, r7, #2
 80039ac:	2200      	movs	r2, #0
 80039ae:	5e9b      	ldrsh	r3, [r3, r2]
 80039b0:	0018      	movs	r0, r3
 80039b2:	f7fd fb2d 	bl	8001010 <__aeabi_i2f>
 80039b6:	1c03      	adds	r3, r0, #0
 80039b8:	1c18      	adds	r0, r3, #0
 80039ba:	f7ff f919 	bl	8002bf0 <__aeabi_f2d>
 80039be:	4a65      	ldr	r2, [pc, #404]	; (8003b54 <dq2uvw+0x1b8>)
 80039c0:	4b65      	ldr	r3, [pc, #404]	; (8003b58 <dq2uvw+0x1bc>)
 80039c2:	f7fe fb17 	bl	8001ff4 <__aeabi_dmul>
 80039c6:	0002      	movs	r2, r0
 80039c8:	000b      	movs	r3, r1
 80039ca:	0010      	movs	r0, r2
 80039cc:	0019      	movs	r1, r3
 80039ce:	2200      	movs	r2, #0
 80039d0:	4b62      	ldr	r3, [pc, #392]	; (8003b5c <dq2uvw+0x1c0>)
 80039d2:	f7fd ff09 	bl	80017e8 <__aeabi_ddiv>
 80039d6:	0002      	movs	r2, r0
 80039d8:	000b      	movs	r3, r1
 80039da:	0010      	movs	r0, r2
 80039dc:	0019      	movs	r1, r3
 80039de:	f7ff f94f 	bl	8002c80 <__aeabi_d2f>
 80039e2:	1c03      	adds	r3, r0, #0
 80039e4:	61fb      	str	r3, [r7, #28]

	sin0 = my_sin(rad);
 80039e6:	69fb      	ldr	r3, [r7, #28]
 80039e8:	1c18      	adds	r0, r3, #0
 80039ea:	f7ff ff03 	bl	80037f4 <my_sin>
 80039ee:	1c03      	adds	r3, r0, #0
 80039f0:	61bb      	str	r3, [r7, #24]
	cos0 = my_cos(rad);
 80039f2:	69fb      	ldr	r3, [r7, #28]
 80039f4:	1c18      	adds	r0, r3, #0
 80039f6:	f7ff ff5f 	bl	80038b8 <my_cos>
 80039fa:	1c03      	adds	r3, r0, #0
 80039fc:	617b      	str	r3, [r7, #20]

	Va = cos0*a->Vd - sin0*a->Vq;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	68db      	ldr	r3, [r3, #12]
 8003a02:	6979      	ldr	r1, [r7, #20]
 8003a04:	1c18      	adds	r0, r3, #0
 8003a06:	f7fd f801 	bl	8000a0c <__aeabi_fmul>
 8003a0a:	1c03      	adds	r3, r0, #0
 8003a0c:	1c1c      	adds	r4, r3, #0
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	691b      	ldr	r3, [r3, #16]
 8003a12:	69b9      	ldr	r1, [r7, #24]
 8003a14:	1c18      	adds	r0, r3, #0
 8003a16:	f7fc fff9 	bl	8000a0c <__aeabi_fmul>
 8003a1a:	1c03      	adds	r3, r0, #0
 8003a1c:	1c19      	adds	r1, r3, #0
 8003a1e:	1c20      	adds	r0, r4, #0
 8003a20:	f7fd f90e 	bl	8000c40 <__aeabi_fsub>
 8003a24:	1c03      	adds	r3, r0, #0
 8003a26:	613b      	str	r3, [r7, #16]
	Vb = sin0*a->Vd + cos0*a->Vq;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	68db      	ldr	r3, [r3, #12]
 8003a2c:	69b9      	ldr	r1, [r7, #24]
 8003a2e:	1c18      	adds	r0, r3, #0
 8003a30:	f7fc ffec 	bl	8000a0c <__aeabi_fmul>
 8003a34:	1c03      	adds	r3, r0, #0
 8003a36:	1c1c      	adds	r4, r3, #0
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	691b      	ldr	r3, [r3, #16]
 8003a3c:	6979      	ldr	r1, [r7, #20]
 8003a3e:	1c18      	adds	r0, r3, #0
 8003a40:	f7fc ffe4 	bl	8000a0c <__aeabi_fmul>
 8003a44:	1c03      	adds	r3, r0, #0
 8003a46:	1c19      	adds	r1, r3, #0
 8003a48:	1c20      	adds	r0, r4, #0
 8003a4a:	f7fc fc79 	bl	8000340 <__aeabi_fadd>
 8003a4e:	1c03      	adds	r3, r0, #0
 8003a50:	60fb      	str	r3, [r7, #12]

	a->Vu = SQRT_2p3*Va;
 8003a52:	6938      	ldr	r0, [r7, #16]
 8003a54:	f7ff f8cc 	bl	8002bf0 <__aeabi_f2d>
 8003a58:	4a41      	ldr	r2, [pc, #260]	; (8003b60 <dq2uvw+0x1c4>)
 8003a5a:	4b42      	ldr	r3, [pc, #264]	; (8003b64 <dq2uvw+0x1c8>)
 8003a5c:	f7fe faca 	bl	8001ff4 <__aeabi_dmul>
 8003a60:	0002      	movs	r2, r0
 8003a62:	000b      	movs	r3, r1
 8003a64:	0010      	movs	r0, r2
 8003a66:	0019      	movs	r1, r3
 8003a68:	f7ff f90a 	bl	8002c80 <__aeabi_d2f>
 8003a6c:	1c02      	adds	r2, r0, #0
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	601a      	str	r2, [r3, #0]
	a->Vv = SQRT_2p3*((-1)*Va/2 + SQRT_3*Vb/2);
 8003a72:	693b      	ldr	r3, [r7, #16]
 8003a74:	2280      	movs	r2, #128	; 0x80
 8003a76:	0612      	lsls	r2, r2, #24
 8003a78:	4053      	eors	r3, r2
 8003a7a:	2180      	movs	r1, #128	; 0x80
 8003a7c:	05c9      	lsls	r1, r1, #23
 8003a7e:	1c18      	adds	r0, r3, #0
 8003a80:	f7fc fdfa 	bl	8000678 <__aeabi_fdiv>
 8003a84:	1c03      	adds	r3, r0, #0
 8003a86:	1c18      	adds	r0, r3, #0
 8003a88:	f7ff f8b2 	bl	8002bf0 <__aeabi_f2d>
 8003a8c:	0004      	movs	r4, r0
 8003a8e:	000d      	movs	r5, r1
 8003a90:	68f8      	ldr	r0, [r7, #12]
 8003a92:	f7ff f8ad 	bl	8002bf0 <__aeabi_f2d>
 8003a96:	4a34      	ldr	r2, [pc, #208]	; (8003b68 <dq2uvw+0x1cc>)
 8003a98:	4b34      	ldr	r3, [pc, #208]	; (8003b6c <dq2uvw+0x1d0>)
 8003a9a:	f7fe faab 	bl	8001ff4 <__aeabi_dmul>
 8003a9e:	0002      	movs	r2, r0
 8003aa0:	000b      	movs	r3, r1
 8003aa2:	0010      	movs	r0, r2
 8003aa4:	0019      	movs	r1, r3
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	2380      	movs	r3, #128	; 0x80
 8003aaa:	05db      	lsls	r3, r3, #23
 8003aac:	f7fd fe9c 	bl	80017e8 <__aeabi_ddiv>
 8003ab0:	0002      	movs	r2, r0
 8003ab2:	000b      	movs	r3, r1
 8003ab4:	0020      	movs	r0, r4
 8003ab6:	0029      	movs	r1, r5
 8003ab8:	f7fd fb2c 	bl	8001114 <__aeabi_dadd>
 8003abc:	0002      	movs	r2, r0
 8003abe:	000b      	movs	r3, r1
 8003ac0:	0010      	movs	r0, r2
 8003ac2:	0019      	movs	r1, r3
 8003ac4:	4a26      	ldr	r2, [pc, #152]	; (8003b60 <dq2uvw+0x1c4>)
 8003ac6:	4b27      	ldr	r3, [pc, #156]	; (8003b64 <dq2uvw+0x1c8>)
 8003ac8:	f7fe fa94 	bl	8001ff4 <__aeabi_dmul>
 8003acc:	0002      	movs	r2, r0
 8003ace:	000b      	movs	r3, r1
 8003ad0:	0010      	movs	r0, r2
 8003ad2:	0019      	movs	r1, r3
 8003ad4:	f7ff f8d4 	bl	8002c80 <__aeabi_d2f>
 8003ad8:	1c02      	adds	r2, r0, #0
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	605a      	str	r2, [r3, #4]
	a->Vw = SQRT_2p3*((-1)*Va/2 - SQRT_3*Vb/2);
 8003ade:	693b      	ldr	r3, [r7, #16]
 8003ae0:	2280      	movs	r2, #128	; 0x80
 8003ae2:	0612      	lsls	r2, r2, #24
 8003ae4:	4053      	eors	r3, r2
 8003ae6:	2180      	movs	r1, #128	; 0x80
 8003ae8:	05c9      	lsls	r1, r1, #23
 8003aea:	1c18      	adds	r0, r3, #0
 8003aec:	f7fc fdc4 	bl	8000678 <__aeabi_fdiv>
 8003af0:	1c03      	adds	r3, r0, #0
 8003af2:	1c18      	adds	r0, r3, #0
 8003af4:	f7ff f87c 	bl	8002bf0 <__aeabi_f2d>
 8003af8:	0004      	movs	r4, r0
 8003afa:	000d      	movs	r5, r1
 8003afc:	68f8      	ldr	r0, [r7, #12]
 8003afe:	f7ff f877 	bl	8002bf0 <__aeabi_f2d>
 8003b02:	4a19      	ldr	r2, [pc, #100]	; (8003b68 <dq2uvw+0x1cc>)
 8003b04:	4b19      	ldr	r3, [pc, #100]	; (8003b6c <dq2uvw+0x1d0>)
 8003b06:	f7fe fa75 	bl	8001ff4 <__aeabi_dmul>
 8003b0a:	0002      	movs	r2, r0
 8003b0c:	000b      	movs	r3, r1
 8003b0e:	0010      	movs	r0, r2
 8003b10:	0019      	movs	r1, r3
 8003b12:	2200      	movs	r2, #0
 8003b14:	2380      	movs	r3, #128	; 0x80
 8003b16:	05db      	lsls	r3, r3, #23
 8003b18:	f7fd fe66 	bl	80017e8 <__aeabi_ddiv>
 8003b1c:	0002      	movs	r2, r0
 8003b1e:	000b      	movs	r3, r1
 8003b20:	0020      	movs	r0, r4
 8003b22:	0029      	movs	r1, r5
 8003b24:	f7fe fcd2 	bl	80024cc <__aeabi_dsub>
 8003b28:	0002      	movs	r2, r0
 8003b2a:	000b      	movs	r3, r1
 8003b2c:	0010      	movs	r0, r2
 8003b2e:	0019      	movs	r1, r3
 8003b30:	4a0b      	ldr	r2, [pc, #44]	; (8003b60 <dq2uvw+0x1c4>)
 8003b32:	4b0c      	ldr	r3, [pc, #48]	; (8003b64 <dq2uvw+0x1c8>)
 8003b34:	f7fe fa5e 	bl	8001ff4 <__aeabi_dmul>
 8003b38:	0002      	movs	r2, r0
 8003b3a:	000b      	movs	r3, r1
 8003b3c:	0010      	movs	r0, r2
 8003b3e:	0019      	movs	r1, r3
 8003b40:	f7ff f89e 	bl	8002c80 <__aeabi_d2f>
 8003b44:	1c02      	adds	r2, r0, #0
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	609a      	str	r2, [r3, #8]
}
 8003b4a:	46c0      	nop			; (mov r8, r8)
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	b008      	add	sp, #32
 8003b50:	bdb0      	pop	{r4, r5, r7, pc}
 8003b52:	46c0      	nop			; (mov r8, r8)
 8003b54:	54411744 	.word	0x54411744
 8003b58:	401921fb 	.word	0x401921fb
 8003b5c:	40ac2000 	.word	0x40ac2000
 8003b60:	700b1c68 	.word	0x700b1c68
 8003b64:	3fea20bd 	.word	0x3fea20bd
 8003b68:	e858606b 	.word	0xe858606b
 8003b6c:	3ffbb67a 	.word	0x3ffbb67a

08003b70 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b082      	sub	sp, #8
 8003b74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b76:	4b0f      	ldr	r3, [pc, #60]	; (8003bb4 <HAL_MspInit+0x44>)
 8003b78:	699a      	ldr	r2, [r3, #24]
 8003b7a:	4b0e      	ldr	r3, [pc, #56]	; (8003bb4 <HAL_MspInit+0x44>)
 8003b7c:	2101      	movs	r1, #1
 8003b7e:	430a      	orrs	r2, r1
 8003b80:	619a      	str	r2, [r3, #24]
 8003b82:	4b0c      	ldr	r3, [pc, #48]	; (8003bb4 <HAL_MspInit+0x44>)
 8003b84:	699b      	ldr	r3, [r3, #24]
 8003b86:	2201      	movs	r2, #1
 8003b88:	4013      	ands	r3, r2
 8003b8a:	607b      	str	r3, [r7, #4]
 8003b8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003b8e:	4b09      	ldr	r3, [pc, #36]	; (8003bb4 <HAL_MspInit+0x44>)
 8003b90:	69da      	ldr	r2, [r3, #28]
 8003b92:	4b08      	ldr	r3, [pc, #32]	; (8003bb4 <HAL_MspInit+0x44>)
 8003b94:	2180      	movs	r1, #128	; 0x80
 8003b96:	0549      	lsls	r1, r1, #21
 8003b98:	430a      	orrs	r2, r1
 8003b9a:	61da      	str	r2, [r3, #28]
 8003b9c:	4b05      	ldr	r3, [pc, #20]	; (8003bb4 <HAL_MspInit+0x44>)
 8003b9e:	69da      	ldr	r2, [r3, #28]
 8003ba0:	2380      	movs	r3, #128	; 0x80
 8003ba2:	055b      	lsls	r3, r3, #21
 8003ba4:	4013      	ands	r3, r2
 8003ba6:	603b      	str	r3, [r7, #0]
 8003ba8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003baa:	46c0      	nop			; (mov r8, r8)
 8003bac:	46bd      	mov	sp, r7
 8003bae:	b002      	add	sp, #8
 8003bb0:	bd80      	pop	{r7, pc}
 8003bb2:	46c0      	nop			; (mov r8, r8)
 8003bb4:	40021000 	.word	0x40021000

08003bb8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003bb8:	b590      	push	{r4, r7, lr}
 8003bba:	b08b      	sub	sp, #44	; 0x2c
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bc0:	2414      	movs	r4, #20
 8003bc2:	193b      	adds	r3, r7, r4
 8003bc4:	0018      	movs	r0, r3
 8003bc6:	2314      	movs	r3, #20
 8003bc8:	001a      	movs	r2, r3
 8003bca:	2100      	movs	r1, #0
 8003bcc:	f003 f88f 	bl	8006cee <memset>
  if(hadc->Instance==ADC1)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a2d      	ldr	r2, [pc, #180]	; (8003c8c <HAL_ADC_MspInit+0xd4>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d153      	bne.n	8003c82 <HAL_ADC_MspInit+0xca>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003bda:	4b2d      	ldr	r3, [pc, #180]	; (8003c90 <HAL_ADC_MspInit+0xd8>)
 8003bdc:	699a      	ldr	r2, [r3, #24]
 8003bde:	4b2c      	ldr	r3, [pc, #176]	; (8003c90 <HAL_ADC_MspInit+0xd8>)
 8003be0:	2180      	movs	r1, #128	; 0x80
 8003be2:	0089      	lsls	r1, r1, #2
 8003be4:	430a      	orrs	r2, r1
 8003be6:	619a      	str	r2, [r3, #24]
 8003be8:	4b29      	ldr	r3, [pc, #164]	; (8003c90 <HAL_ADC_MspInit+0xd8>)
 8003bea:	699a      	ldr	r2, [r3, #24]
 8003bec:	2380      	movs	r3, #128	; 0x80
 8003bee:	009b      	lsls	r3, r3, #2
 8003bf0:	4013      	ands	r3, r2
 8003bf2:	613b      	str	r3, [r7, #16]
 8003bf4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003bf6:	4b26      	ldr	r3, [pc, #152]	; (8003c90 <HAL_ADC_MspInit+0xd8>)
 8003bf8:	695a      	ldr	r2, [r3, #20]
 8003bfa:	4b25      	ldr	r3, [pc, #148]	; (8003c90 <HAL_ADC_MspInit+0xd8>)
 8003bfc:	2180      	movs	r1, #128	; 0x80
 8003bfe:	02c9      	lsls	r1, r1, #11
 8003c00:	430a      	orrs	r2, r1
 8003c02:	615a      	str	r2, [r3, #20]
 8003c04:	4b22      	ldr	r3, [pc, #136]	; (8003c90 <HAL_ADC_MspInit+0xd8>)
 8003c06:	695a      	ldr	r2, [r3, #20]
 8003c08:	2380      	movs	r3, #128	; 0x80
 8003c0a:	02db      	lsls	r3, r3, #11
 8003c0c:	4013      	ands	r3, r2
 8003c0e:	60fb      	str	r3, [r7, #12]
 8003c10:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PB0     ------> ADC_IN8
    */
    GPIO_InitStruct.Pin = ADC_VM_Pin;
 8003c12:	193b      	adds	r3, r7, r4
 8003c14:	2201      	movs	r2, #1
 8003c16:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003c18:	193b      	adds	r3, r7, r4
 8003c1a:	2203      	movs	r2, #3
 8003c1c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c1e:	193b      	adds	r3, r7, r4
 8003c20:	2200      	movs	r2, #0
 8003c22:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(ADC_VM_GPIO_Port, &GPIO_InitStruct);
 8003c24:	193b      	adds	r3, r7, r4
 8003c26:	4a1b      	ldr	r2, [pc, #108]	; (8003c94 <HAL_ADC_MspInit+0xdc>)
 8003c28:	0019      	movs	r1, r3
 8003c2a:	0010      	movs	r0, r2
 8003c2c:	f000 fed6 	bl	80049dc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 8003c30:	4b19      	ldr	r3, [pc, #100]	; (8003c98 <HAL_ADC_MspInit+0xe0>)
 8003c32:	4a1a      	ldr	r2, [pc, #104]	; (8003c9c <HAL_ADC_MspInit+0xe4>)
 8003c34:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003c36:	4b18      	ldr	r3, [pc, #96]	; (8003c98 <HAL_ADC_MspInit+0xe0>)
 8003c38:	2200      	movs	r2, #0
 8003c3a:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8003c3c:	4b16      	ldr	r3, [pc, #88]	; (8003c98 <HAL_ADC_MspInit+0xe0>)
 8003c3e:	2200      	movs	r2, #0
 8003c40:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8003c42:	4b15      	ldr	r3, [pc, #84]	; (8003c98 <HAL_ADC_MspInit+0xe0>)
 8003c44:	2280      	movs	r2, #128	; 0x80
 8003c46:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003c48:	4b13      	ldr	r3, [pc, #76]	; (8003c98 <HAL_ADC_MspInit+0xe0>)
 8003c4a:	2280      	movs	r2, #128	; 0x80
 8003c4c:	0052      	lsls	r2, r2, #1
 8003c4e:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003c50:	4b11      	ldr	r3, [pc, #68]	; (8003c98 <HAL_ADC_MspInit+0xe0>)
 8003c52:	2280      	movs	r2, #128	; 0x80
 8003c54:	00d2      	lsls	r2, r2, #3
 8003c56:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_NORMAL;
 8003c58:	4b0f      	ldr	r3, [pc, #60]	; (8003c98 <HAL_ADC_MspInit+0xe0>)
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_HIGH;
 8003c5e:	4b0e      	ldr	r3, [pc, #56]	; (8003c98 <HAL_ADC_MspInit+0xe0>)
 8003c60:	2280      	movs	r2, #128	; 0x80
 8003c62:	0192      	lsls	r2, r2, #6
 8003c64:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8003c66:	4b0c      	ldr	r3, [pc, #48]	; (8003c98 <HAL_ADC_MspInit+0xe0>)
 8003c68:	0018      	movs	r0, r3
 8003c6a:	f000 fdb1 	bl	80047d0 <HAL_DMA_Init>
 8003c6e:	1e03      	subs	r3, r0, #0
 8003c70:	d001      	beq.n	8003c76 <HAL_ADC_MspInit+0xbe>
    {
      Error_Handler();
 8003c72:	f7ff fdb9 	bl	80037e8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	4a07      	ldr	r2, [pc, #28]	; (8003c98 <HAL_ADC_MspInit+0xe0>)
 8003c7a:	631a      	str	r2, [r3, #48]	; 0x30
 8003c7c:	4b06      	ldr	r3, [pc, #24]	; (8003c98 <HAL_ADC_MspInit+0xe0>)
 8003c7e:	687a      	ldr	r2, [r7, #4]
 8003c80:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003c82:	46c0      	nop			; (mov r8, r8)
 8003c84:	46bd      	mov	sp, r7
 8003c86:	b00b      	add	sp, #44	; 0x2c
 8003c88:	bd90      	pop	{r4, r7, pc}
 8003c8a:	46c0      	nop			; (mov r8, r8)
 8003c8c:	40012400 	.word	0x40012400
 8003c90:	40021000 	.word	0x40021000
 8003c94:	48000400 	.word	0x48000400
 8003c98:	20000130 	.word	0x20000130
 8003c9c:	40020008 	.word	0x40020008

08003ca0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003ca0:	b590      	push	{r4, r7, lr}
 8003ca2:	b08b      	sub	sp, #44	; 0x2c
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ca8:	2414      	movs	r4, #20
 8003caa:	193b      	adds	r3, r7, r4
 8003cac:	0018      	movs	r0, r3
 8003cae:	2314      	movs	r3, #20
 8003cb0:	001a      	movs	r2, r3
 8003cb2:	2100      	movs	r1, #0
 8003cb4:	f003 f81b 	bl	8006cee <memset>
  if(hi2c->Instance==I2C1)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a1c      	ldr	r2, [pc, #112]	; (8003d30 <HAL_I2C_MspInit+0x90>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d131      	bne.n	8003d26 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003cc2:	4b1c      	ldr	r3, [pc, #112]	; (8003d34 <HAL_I2C_MspInit+0x94>)
 8003cc4:	695a      	ldr	r2, [r3, #20]
 8003cc6:	4b1b      	ldr	r3, [pc, #108]	; (8003d34 <HAL_I2C_MspInit+0x94>)
 8003cc8:	2180      	movs	r1, #128	; 0x80
 8003cca:	02c9      	lsls	r1, r1, #11
 8003ccc:	430a      	orrs	r2, r1
 8003cce:	615a      	str	r2, [r3, #20]
 8003cd0:	4b18      	ldr	r3, [pc, #96]	; (8003d34 <HAL_I2C_MspInit+0x94>)
 8003cd2:	695a      	ldr	r2, [r3, #20]
 8003cd4:	2380      	movs	r3, #128	; 0x80
 8003cd6:	02db      	lsls	r3, r3, #11
 8003cd8:	4013      	ands	r3, r2
 8003cda:	613b      	str	r3, [r7, #16]
 8003cdc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003cde:	0021      	movs	r1, r4
 8003ce0:	187b      	adds	r3, r7, r1
 8003ce2:	22c0      	movs	r2, #192	; 0xc0
 8003ce4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003ce6:	187b      	adds	r3, r7, r1
 8003ce8:	2212      	movs	r2, #18
 8003cea:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003cec:	187b      	adds	r3, r7, r1
 8003cee:	2201      	movs	r2, #1
 8003cf0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003cf2:	187b      	adds	r3, r7, r1
 8003cf4:	2203      	movs	r2, #3
 8003cf6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8003cf8:	187b      	adds	r3, r7, r1
 8003cfa:	2201      	movs	r2, #1
 8003cfc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003cfe:	187b      	adds	r3, r7, r1
 8003d00:	4a0d      	ldr	r2, [pc, #52]	; (8003d38 <HAL_I2C_MspInit+0x98>)
 8003d02:	0019      	movs	r1, r3
 8003d04:	0010      	movs	r0, r2
 8003d06:	f000 fe69 	bl	80049dc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003d0a:	4b0a      	ldr	r3, [pc, #40]	; (8003d34 <HAL_I2C_MspInit+0x94>)
 8003d0c:	69da      	ldr	r2, [r3, #28]
 8003d0e:	4b09      	ldr	r3, [pc, #36]	; (8003d34 <HAL_I2C_MspInit+0x94>)
 8003d10:	2180      	movs	r1, #128	; 0x80
 8003d12:	0389      	lsls	r1, r1, #14
 8003d14:	430a      	orrs	r2, r1
 8003d16:	61da      	str	r2, [r3, #28]
 8003d18:	4b06      	ldr	r3, [pc, #24]	; (8003d34 <HAL_I2C_MspInit+0x94>)
 8003d1a:	69da      	ldr	r2, [r3, #28]
 8003d1c:	2380      	movs	r3, #128	; 0x80
 8003d1e:	039b      	lsls	r3, r3, #14
 8003d20:	4013      	ands	r3, r2
 8003d22:	60fb      	str	r3, [r7, #12]
 8003d24:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003d26:	46c0      	nop			; (mov r8, r8)
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	b00b      	add	sp, #44	; 0x2c
 8003d2c:	bd90      	pop	{r4, r7, pc}
 8003d2e:	46c0      	nop			; (mov r8, r8)
 8003d30:	40005400 	.word	0x40005400
 8003d34:	40021000 	.word	0x40021000
 8003d38:	48000400 	.word	0x48000400

08003d3c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b086      	sub	sp, #24
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a26      	ldr	r2, [pc, #152]	; (8003de4 <HAL_TIM_Base_MspInit+0xa8>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d116      	bne.n	8003d7c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003d4e:	4b26      	ldr	r3, [pc, #152]	; (8003de8 <HAL_TIM_Base_MspInit+0xac>)
 8003d50:	699a      	ldr	r2, [r3, #24]
 8003d52:	4b25      	ldr	r3, [pc, #148]	; (8003de8 <HAL_TIM_Base_MspInit+0xac>)
 8003d54:	2180      	movs	r1, #128	; 0x80
 8003d56:	0109      	lsls	r1, r1, #4
 8003d58:	430a      	orrs	r2, r1
 8003d5a:	619a      	str	r2, [r3, #24]
 8003d5c:	4b22      	ldr	r3, [pc, #136]	; (8003de8 <HAL_TIM_Base_MspInit+0xac>)
 8003d5e:	699a      	ldr	r2, [r3, #24]
 8003d60:	2380      	movs	r3, #128	; 0x80
 8003d62:	011b      	lsls	r3, r3, #4
 8003d64:	4013      	ands	r3, r2
 8003d66:	617b      	str	r3, [r7, #20]
 8003d68:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	2100      	movs	r1, #0
 8003d6e:	200d      	movs	r0, #13
 8003d70:	f000 fcfc 	bl	800476c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 8003d74:	200d      	movs	r0, #13
 8003d76:	f000 fd0e 	bl	8004796 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8003d7a:	e02e      	b.n	8003dda <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM14)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a1a      	ldr	r2, [pc, #104]	; (8003dec <HAL_TIM_Base_MspInit+0xb0>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d116      	bne.n	8003db4 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8003d86:	4b18      	ldr	r3, [pc, #96]	; (8003de8 <HAL_TIM_Base_MspInit+0xac>)
 8003d88:	69da      	ldr	r2, [r3, #28]
 8003d8a:	4b17      	ldr	r3, [pc, #92]	; (8003de8 <HAL_TIM_Base_MspInit+0xac>)
 8003d8c:	2180      	movs	r1, #128	; 0x80
 8003d8e:	0049      	lsls	r1, r1, #1
 8003d90:	430a      	orrs	r2, r1
 8003d92:	61da      	str	r2, [r3, #28]
 8003d94:	4b14      	ldr	r3, [pc, #80]	; (8003de8 <HAL_TIM_Base_MspInit+0xac>)
 8003d96:	69da      	ldr	r2, [r3, #28]
 8003d98:	2380      	movs	r3, #128	; 0x80
 8003d9a:	005b      	lsls	r3, r3, #1
 8003d9c:	4013      	ands	r3, r2
 8003d9e:	613b      	str	r3, [r7, #16]
 8003da0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM14_IRQn, 3, 0);
 8003da2:	2200      	movs	r2, #0
 8003da4:	2103      	movs	r1, #3
 8003da6:	2013      	movs	r0, #19
 8003da8:	f000 fce0 	bl	800476c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8003dac:	2013      	movs	r0, #19
 8003dae:	f000 fcf2 	bl	8004796 <HAL_NVIC_EnableIRQ>
}
 8003db2:	e012      	b.n	8003dda <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM16)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a0d      	ldr	r2, [pc, #52]	; (8003df0 <HAL_TIM_Base_MspInit+0xb4>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d10d      	bne.n	8003dda <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8003dbe:	4b0a      	ldr	r3, [pc, #40]	; (8003de8 <HAL_TIM_Base_MspInit+0xac>)
 8003dc0:	699a      	ldr	r2, [r3, #24]
 8003dc2:	4b09      	ldr	r3, [pc, #36]	; (8003de8 <HAL_TIM_Base_MspInit+0xac>)
 8003dc4:	2180      	movs	r1, #128	; 0x80
 8003dc6:	0289      	lsls	r1, r1, #10
 8003dc8:	430a      	orrs	r2, r1
 8003dca:	619a      	str	r2, [r3, #24]
 8003dcc:	4b06      	ldr	r3, [pc, #24]	; (8003de8 <HAL_TIM_Base_MspInit+0xac>)
 8003dce:	699a      	ldr	r2, [r3, #24]
 8003dd0:	2380      	movs	r3, #128	; 0x80
 8003dd2:	029b      	lsls	r3, r3, #10
 8003dd4:	4013      	ands	r3, r2
 8003dd6:	60fb      	str	r3, [r7, #12]
 8003dd8:	68fb      	ldr	r3, [r7, #12]
}
 8003dda:	46c0      	nop			; (mov r8, r8)
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	b006      	add	sp, #24
 8003de0:	bd80      	pop	{r7, pc}
 8003de2:	46c0      	nop			; (mov r8, r8)
 8003de4:	40012c00 	.word	0x40012c00
 8003de8:	40021000 	.word	0x40021000
 8003dec:	40002000 	.word	0x40002000
 8003df0:	40014400 	.word	0x40014400

08003df4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003df4:	b590      	push	{r4, r7, lr}
 8003df6:	b08b      	sub	sp, #44	; 0x2c
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003dfc:	2414      	movs	r4, #20
 8003dfe:	193b      	adds	r3, r7, r4
 8003e00:	0018      	movs	r0, r3
 8003e02:	2314      	movs	r3, #20
 8003e04:	001a      	movs	r2, r3
 8003e06:	2100      	movs	r1, #0
 8003e08:	f002 ff71 	bl	8006cee <memset>
  if(htim->Instance==TIM1)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a2b      	ldr	r2, [pc, #172]	; (8003ec0 <HAL_TIM_MspPostInit+0xcc>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d126      	bne.n	8003e64 <HAL_TIM_MspPostInit+0x70>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e16:	4b2b      	ldr	r3, [pc, #172]	; (8003ec4 <HAL_TIM_MspPostInit+0xd0>)
 8003e18:	695a      	ldr	r2, [r3, #20]
 8003e1a:	4b2a      	ldr	r3, [pc, #168]	; (8003ec4 <HAL_TIM_MspPostInit+0xd0>)
 8003e1c:	2180      	movs	r1, #128	; 0x80
 8003e1e:	0289      	lsls	r1, r1, #10
 8003e20:	430a      	orrs	r2, r1
 8003e22:	615a      	str	r2, [r3, #20]
 8003e24:	4b27      	ldr	r3, [pc, #156]	; (8003ec4 <HAL_TIM_MspPostInit+0xd0>)
 8003e26:	695a      	ldr	r2, [r3, #20]
 8003e28:	2380      	movs	r3, #128	; 0x80
 8003e2a:	029b      	lsls	r3, r3, #10
 8003e2c:	4013      	ands	r3, r2
 8003e2e:	613b      	str	r3, [r7, #16]
 8003e30:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8003e32:	193b      	adds	r3, r7, r4
 8003e34:	22e0      	movs	r2, #224	; 0xe0
 8003e36:	00d2      	lsls	r2, r2, #3
 8003e38:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e3a:	0021      	movs	r1, r4
 8003e3c:	187b      	adds	r3, r7, r1
 8003e3e:	2202      	movs	r2, #2
 8003e40:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e42:	187b      	adds	r3, r7, r1
 8003e44:	2200      	movs	r2, #0
 8003e46:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e48:	187b      	adds	r3, r7, r1
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8003e4e:	187b      	adds	r3, r7, r1
 8003e50:	2202      	movs	r2, #2
 8003e52:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e54:	187a      	adds	r2, r7, r1
 8003e56:	2390      	movs	r3, #144	; 0x90
 8003e58:	05db      	lsls	r3, r3, #23
 8003e5a:	0011      	movs	r1, r2
 8003e5c:	0018      	movs	r0, r3
 8003e5e:	f000 fdbd 	bl	80049dc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 8003e62:	e029      	b.n	8003eb8 <HAL_TIM_MspPostInit+0xc4>
  else if(htim->Instance==TIM16)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a17      	ldr	r2, [pc, #92]	; (8003ec8 <HAL_TIM_MspPostInit+0xd4>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d124      	bne.n	8003eb8 <HAL_TIM_MspPostInit+0xc4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e6e:	4b15      	ldr	r3, [pc, #84]	; (8003ec4 <HAL_TIM_MspPostInit+0xd0>)
 8003e70:	695a      	ldr	r2, [r3, #20]
 8003e72:	4b14      	ldr	r3, [pc, #80]	; (8003ec4 <HAL_TIM_MspPostInit+0xd0>)
 8003e74:	2180      	movs	r1, #128	; 0x80
 8003e76:	02c9      	lsls	r1, r1, #11
 8003e78:	430a      	orrs	r2, r1
 8003e7a:	615a      	str	r2, [r3, #20]
 8003e7c:	4b11      	ldr	r3, [pc, #68]	; (8003ec4 <HAL_TIM_MspPostInit+0xd0>)
 8003e7e:	695a      	ldr	r2, [r3, #20]
 8003e80:	2380      	movs	r3, #128	; 0x80
 8003e82:	02db      	lsls	r3, r3, #11
 8003e84:	4013      	ands	r3, r2
 8003e86:	60fb      	str	r3, [r7, #12]
 8003e88:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003e8a:	2114      	movs	r1, #20
 8003e8c:	187b      	adds	r3, r7, r1
 8003e8e:	2280      	movs	r2, #128	; 0x80
 8003e90:	0052      	lsls	r2, r2, #1
 8003e92:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e94:	187b      	adds	r3, r7, r1
 8003e96:	2202      	movs	r2, #2
 8003e98:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e9a:	187b      	adds	r3, r7, r1
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ea0:	187b      	adds	r3, r7, r1
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM16;
 8003ea6:	187b      	adds	r3, r7, r1
 8003ea8:	2202      	movs	r2, #2
 8003eaa:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003eac:	187b      	adds	r3, r7, r1
 8003eae:	4a07      	ldr	r2, [pc, #28]	; (8003ecc <HAL_TIM_MspPostInit+0xd8>)
 8003eb0:	0019      	movs	r1, r3
 8003eb2:	0010      	movs	r0, r2
 8003eb4:	f000 fd92 	bl	80049dc <HAL_GPIO_Init>
}
 8003eb8:	46c0      	nop			; (mov r8, r8)
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	b00b      	add	sp, #44	; 0x2c
 8003ebe:	bd90      	pop	{r4, r7, pc}
 8003ec0:	40012c00 	.word	0x40012c00
 8003ec4:	40021000 	.word	0x40021000
 8003ec8:	40014400 	.word	0x40014400
 8003ecc:	48000400 	.word	0x48000400

08003ed0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8003ed4:	f001 fd40 	bl	8005958 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003ed8:	46c0      	nop			; (mov r8, r8)
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bd80      	pop	{r7, pc}

08003ede <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003ede:	b580      	push	{r7, lr}
 8003ee0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003ee2:	e7fe      	b.n	8003ee2 <HardFault_Handler+0x4>

08003ee4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003ee8:	46c0      	nop			; (mov r8, r8)
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}

08003eee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003eee:	b580      	push	{r7, lr}
 8003ef0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003ef2:	46c0      	nop			; (mov r8, r8)
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bd80      	pop	{r7, pc}

08003ef8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003efc:	f000 f8fc 	bl	80040f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003f00:	46c0      	nop			; (mov r8, r8)
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bd80      	pop	{r7, pc}
	...

08003f08 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8003f0c:	4b03      	ldr	r3, [pc, #12]	; (8003f1c <DMA1_Channel1_IRQHandler+0x14>)
 8003f0e:	0018      	movs	r0, r3
 8003f10:	f000 fca6 	bl	8004860 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003f14:	46c0      	nop			; (mov r8, r8)
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bd80      	pop	{r7, pc}
 8003f1a:	46c0      	nop			; (mov r8, r8)
 8003f1c:	20000130 	.word	0x20000130

08003f20 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b082      	sub	sp, #8
 8003f24:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */
	g_posi_arr[0] += 100;
 8003f26:	4b1b      	ldr	r3, [pc, #108]	; (8003f94 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x74>)
 8003f28:	881b      	ldrh	r3, [r3, #0]
 8003f2a:	3364      	adds	r3, #100	; 0x64
 8003f2c:	b29a      	uxth	r2, r3
 8003f2e:	4b19      	ldr	r3, [pc, #100]	; (8003f94 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x74>)
 8003f30:	801a      	strh	r2, [r3, #0]
	g_posi_arr[1] = g_posi_arr[0];
 8003f32:	4b18      	ldr	r3, [pc, #96]	; (8003f94 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x74>)
 8003f34:	881a      	ldrh	r2, [r3, #0]
 8003f36:	4b17      	ldr	r3, [pc, #92]	; (8003f94 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x74>)
 8003f38:	805a      	strh	r2, [r3, #2]
	if(g_posi_arr[0]>=3600){
 8003f3a:	4b16      	ldr	r3, [pc, #88]	; (8003f94 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x74>)
 8003f3c:	881a      	ldrh	r2, [r3, #0]
 8003f3e:	23e1      	movs	r3, #225	; 0xe1
 8003f40:	011b      	lsls	r3, r3, #4
 8003f42:	429a      	cmp	r2, r3
 8003f44:	d302      	bcc.n	8003f4c <TIM1_BRK_UP_TRG_COM_IRQHandler+0x2c>
		g_posi_arr[0] = 0;
 8003f46:	4b13      	ldr	r3, [pc, #76]	; (8003f94 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x74>)
 8003f48:	2200      	movs	r2, #0
 8003f4a:	801a      	strh	r2, [r3, #0]
	}
	//g_posi_arr[0] = def_AS5600_Read_Raw;
	//g_posi_arr[0] *= 360/4096;
	g_value.Vq = 0.5;//pi_control(&g_pi_val, g_posi_arr[0]);
 8003f4c:	4b12      	ldr	r3, [pc, #72]	; (8003f98 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x78>)
 8003f4e:	22fc      	movs	r2, #252	; 0xfc
 8003f50:	0592      	lsls	r2, r2, #22
 8003f52:	611a      	str	r2, [r3, #16]
	g_value.Vd = 0;
 8003f54:	4b10      	ldr	r3, [pc, #64]	; (8003f98 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x78>)
 8003f56:	2200      	movs	r2, #0
 8003f58:	60da      	str	r2, [r3, #12]
	dq2uvw(&g_value, g_posi_arr[0]);
 8003f5a:	4b0e      	ldr	r3, [pc, #56]	; (8003f94 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x74>)
 8003f5c:	881b      	ldrh	r3, [r3, #0]
 8003f5e:	b21a      	sxth	r2, r3
 8003f60:	4b0d      	ldr	r3, [pc, #52]	; (8003f98 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x78>)
 8003f62:	0011      	movs	r1, r2
 8003f64:	0018      	movs	r0, r3
 8003f66:	f7ff fd19 	bl	800399c <dq2uvw>
	Set_inverter(g_value, htim1.Init.Period);
 8003f6a:	4b0c      	ldr	r3, [pc, #48]	; (8003f9c <TIM1_BRK_UP_TRG_COM_IRQHandler+0x7c>)
 8003f6c:	68da      	ldr	r2, [r3, #12]
 8003f6e:	4b0a      	ldr	r3, [pc, #40]	; (8003f98 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x78>)
 8003f70:	9201      	str	r2, [sp, #4]
 8003f72:	466a      	mov	r2, sp
 8003f74:	6919      	ldr	r1, [r3, #16]
 8003f76:	6011      	str	r1, [r2, #0]
 8003f78:	6818      	ldr	r0, [r3, #0]
 8003f7a:	6859      	ldr	r1, [r3, #4]
 8003f7c:	689a      	ldr	r2, [r3, #8]
 8003f7e:	68db      	ldr	r3, [r3, #12]
 8003f80:	f7fe ff78 	bl	8002e74 <Set_inverter>
  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003f84:	4b05      	ldr	r3, [pc, #20]	; (8003f9c <TIM1_BRK_UP_TRG_COM_IRQHandler+0x7c>)
 8003f86:	0018      	movs	r0, r3
 8003f88:	f001 ffd2 	bl	8005f30 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 8003f8c:	46c0      	nop			; (mov r8, r8)
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bd80      	pop	{r7, pc}
 8003f92:	46c0      	nop			; (mov r8, r8)
 8003f94:	20000030 	.word	0x20000030
 8003f98:	20000034 	.word	0x20000034
 8003f9c:	200000a0 	.word	0x200000a0

08003fa0 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */
	g_tim14_cnt++;
 8003fa4:	4b09      	ldr	r3, [pc, #36]	; (8003fcc <TIM14_IRQHandler+0x2c>)
 8003fa6:	881b      	ldrh	r3, [r3, #0]
 8003fa8:	3301      	adds	r3, #1
 8003faa:	b29a      	uxth	r2, r3
 8003fac:	4b07      	ldr	r3, [pc, #28]	; (8003fcc <TIM14_IRQHandler+0x2c>)
 8003fae:	801a      	strh	r2, [r3, #0]
	g_dSW_cnt++;
 8003fb0:	4b07      	ldr	r3, [pc, #28]	; (8003fd0 <TIM14_IRQHandler+0x30>)
 8003fb2:	881b      	ldrh	r3, [r3, #0]
 8003fb4:	3301      	adds	r3, #1
 8003fb6:	b29a      	uxth	r2, r3
 8003fb8:	4b05      	ldr	r3, [pc, #20]	; (8003fd0 <TIM14_IRQHandler+0x30>)
 8003fba:	801a      	strh	r2, [r3, #0]
  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8003fbc:	4b05      	ldr	r3, [pc, #20]	; (8003fd4 <TIM14_IRQHandler+0x34>)
 8003fbe:	0018      	movs	r0, r3
 8003fc0:	f001 ffb6 	bl	8005f30 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8003fc4:	46c0      	nop			; (mov r8, r8)
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bd80      	pop	{r7, pc}
 8003fca:	46c0      	nop			; (mov r8, r8)
 8003fcc:	2000002c 	.word	0x2000002c
 8003fd0:	20000052 	.word	0x20000052
 8003fd4:	200000e8 	.word	0x200000e8

08003fd8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8003fdc:	46c0      	nop			; (mov r8, r8)
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bd80      	pop	{r7, pc}
	...

08003fe4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003fe4:	4813      	ldr	r0, [pc, #76]	; (8004034 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003fe6:	4685      	mov	sp, r0

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 8003fe8:	4813      	ldr	r0, [pc, #76]	; (8004038 <LoopForever+0x6>)
    LDR R1, [R0]
 8003fea:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8003fec:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8003fee:	4a13      	ldr	r2, [pc, #76]	; (800403c <LoopForever+0xa>)
    CMP R1, R2
 8003ff0:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8003ff2:	d105      	bne.n	8004000 <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 8003ff4:	4812      	ldr	r0, [pc, #72]	; (8004040 <LoopForever+0xe>)
    LDR R1,=0x00000001
 8003ff6:	4913      	ldr	r1, [pc, #76]	; (8004044 <LoopForever+0x12>)
    STR R1, [R0]
 8003ff8:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8003ffa:	4813      	ldr	r0, [pc, #76]	; (8004048 <LoopForever+0x16>)
    LDR R1,=0x00000000
 8003ffc:	4913      	ldr	r1, [pc, #76]	; (800404c <LoopForever+0x1a>)
    STR R1, [R0]
 8003ffe:	6001      	str	r1, [r0, #0]

08004000 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004000:	4813      	ldr	r0, [pc, #76]	; (8004050 <LoopForever+0x1e>)
  ldr r1, =_edata
 8004002:	4914      	ldr	r1, [pc, #80]	; (8004054 <LoopForever+0x22>)
  ldr r2, =_sidata
 8004004:	4a14      	ldr	r2, [pc, #80]	; (8004058 <LoopForever+0x26>)
  movs r3, #0
 8004006:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004008:	e002      	b.n	8004010 <LoopCopyDataInit>

0800400a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800400a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800400c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800400e:	3304      	adds	r3, #4

08004010 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004010:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004012:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004014:	d3f9      	bcc.n	800400a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004016:	4a11      	ldr	r2, [pc, #68]	; (800405c <LoopForever+0x2a>)
  ldr r4, =_ebss
 8004018:	4c11      	ldr	r4, [pc, #68]	; (8004060 <LoopForever+0x2e>)
  movs r3, #0
 800401a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800401c:	e001      	b.n	8004022 <LoopFillZerobss>

0800401e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800401e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004020:	3204      	adds	r2, #4

08004022 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004022:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004024:	d3fb      	bcc.n	800401e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8004026:	f7ff ffd7 	bl	8003fd8 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800402a:	f002 fe33 	bl	8006c94 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800402e:	f7ff f833 	bl	8003098 <main>

08004032 <LoopForever>:

LoopForever:
    b LoopForever
 8004032:	e7fe      	b.n	8004032 <LoopForever>
  ldr   r0, =_estack
 8004034:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 8004038:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 800403c:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 8004040:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 8004044:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8004048:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 800404c:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8004050:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004054:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8004058:	08006e90 	.word	0x08006e90
  ldr r2, =_sbss
 800405c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8004060:	20000200 	.word	0x20000200

08004064 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004064:	e7fe      	b.n	8004064 <ADC1_IRQHandler>
	...

08004068 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800406c:	4b07      	ldr	r3, [pc, #28]	; (800408c <HAL_Init+0x24>)
 800406e:	681a      	ldr	r2, [r3, #0]
 8004070:	4b06      	ldr	r3, [pc, #24]	; (800408c <HAL_Init+0x24>)
 8004072:	2110      	movs	r1, #16
 8004074:	430a      	orrs	r2, r1
 8004076:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8004078:	2000      	movs	r0, #0
 800407a:	f000 f809 	bl	8004090 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800407e:	f7ff fd77 	bl	8003b70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004082:	2300      	movs	r3, #0
}
 8004084:	0018      	movs	r0, r3
 8004086:	46bd      	mov	sp, r7
 8004088:	bd80      	pop	{r7, pc}
 800408a:	46c0      	nop			; (mov r8, r8)
 800408c:	40022000 	.word	0x40022000

08004090 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004090:	b590      	push	{r4, r7, lr}
 8004092:	b083      	sub	sp, #12
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004098:	4b14      	ldr	r3, [pc, #80]	; (80040ec <HAL_InitTick+0x5c>)
 800409a:	681c      	ldr	r4, [r3, #0]
 800409c:	4b14      	ldr	r3, [pc, #80]	; (80040f0 <HAL_InitTick+0x60>)
 800409e:	781b      	ldrb	r3, [r3, #0]
 80040a0:	0019      	movs	r1, r3
 80040a2:	23fa      	movs	r3, #250	; 0xfa
 80040a4:	0098      	lsls	r0, r3, #2
 80040a6:	f7fc f82f 	bl	8000108 <__udivsi3>
 80040aa:	0003      	movs	r3, r0
 80040ac:	0019      	movs	r1, r3
 80040ae:	0020      	movs	r0, r4
 80040b0:	f7fc f82a 	bl	8000108 <__udivsi3>
 80040b4:	0003      	movs	r3, r0
 80040b6:	0018      	movs	r0, r3
 80040b8:	f000 fb7d 	bl	80047b6 <HAL_SYSTICK_Config>
 80040bc:	1e03      	subs	r3, r0, #0
 80040be:	d001      	beq.n	80040c4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80040c0:	2301      	movs	r3, #1
 80040c2:	e00f      	b.n	80040e4 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2b03      	cmp	r3, #3
 80040c8:	d80b      	bhi.n	80040e2 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80040ca:	6879      	ldr	r1, [r7, #4]
 80040cc:	2301      	movs	r3, #1
 80040ce:	425b      	negs	r3, r3
 80040d0:	2200      	movs	r2, #0
 80040d2:	0018      	movs	r0, r3
 80040d4:	f000 fb4a 	bl	800476c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80040d8:	4b06      	ldr	r3, [pc, #24]	; (80040f4 <HAL_InitTick+0x64>)
 80040da:	687a      	ldr	r2, [r7, #4]
 80040dc:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80040de:	2300      	movs	r3, #0
 80040e0:	e000      	b.n	80040e4 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80040e2:	2301      	movs	r3, #1
}
 80040e4:	0018      	movs	r0, r3
 80040e6:	46bd      	mov	sp, r7
 80040e8:	b003      	add	sp, #12
 80040ea:	bd90      	pop	{r4, r7, pc}
 80040ec:	20000004 	.word	0x20000004
 80040f0:	2000000c 	.word	0x2000000c
 80040f4:	20000008 	.word	0x20000008

080040f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80040fc:	4b05      	ldr	r3, [pc, #20]	; (8004114 <HAL_IncTick+0x1c>)
 80040fe:	781b      	ldrb	r3, [r3, #0]
 8004100:	001a      	movs	r2, r3
 8004102:	4b05      	ldr	r3, [pc, #20]	; (8004118 <HAL_IncTick+0x20>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	18d2      	adds	r2, r2, r3
 8004108:	4b03      	ldr	r3, [pc, #12]	; (8004118 <HAL_IncTick+0x20>)
 800410a:	601a      	str	r2, [r3, #0]
}
 800410c:	46c0      	nop			; (mov r8, r8)
 800410e:	46bd      	mov	sp, r7
 8004110:	bd80      	pop	{r7, pc}
 8004112:	46c0      	nop			; (mov r8, r8)
 8004114:	2000000c 	.word	0x2000000c
 8004118:	200001fc 	.word	0x200001fc

0800411c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	af00      	add	r7, sp, #0
  return uwTick;
 8004120:	4b02      	ldr	r3, [pc, #8]	; (800412c <HAL_GetTick+0x10>)
 8004122:	681b      	ldr	r3, [r3, #0]
}
 8004124:	0018      	movs	r0, r3
 8004126:	46bd      	mov	sp, r7
 8004128:	bd80      	pop	{r7, pc}
 800412a:	46c0      	nop			; (mov r8, r8)
 800412c:	200001fc 	.word	0x200001fc

08004130 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b084      	sub	sp, #16
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004138:	f7ff fff0 	bl	800411c <HAL_GetTick>
 800413c:	0003      	movs	r3, r0
 800413e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	3301      	adds	r3, #1
 8004148:	d005      	beq.n	8004156 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800414a:	4b0a      	ldr	r3, [pc, #40]	; (8004174 <HAL_Delay+0x44>)
 800414c:	781b      	ldrb	r3, [r3, #0]
 800414e:	001a      	movs	r2, r3
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	189b      	adds	r3, r3, r2
 8004154:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8004156:	46c0      	nop			; (mov r8, r8)
 8004158:	f7ff ffe0 	bl	800411c <HAL_GetTick>
 800415c:	0002      	movs	r2, r0
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	1ad3      	subs	r3, r2, r3
 8004162:	68fa      	ldr	r2, [r7, #12]
 8004164:	429a      	cmp	r2, r3
 8004166:	d8f7      	bhi.n	8004158 <HAL_Delay+0x28>
  {
  }
}
 8004168:	46c0      	nop			; (mov r8, r8)
 800416a:	46c0      	nop			; (mov r8, r8)
 800416c:	46bd      	mov	sp, r7
 800416e:	b004      	add	sp, #16
 8004170:	bd80      	pop	{r7, pc}
 8004172:	46c0      	nop			; (mov r8, r8)
 8004174:	2000000c 	.word	0x2000000c

08004178 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b084      	sub	sp, #16
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004180:	230f      	movs	r3, #15
 8004182:	18fb      	adds	r3, r7, r3
 8004184:	2200      	movs	r2, #0
 8004186:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8004188:	2300      	movs	r3, #0
 800418a:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d101      	bne.n	8004196 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8004192:	2301      	movs	r3, #1
 8004194:	e125      	b.n	80043e2 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800419a:	2b00      	cmp	r3, #0
 800419c:	d10a      	bne.n	80041b4 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2200      	movs	r2, #0
 80041a2:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2234      	movs	r2, #52	; 0x34
 80041a8:	2100      	movs	r1, #0
 80041aa:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	0018      	movs	r0, r3
 80041b0:	f7ff fd02 	bl	8003bb8 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041b8:	2210      	movs	r2, #16
 80041ba:	4013      	ands	r3, r2
 80041bc:	d000      	beq.n	80041c0 <HAL_ADC_Init+0x48>
 80041be:	e103      	b.n	80043c8 <HAL_ADC_Init+0x250>
 80041c0:	230f      	movs	r3, #15
 80041c2:	18fb      	adds	r3, r7, r3
 80041c4:	781b      	ldrb	r3, [r3, #0]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d000      	beq.n	80041cc <HAL_ADC_Init+0x54>
 80041ca:	e0fd      	b.n	80043c8 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	689b      	ldr	r3, [r3, #8]
 80041d2:	2204      	movs	r2, #4
 80041d4:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 80041d6:	d000      	beq.n	80041da <HAL_ADC_Init+0x62>
 80041d8:	e0f6      	b.n	80043c8 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041de:	4a83      	ldr	r2, [pc, #524]	; (80043ec <HAL_ADC_Init+0x274>)
 80041e0:	4013      	ands	r3, r2
 80041e2:	2202      	movs	r2, #2
 80041e4:	431a      	orrs	r2, r3
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	689b      	ldr	r3, [r3, #8]
 80041f0:	2203      	movs	r2, #3
 80041f2:	4013      	ands	r3, r2
 80041f4:	2b01      	cmp	r3, #1
 80041f6:	d112      	bne.n	800421e <HAL_ADC_Init+0xa6>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	2201      	movs	r2, #1
 8004200:	4013      	ands	r3, r2
 8004202:	2b01      	cmp	r3, #1
 8004204:	d009      	beq.n	800421a <HAL_ADC_Init+0xa2>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	68da      	ldr	r2, [r3, #12]
 800420c:	2380      	movs	r3, #128	; 0x80
 800420e:	021b      	lsls	r3, r3, #8
 8004210:	401a      	ands	r2, r3
 8004212:	2380      	movs	r3, #128	; 0x80
 8004214:	021b      	lsls	r3, r3, #8
 8004216:	429a      	cmp	r2, r3
 8004218:	d101      	bne.n	800421e <HAL_ADC_Init+0xa6>
 800421a:	2301      	movs	r3, #1
 800421c:	e000      	b.n	8004220 <HAL_ADC_Init+0xa8>
 800421e:	2300      	movs	r3, #0
 8004220:	2b00      	cmp	r3, #0
 8004222:	d116      	bne.n	8004252 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	68db      	ldr	r3, [r3, #12]
 800422a:	2218      	movs	r2, #24
 800422c:	4393      	bics	r3, r2
 800422e:	0019      	movs	r1, r3
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	689a      	ldr	r2, [r3, #8]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	430a      	orrs	r2, r1
 800423a:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	691b      	ldr	r3, [r3, #16]
 8004242:	009b      	lsls	r3, r3, #2
 8004244:	0899      	lsrs	r1, r3, #2
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	685a      	ldr	r2, [r3, #4]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	430a      	orrs	r2, r1
 8004250:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	68da      	ldr	r2, [r3, #12]
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4964      	ldr	r1, [pc, #400]	; (80043f0 <HAL_ADC_Init+0x278>)
 800425e:	400a      	ands	r2, r1
 8004260:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	7e1b      	ldrb	r3, [r3, #24]
 8004266:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	7e5b      	ldrb	r3, [r3, #25]
 800426c:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800426e:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	7e9b      	ldrb	r3, [r3, #26]
 8004274:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8004276:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800427c:	2b01      	cmp	r3, #1
 800427e:	d002      	beq.n	8004286 <HAL_ADC_Init+0x10e>
 8004280:	2380      	movs	r3, #128	; 0x80
 8004282:	015b      	lsls	r3, r3, #5
 8004284:	e000      	b.n	8004288 <HAL_ADC_Init+0x110>
 8004286:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8004288:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 800428e:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	691b      	ldr	r3, [r3, #16]
 8004294:	2b02      	cmp	r3, #2
 8004296:	d101      	bne.n	800429c <HAL_ADC_Init+0x124>
 8004298:	2304      	movs	r3, #4
 800429a:	e000      	b.n	800429e <HAL_ADC_Init+0x126>
 800429c:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 800429e:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2124      	movs	r1, #36	; 0x24
 80042a4:	5c5b      	ldrb	r3, [r3, r1]
 80042a6:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80042a8:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80042aa:	68ba      	ldr	r2, [r7, #8]
 80042ac:	4313      	orrs	r3, r2
 80042ae:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	7edb      	ldrb	r3, [r3, #27]
 80042b4:	2b01      	cmp	r3, #1
 80042b6:	d115      	bne.n	80042e4 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	7e9b      	ldrb	r3, [r3, #26]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d105      	bne.n	80042cc <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	2280      	movs	r2, #128	; 0x80
 80042c4:	0252      	lsls	r2, r2, #9
 80042c6:	4313      	orrs	r3, r2
 80042c8:	60bb      	str	r3, [r7, #8]
 80042ca:	e00b      	b.n	80042e4 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042d0:	2220      	movs	r2, #32
 80042d2:	431a      	orrs	r2, r3
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042dc:	2201      	movs	r2, #1
 80042de:	431a      	orrs	r2, r3
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	69da      	ldr	r2, [r3, #28]
 80042e8:	23c2      	movs	r3, #194	; 0xc2
 80042ea:	33ff      	adds	r3, #255	; 0xff
 80042ec:	429a      	cmp	r2, r3
 80042ee:	d007      	beq.n	8004300 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80042f8:	4313      	orrs	r3, r2
 80042fa:	68ba      	ldr	r2, [r7, #8]
 80042fc:	4313      	orrs	r3, r2
 80042fe:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	68d9      	ldr	r1, [r3, #12]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	68ba      	ldr	r2, [r7, #8]
 800430c:	430a      	orrs	r2, r1
 800430e:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004314:	2380      	movs	r3, #128	; 0x80
 8004316:	055b      	lsls	r3, r3, #21
 8004318:	429a      	cmp	r2, r3
 800431a:	d01b      	beq.n	8004354 <HAL_ADC_Init+0x1dc>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004320:	2b01      	cmp	r3, #1
 8004322:	d017      	beq.n	8004354 <HAL_ADC_Init+0x1dc>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004328:	2b02      	cmp	r3, #2
 800432a:	d013      	beq.n	8004354 <HAL_ADC_Init+0x1dc>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004330:	2b03      	cmp	r3, #3
 8004332:	d00f      	beq.n	8004354 <HAL_ADC_Init+0x1dc>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004338:	2b04      	cmp	r3, #4
 800433a:	d00b      	beq.n	8004354 <HAL_ADC_Init+0x1dc>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004340:	2b05      	cmp	r3, #5
 8004342:	d007      	beq.n	8004354 <HAL_ADC_Init+0x1dc>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004348:	2b06      	cmp	r3, #6
 800434a:	d003      	beq.n	8004354 <HAL_ADC_Init+0x1dc>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004350:	2b07      	cmp	r3, #7
 8004352:	d112      	bne.n	800437a <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	695a      	ldr	r2, [r3, #20]
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	2107      	movs	r1, #7
 8004360:	438a      	bics	r2, r1
 8004362:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	6959      	ldr	r1, [r3, #20]
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800436e:	2207      	movs	r2, #7
 8004370:	401a      	ands	r2, r3
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	430a      	orrs	r2, r1
 8004378:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	68db      	ldr	r3, [r3, #12]
 8004380:	4a1c      	ldr	r2, [pc, #112]	; (80043f4 <HAL_ADC_Init+0x27c>)
 8004382:	4013      	ands	r3, r2
 8004384:	68ba      	ldr	r2, [r7, #8]
 8004386:	429a      	cmp	r2, r3
 8004388:	d10b      	bne.n	80043a2 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2200      	movs	r2, #0
 800438e:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004394:	2203      	movs	r2, #3
 8004396:	4393      	bics	r3, r2
 8004398:	2201      	movs	r2, #1
 800439a:	431a      	orrs	r2, r3
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80043a0:	e01c      	b.n	80043dc <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043a6:	2212      	movs	r2, #18
 80043a8:	4393      	bics	r3, r2
 80043aa:	2210      	movs	r2, #16
 80043ac:	431a      	orrs	r2, r3
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043b6:	2201      	movs	r2, #1
 80043b8:	431a      	orrs	r2, r3
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 80043be:	230f      	movs	r3, #15
 80043c0:	18fb      	adds	r3, r7, r3
 80043c2:	2201      	movs	r2, #1
 80043c4:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80043c6:	e009      	b.n	80043dc <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043cc:	2210      	movs	r2, #16
 80043ce:	431a      	orrs	r2, r3
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 80043d4:	230f      	movs	r3, #15
 80043d6:	18fb      	adds	r3, r7, r3
 80043d8:	2201      	movs	r2, #1
 80043da:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80043dc:	230f      	movs	r3, #15
 80043de:	18fb      	adds	r3, r7, r3
 80043e0:	781b      	ldrb	r3, [r3, #0]
}
 80043e2:	0018      	movs	r0, r3
 80043e4:	46bd      	mov	sp, r7
 80043e6:	b004      	add	sp, #16
 80043e8:	bd80      	pop	{r7, pc}
 80043ea:	46c0      	nop			; (mov r8, r8)
 80043ec:	fffffefd 	.word	0xfffffefd
 80043f0:	fffe0219 	.word	0xfffe0219
 80043f4:	833fffe7 	.word	0x833fffe7

080043f8 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b084      	sub	sp, #16
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
 8004400:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004402:	230f      	movs	r3, #15
 8004404:	18fb      	adds	r3, r7, r3
 8004406:	2200      	movs	r2, #0
 8004408:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 800440a:	2300      	movs	r3, #0
 800440c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004412:	2380      	movs	r3, #128	; 0x80
 8004414:	055b      	lsls	r3, r3, #21
 8004416:	429a      	cmp	r2, r3
 8004418:	d011      	beq.n	800443e <HAL_ADC_ConfigChannel+0x46>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800441e:	2b01      	cmp	r3, #1
 8004420:	d00d      	beq.n	800443e <HAL_ADC_ConfigChannel+0x46>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004426:	2b02      	cmp	r3, #2
 8004428:	d009      	beq.n	800443e <HAL_ADC_ConfigChannel+0x46>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800442e:	2b03      	cmp	r3, #3
 8004430:	d005      	beq.n	800443e <HAL_ADC_ConfigChannel+0x46>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004436:	2b04      	cmp	r3, #4
 8004438:	d001      	beq.n	800443e <HAL_ADC_ConfigChannel+0x46>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2234      	movs	r2, #52	; 0x34
 8004442:	5c9b      	ldrb	r3, [r3, r2]
 8004444:	2b01      	cmp	r3, #1
 8004446:	d101      	bne.n	800444c <HAL_ADC_ConfigChannel+0x54>
 8004448:	2302      	movs	r3, #2
 800444a:	e0d0      	b.n	80045ee <HAL_ADC_ConfigChannel+0x1f6>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2234      	movs	r2, #52	; 0x34
 8004450:	2101      	movs	r1, #1
 8004452:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	689b      	ldr	r3, [r3, #8]
 800445a:	2204      	movs	r2, #4
 800445c:	4013      	ands	r3, r2
 800445e:	d000      	beq.n	8004462 <HAL_ADC_ConfigChannel+0x6a>
 8004460:	e0b4      	b.n	80045cc <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	4a64      	ldr	r2, [pc, #400]	; (80045f8 <HAL_ADC_ConfigChannel+0x200>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d100      	bne.n	800446e <HAL_ADC_ConfigChannel+0x76>
 800446c:	e082      	b.n	8004574 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	2201      	movs	r2, #1
 800447a:	409a      	lsls	r2, r3
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	430a      	orrs	r2, r1
 8004482:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004488:	2380      	movs	r3, #128	; 0x80
 800448a:	055b      	lsls	r3, r3, #21
 800448c:	429a      	cmp	r2, r3
 800448e:	d037      	beq.n	8004500 <HAL_ADC_ConfigChannel+0x108>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004494:	2b01      	cmp	r3, #1
 8004496:	d033      	beq.n	8004500 <HAL_ADC_ConfigChannel+0x108>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800449c:	2b02      	cmp	r3, #2
 800449e:	d02f      	beq.n	8004500 <HAL_ADC_ConfigChannel+0x108>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044a4:	2b03      	cmp	r3, #3
 80044a6:	d02b      	beq.n	8004500 <HAL_ADC_ConfigChannel+0x108>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044ac:	2b04      	cmp	r3, #4
 80044ae:	d027      	beq.n	8004500 <HAL_ADC_ConfigChannel+0x108>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044b4:	2b05      	cmp	r3, #5
 80044b6:	d023      	beq.n	8004500 <HAL_ADC_ConfigChannel+0x108>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044bc:	2b06      	cmp	r3, #6
 80044be:	d01f      	beq.n	8004500 <HAL_ADC_ConfigChannel+0x108>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044c4:	2b07      	cmp	r3, #7
 80044c6:	d01b      	beq.n	8004500 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	689a      	ldr	r2, [r3, #8]
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	695b      	ldr	r3, [r3, #20]
 80044d2:	2107      	movs	r1, #7
 80044d4:	400b      	ands	r3, r1
 80044d6:	429a      	cmp	r2, r3
 80044d8:	d012      	beq.n	8004500 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	695a      	ldr	r2, [r3, #20]
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	2107      	movs	r1, #7
 80044e6:	438a      	bics	r2, r1
 80044e8:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	6959      	ldr	r1, [r3, #20]
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	689b      	ldr	r3, [r3, #8]
 80044f4:	2207      	movs	r2, #7
 80044f6:	401a      	ands	r2, r3
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	430a      	orrs	r2, r1
 80044fe:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	2b10      	cmp	r3, #16
 8004506:	d007      	beq.n	8004518 <HAL_ADC_ConfigChannel+0x120>
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	2b11      	cmp	r3, #17
 800450e:	d003      	beq.n	8004518 <HAL_ADC_ConfigChannel+0x120>
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	2b12      	cmp	r3, #18
 8004516:	d163      	bne.n	80045e0 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8004518:	4b38      	ldr	r3, [pc, #224]	; (80045fc <HAL_ADC_ConfigChannel+0x204>)
 800451a:	6819      	ldr	r1, [r3, #0]
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	2b10      	cmp	r3, #16
 8004522:	d009      	beq.n	8004538 <HAL_ADC_ConfigChannel+0x140>
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	2b11      	cmp	r3, #17
 800452a:	d102      	bne.n	8004532 <HAL_ADC_ConfigChannel+0x13a>
 800452c:	2380      	movs	r3, #128	; 0x80
 800452e:	03db      	lsls	r3, r3, #15
 8004530:	e004      	b.n	800453c <HAL_ADC_ConfigChannel+0x144>
 8004532:	2380      	movs	r3, #128	; 0x80
 8004534:	045b      	lsls	r3, r3, #17
 8004536:	e001      	b.n	800453c <HAL_ADC_ConfigChannel+0x144>
 8004538:	2380      	movs	r3, #128	; 0x80
 800453a:	041b      	lsls	r3, r3, #16
 800453c:	4a2f      	ldr	r2, [pc, #188]	; (80045fc <HAL_ADC_ConfigChannel+0x204>)
 800453e:	430b      	orrs	r3, r1
 8004540:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	2b10      	cmp	r3, #16
 8004548:	d14a      	bne.n	80045e0 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800454a:	4b2d      	ldr	r3, [pc, #180]	; (8004600 <HAL_ADC_ConfigChannel+0x208>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	492d      	ldr	r1, [pc, #180]	; (8004604 <HAL_ADC_ConfigChannel+0x20c>)
 8004550:	0018      	movs	r0, r3
 8004552:	f7fb fdd9 	bl	8000108 <__udivsi3>
 8004556:	0003      	movs	r3, r0
 8004558:	001a      	movs	r2, r3
 800455a:	0013      	movs	r3, r2
 800455c:	009b      	lsls	r3, r3, #2
 800455e:	189b      	adds	r3, r3, r2
 8004560:	005b      	lsls	r3, r3, #1
 8004562:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004564:	e002      	b.n	800456c <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	3b01      	subs	r3, #1
 800456a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d1f9      	bne.n	8004566 <HAL_ADC_ConfigChannel+0x16e>
 8004572:	e035      	b.n	80045e0 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	2101      	movs	r1, #1
 8004580:	4099      	lsls	r1, r3
 8004582:	000b      	movs	r3, r1
 8004584:	43d9      	mvns	r1, r3
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	400a      	ands	r2, r1
 800458c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	2b10      	cmp	r3, #16
 8004594:	d007      	beq.n	80045a6 <HAL_ADC_ConfigChannel+0x1ae>
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	2b11      	cmp	r3, #17
 800459c:	d003      	beq.n	80045a6 <HAL_ADC_ConfigChannel+0x1ae>
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	2b12      	cmp	r3, #18
 80045a4:	d11c      	bne.n	80045e0 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80045a6:	4b15      	ldr	r3, [pc, #84]	; (80045fc <HAL_ADC_ConfigChannel+0x204>)
 80045a8:	6819      	ldr	r1, [r3, #0]
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	2b10      	cmp	r3, #16
 80045b0:	d007      	beq.n	80045c2 <HAL_ADC_ConfigChannel+0x1ca>
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	2b11      	cmp	r3, #17
 80045b8:	d101      	bne.n	80045be <HAL_ADC_ConfigChannel+0x1c6>
 80045ba:	4b13      	ldr	r3, [pc, #76]	; (8004608 <HAL_ADC_ConfigChannel+0x210>)
 80045bc:	e002      	b.n	80045c4 <HAL_ADC_ConfigChannel+0x1cc>
 80045be:	4b13      	ldr	r3, [pc, #76]	; (800460c <HAL_ADC_ConfigChannel+0x214>)
 80045c0:	e000      	b.n	80045c4 <HAL_ADC_ConfigChannel+0x1cc>
 80045c2:	4b13      	ldr	r3, [pc, #76]	; (8004610 <HAL_ADC_ConfigChannel+0x218>)
 80045c4:	4a0d      	ldr	r2, [pc, #52]	; (80045fc <HAL_ADC_ConfigChannel+0x204>)
 80045c6:	400b      	ands	r3, r1
 80045c8:	6013      	str	r3, [r2, #0]
 80045ca:	e009      	b.n	80045e0 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045d0:	2220      	movs	r2, #32
 80045d2:	431a      	orrs	r2, r3
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 80045d8:	230f      	movs	r3, #15
 80045da:	18fb      	adds	r3, r7, r3
 80045dc:	2201      	movs	r2, #1
 80045de:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2234      	movs	r2, #52	; 0x34
 80045e4:	2100      	movs	r1, #0
 80045e6:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 80045e8:	230f      	movs	r3, #15
 80045ea:	18fb      	adds	r3, r7, r3
 80045ec:	781b      	ldrb	r3, [r3, #0]
}
 80045ee:	0018      	movs	r0, r3
 80045f0:	46bd      	mov	sp, r7
 80045f2:	b004      	add	sp, #16
 80045f4:	bd80      	pop	{r7, pc}
 80045f6:	46c0      	nop			; (mov r8, r8)
 80045f8:	00001001 	.word	0x00001001
 80045fc:	40012708 	.word	0x40012708
 8004600:	20000004 	.word	0x20000004
 8004604:	000f4240 	.word	0x000f4240
 8004608:	ffbfffff 	.word	0xffbfffff
 800460c:	feffffff 	.word	0xfeffffff
 8004610:	ff7fffff 	.word	0xff7fffff

08004614 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b082      	sub	sp, #8
 8004618:	af00      	add	r7, sp, #0
 800461a:	0002      	movs	r2, r0
 800461c:	1dfb      	adds	r3, r7, #7
 800461e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004620:	1dfb      	adds	r3, r7, #7
 8004622:	781b      	ldrb	r3, [r3, #0]
 8004624:	2b7f      	cmp	r3, #127	; 0x7f
 8004626:	d809      	bhi.n	800463c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004628:	1dfb      	adds	r3, r7, #7
 800462a:	781b      	ldrb	r3, [r3, #0]
 800462c:	001a      	movs	r2, r3
 800462e:	231f      	movs	r3, #31
 8004630:	401a      	ands	r2, r3
 8004632:	4b04      	ldr	r3, [pc, #16]	; (8004644 <__NVIC_EnableIRQ+0x30>)
 8004634:	2101      	movs	r1, #1
 8004636:	4091      	lsls	r1, r2
 8004638:	000a      	movs	r2, r1
 800463a:	601a      	str	r2, [r3, #0]
  }
}
 800463c:	46c0      	nop			; (mov r8, r8)
 800463e:	46bd      	mov	sp, r7
 8004640:	b002      	add	sp, #8
 8004642:	bd80      	pop	{r7, pc}
 8004644:	e000e100 	.word	0xe000e100

08004648 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004648:	b590      	push	{r4, r7, lr}
 800464a:	b083      	sub	sp, #12
 800464c:	af00      	add	r7, sp, #0
 800464e:	0002      	movs	r2, r0
 8004650:	6039      	str	r1, [r7, #0]
 8004652:	1dfb      	adds	r3, r7, #7
 8004654:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004656:	1dfb      	adds	r3, r7, #7
 8004658:	781b      	ldrb	r3, [r3, #0]
 800465a:	2b7f      	cmp	r3, #127	; 0x7f
 800465c:	d828      	bhi.n	80046b0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800465e:	4a2f      	ldr	r2, [pc, #188]	; (800471c <__NVIC_SetPriority+0xd4>)
 8004660:	1dfb      	adds	r3, r7, #7
 8004662:	781b      	ldrb	r3, [r3, #0]
 8004664:	b25b      	sxtb	r3, r3
 8004666:	089b      	lsrs	r3, r3, #2
 8004668:	33c0      	adds	r3, #192	; 0xc0
 800466a:	009b      	lsls	r3, r3, #2
 800466c:	589b      	ldr	r3, [r3, r2]
 800466e:	1dfa      	adds	r2, r7, #7
 8004670:	7812      	ldrb	r2, [r2, #0]
 8004672:	0011      	movs	r1, r2
 8004674:	2203      	movs	r2, #3
 8004676:	400a      	ands	r2, r1
 8004678:	00d2      	lsls	r2, r2, #3
 800467a:	21ff      	movs	r1, #255	; 0xff
 800467c:	4091      	lsls	r1, r2
 800467e:	000a      	movs	r2, r1
 8004680:	43d2      	mvns	r2, r2
 8004682:	401a      	ands	r2, r3
 8004684:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	019b      	lsls	r3, r3, #6
 800468a:	22ff      	movs	r2, #255	; 0xff
 800468c:	401a      	ands	r2, r3
 800468e:	1dfb      	adds	r3, r7, #7
 8004690:	781b      	ldrb	r3, [r3, #0]
 8004692:	0018      	movs	r0, r3
 8004694:	2303      	movs	r3, #3
 8004696:	4003      	ands	r3, r0
 8004698:	00db      	lsls	r3, r3, #3
 800469a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800469c:	481f      	ldr	r0, [pc, #124]	; (800471c <__NVIC_SetPriority+0xd4>)
 800469e:	1dfb      	adds	r3, r7, #7
 80046a0:	781b      	ldrb	r3, [r3, #0]
 80046a2:	b25b      	sxtb	r3, r3
 80046a4:	089b      	lsrs	r3, r3, #2
 80046a6:	430a      	orrs	r2, r1
 80046a8:	33c0      	adds	r3, #192	; 0xc0
 80046aa:	009b      	lsls	r3, r3, #2
 80046ac:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80046ae:	e031      	b.n	8004714 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80046b0:	4a1b      	ldr	r2, [pc, #108]	; (8004720 <__NVIC_SetPriority+0xd8>)
 80046b2:	1dfb      	adds	r3, r7, #7
 80046b4:	781b      	ldrb	r3, [r3, #0]
 80046b6:	0019      	movs	r1, r3
 80046b8:	230f      	movs	r3, #15
 80046ba:	400b      	ands	r3, r1
 80046bc:	3b08      	subs	r3, #8
 80046be:	089b      	lsrs	r3, r3, #2
 80046c0:	3306      	adds	r3, #6
 80046c2:	009b      	lsls	r3, r3, #2
 80046c4:	18d3      	adds	r3, r2, r3
 80046c6:	3304      	adds	r3, #4
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	1dfa      	adds	r2, r7, #7
 80046cc:	7812      	ldrb	r2, [r2, #0]
 80046ce:	0011      	movs	r1, r2
 80046d0:	2203      	movs	r2, #3
 80046d2:	400a      	ands	r2, r1
 80046d4:	00d2      	lsls	r2, r2, #3
 80046d6:	21ff      	movs	r1, #255	; 0xff
 80046d8:	4091      	lsls	r1, r2
 80046da:	000a      	movs	r2, r1
 80046dc:	43d2      	mvns	r2, r2
 80046de:	401a      	ands	r2, r3
 80046e0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	019b      	lsls	r3, r3, #6
 80046e6:	22ff      	movs	r2, #255	; 0xff
 80046e8:	401a      	ands	r2, r3
 80046ea:	1dfb      	adds	r3, r7, #7
 80046ec:	781b      	ldrb	r3, [r3, #0]
 80046ee:	0018      	movs	r0, r3
 80046f0:	2303      	movs	r3, #3
 80046f2:	4003      	ands	r3, r0
 80046f4:	00db      	lsls	r3, r3, #3
 80046f6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80046f8:	4809      	ldr	r0, [pc, #36]	; (8004720 <__NVIC_SetPriority+0xd8>)
 80046fa:	1dfb      	adds	r3, r7, #7
 80046fc:	781b      	ldrb	r3, [r3, #0]
 80046fe:	001c      	movs	r4, r3
 8004700:	230f      	movs	r3, #15
 8004702:	4023      	ands	r3, r4
 8004704:	3b08      	subs	r3, #8
 8004706:	089b      	lsrs	r3, r3, #2
 8004708:	430a      	orrs	r2, r1
 800470a:	3306      	adds	r3, #6
 800470c:	009b      	lsls	r3, r3, #2
 800470e:	18c3      	adds	r3, r0, r3
 8004710:	3304      	adds	r3, #4
 8004712:	601a      	str	r2, [r3, #0]
}
 8004714:	46c0      	nop			; (mov r8, r8)
 8004716:	46bd      	mov	sp, r7
 8004718:	b003      	add	sp, #12
 800471a:	bd90      	pop	{r4, r7, pc}
 800471c:	e000e100 	.word	0xe000e100
 8004720:	e000ed00 	.word	0xe000ed00

08004724 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b082      	sub	sp, #8
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	1e5a      	subs	r2, r3, #1
 8004730:	2380      	movs	r3, #128	; 0x80
 8004732:	045b      	lsls	r3, r3, #17
 8004734:	429a      	cmp	r2, r3
 8004736:	d301      	bcc.n	800473c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004738:	2301      	movs	r3, #1
 800473a:	e010      	b.n	800475e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800473c:	4b0a      	ldr	r3, [pc, #40]	; (8004768 <SysTick_Config+0x44>)
 800473e:	687a      	ldr	r2, [r7, #4]
 8004740:	3a01      	subs	r2, #1
 8004742:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004744:	2301      	movs	r3, #1
 8004746:	425b      	negs	r3, r3
 8004748:	2103      	movs	r1, #3
 800474a:	0018      	movs	r0, r3
 800474c:	f7ff ff7c 	bl	8004648 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004750:	4b05      	ldr	r3, [pc, #20]	; (8004768 <SysTick_Config+0x44>)
 8004752:	2200      	movs	r2, #0
 8004754:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004756:	4b04      	ldr	r3, [pc, #16]	; (8004768 <SysTick_Config+0x44>)
 8004758:	2207      	movs	r2, #7
 800475a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800475c:	2300      	movs	r3, #0
}
 800475e:	0018      	movs	r0, r3
 8004760:	46bd      	mov	sp, r7
 8004762:	b002      	add	sp, #8
 8004764:	bd80      	pop	{r7, pc}
 8004766:	46c0      	nop			; (mov r8, r8)
 8004768:	e000e010 	.word	0xe000e010

0800476c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800476c:	b580      	push	{r7, lr}
 800476e:	b084      	sub	sp, #16
 8004770:	af00      	add	r7, sp, #0
 8004772:	60b9      	str	r1, [r7, #8]
 8004774:	607a      	str	r2, [r7, #4]
 8004776:	210f      	movs	r1, #15
 8004778:	187b      	adds	r3, r7, r1
 800477a:	1c02      	adds	r2, r0, #0
 800477c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800477e:	68ba      	ldr	r2, [r7, #8]
 8004780:	187b      	adds	r3, r7, r1
 8004782:	781b      	ldrb	r3, [r3, #0]
 8004784:	b25b      	sxtb	r3, r3
 8004786:	0011      	movs	r1, r2
 8004788:	0018      	movs	r0, r3
 800478a:	f7ff ff5d 	bl	8004648 <__NVIC_SetPriority>
}
 800478e:	46c0      	nop			; (mov r8, r8)
 8004790:	46bd      	mov	sp, r7
 8004792:	b004      	add	sp, #16
 8004794:	bd80      	pop	{r7, pc}

08004796 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004796:	b580      	push	{r7, lr}
 8004798:	b082      	sub	sp, #8
 800479a:	af00      	add	r7, sp, #0
 800479c:	0002      	movs	r2, r0
 800479e:	1dfb      	adds	r3, r7, #7
 80047a0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80047a2:	1dfb      	adds	r3, r7, #7
 80047a4:	781b      	ldrb	r3, [r3, #0]
 80047a6:	b25b      	sxtb	r3, r3
 80047a8:	0018      	movs	r0, r3
 80047aa:	f7ff ff33 	bl	8004614 <__NVIC_EnableIRQ>
}
 80047ae:	46c0      	nop			; (mov r8, r8)
 80047b0:	46bd      	mov	sp, r7
 80047b2:	b002      	add	sp, #8
 80047b4:	bd80      	pop	{r7, pc}

080047b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80047b6:	b580      	push	{r7, lr}
 80047b8:	b082      	sub	sp, #8
 80047ba:	af00      	add	r7, sp, #0
 80047bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	0018      	movs	r0, r3
 80047c2:	f7ff ffaf 	bl	8004724 <SysTick_Config>
 80047c6:	0003      	movs	r3, r0
}
 80047c8:	0018      	movs	r0, r3
 80047ca:	46bd      	mov	sp, r7
 80047cc:	b002      	add	sp, #8
 80047ce:	bd80      	pop	{r7, pc}

080047d0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b084      	sub	sp, #16
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80047d8:	2300      	movs	r3, #0
 80047da:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d101      	bne.n	80047e6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80047e2:	2301      	movs	r3, #1
 80047e4:	e036      	b.n	8004854 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2221      	movs	r2, #33	; 0x21
 80047ea:	2102      	movs	r1, #2
 80047ec:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	4a18      	ldr	r2, [pc, #96]	; (800485c <HAL_DMA_Init+0x8c>)
 80047fa:	4013      	ands	r3, r2
 80047fc:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8004806:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	68db      	ldr	r3, [r3, #12]
 800480c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004812:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	695b      	ldr	r3, [r3, #20]
 8004818:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800481e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	69db      	ldr	r3, [r3, #28]
 8004824:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004826:	68fa      	ldr	r2, [r7, #12]
 8004828:	4313      	orrs	r3, r2
 800482a:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	68fa      	ldr	r2, [r7, #12]
 8004832:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	0018      	movs	r0, r3
 8004838:	f000 f8b4 	bl	80049a4 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2200      	movs	r2, #0
 8004840:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2221      	movs	r2, #33	; 0x21
 8004846:	2101      	movs	r1, #1
 8004848:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2220      	movs	r2, #32
 800484e:	2100      	movs	r1, #0
 8004850:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8004852:	2300      	movs	r3, #0
}  
 8004854:	0018      	movs	r0, r3
 8004856:	46bd      	mov	sp, r7
 8004858:	b004      	add	sp, #16
 800485a:	bd80      	pop	{r7, pc}
 800485c:	ffffc00f 	.word	0xffffc00f

08004860 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b084      	sub	sp, #16
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800487c:	2204      	movs	r2, #4
 800487e:	409a      	lsls	r2, r3
 8004880:	0013      	movs	r3, r2
 8004882:	68fa      	ldr	r2, [r7, #12]
 8004884:	4013      	ands	r3, r2
 8004886:	d024      	beq.n	80048d2 <HAL_DMA_IRQHandler+0x72>
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	2204      	movs	r2, #4
 800488c:	4013      	ands	r3, r2
 800488e:	d020      	beq.n	80048d2 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	2220      	movs	r2, #32
 8004898:	4013      	ands	r3, r2
 800489a:	d107      	bne.n	80048ac <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	681a      	ldr	r2, [r3, #0]
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	2104      	movs	r1, #4
 80048a8:	438a      	bics	r2, r1
 80048aa:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048b4:	2104      	movs	r1, #4
 80048b6:	4091      	lsls	r1, r2
 80048b8:	000a      	movs	r2, r1
 80048ba:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d100      	bne.n	80048c6 <HAL_DMA_IRQHandler+0x66>
 80048c4:	e06a      	b.n	800499c <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048ca:	687a      	ldr	r2, [r7, #4]
 80048cc:	0010      	movs	r0, r2
 80048ce:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 80048d0:	e064      	b.n	800499c <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048d6:	2202      	movs	r2, #2
 80048d8:	409a      	lsls	r2, r3
 80048da:	0013      	movs	r3, r2
 80048dc:	68fa      	ldr	r2, [r7, #12]
 80048de:	4013      	ands	r3, r2
 80048e0:	d02b      	beq.n	800493a <HAL_DMA_IRQHandler+0xda>
 80048e2:	68bb      	ldr	r3, [r7, #8]
 80048e4:	2202      	movs	r2, #2
 80048e6:	4013      	ands	r3, r2
 80048e8:	d027      	beq.n	800493a <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	2220      	movs	r2, #32
 80048f2:	4013      	ands	r3, r2
 80048f4:	d10b      	bne.n	800490e <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	681a      	ldr	r2, [r3, #0]
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	210a      	movs	r1, #10
 8004902:	438a      	bics	r2, r1
 8004904:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2221      	movs	r2, #33	; 0x21
 800490a:	2101      	movs	r1, #1
 800490c:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004916:	2102      	movs	r1, #2
 8004918:	4091      	lsls	r1, r2
 800491a:	000a      	movs	r2, r1
 800491c:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2220      	movs	r2, #32
 8004922:	2100      	movs	r1, #0
 8004924:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800492a:	2b00      	cmp	r3, #0
 800492c:	d036      	beq.n	800499c <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004932:	687a      	ldr	r2, [r7, #4]
 8004934:	0010      	movs	r0, r2
 8004936:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8004938:	e030      	b.n	800499c <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800493e:	2208      	movs	r2, #8
 8004940:	409a      	lsls	r2, r3
 8004942:	0013      	movs	r3, r2
 8004944:	68fa      	ldr	r2, [r7, #12]
 8004946:	4013      	ands	r3, r2
 8004948:	d028      	beq.n	800499c <HAL_DMA_IRQHandler+0x13c>
 800494a:	68bb      	ldr	r3, [r7, #8]
 800494c:	2208      	movs	r2, #8
 800494e:	4013      	ands	r3, r2
 8004950:	d024      	beq.n	800499c <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	681a      	ldr	r2, [r3, #0]
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	210e      	movs	r1, #14
 800495e:	438a      	bics	r2, r1
 8004960:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800496a:	2101      	movs	r1, #1
 800496c:	4091      	lsls	r1, r2
 800496e:	000a      	movs	r2, r1
 8004970:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2201      	movs	r2, #1
 8004976:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2221      	movs	r2, #33	; 0x21
 800497c:	2101      	movs	r1, #1
 800497e:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2220      	movs	r2, #32
 8004984:	2100      	movs	r1, #0
 8004986:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800498c:	2b00      	cmp	r3, #0
 800498e:	d005      	beq.n	800499c <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004994:	687a      	ldr	r2, [r7, #4]
 8004996:	0010      	movs	r0, r2
 8004998:	4798      	blx	r3
    }
   }
}  
 800499a:	e7ff      	b.n	800499c <HAL_DMA_IRQHandler+0x13c>
 800499c:	46c0      	nop			; (mov r8, r8)
 800499e:	46bd      	mov	sp, r7
 80049a0:	b004      	add	sp, #16
 80049a2:	bd80      	pop	{r7, pc}

080049a4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b082      	sub	sp, #8
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4a08      	ldr	r2, [pc, #32]	; (80049d4 <DMA_CalcBaseAndBitshift+0x30>)
 80049b2:	4694      	mov	ip, r2
 80049b4:	4463      	add	r3, ip
 80049b6:	2114      	movs	r1, #20
 80049b8:	0018      	movs	r0, r3
 80049ba:	f7fb fba5 	bl	8000108 <__udivsi3>
 80049be:	0003      	movs	r3, r0
 80049c0:	009a      	lsls	r2, r3, #2
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	4a03      	ldr	r2, [pc, #12]	; (80049d8 <DMA_CalcBaseAndBitshift+0x34>)
 80049ca:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 80049cc:	46c0      	nop			; (mov r8, r8)
 80049ce:	46bd      	mov	sp, r7
 80049d0:	b002      	add	sp, #8
 80049d2:	bd80      	pop	{r7, pc}
 80049d4:	bffdfff8 	.word	0xbffdfff8
 80049d8:	40020000 	.word	0x40020000

080049dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b086      	sub	sp, #24
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
 80049e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80049e6:	2300      	movs	r3, #0
 80049e8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80049ea:	e149      	b.n	8004c80 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	2101      	movs	r1, #1
 80049f2:	697a      	ldr	r2, [r7, #20]
 80049f4:	4091      	lsls	r1, r2
 80049f6:	000a      	movs	r2, r1
 80049f8:	4013      	ands	r3, r2
 80049fa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d100      	bne.n	8004a04 <HAL_GPIO_Init+0x28>
 8004a02:	e13a      	b.n	8004c7a <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	685b      	ldr	r3, [r3, #4]
 8004a08:	2203      	movs	r2, #3
 8004a0a:	4013      	ands	r3, r2
 8004a0c:	2b01      	cmp	r3, #1
 8004a0e:	d005      	beq.n	8004a1c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	2203      	movs	r2, #3
 8004a16:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004a18:	2b02      	cmp	r3, #2
 8004a1a:	d130      	bne.n	8004a7e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	689b      	ldr	r3, [r3, #8]
 8004a20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8004a22:	697b      	ldr	r3, [r7, #20]
 8004a24:	005b      	lsls	r3, r3, #1
 8004a26:	2203      	movs	r2, #3
 8004a28:	409a      	lsls	r2, r3
 8004a2a:	0013      	movs	r3, r2
 8004a2c:	43da      	mvns	r2, r3
 8004a2e:	693b      	ldr	r3, [r7, #16]
 8004a30:	4013      	ands	r3, r2
 8004a32:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	68da      	ldr	r2, [r3, #12]
 8004a38:	697b      	ldr	r3, [r7, #20]
 8004a3a:	005b      	lsls	r3, r3, #1
 8004a3c:	409a      	lsls	r2, r3
 8004a3e:	0013      	movs	r3, r2
 8004a40:	693a      	ldr	r2, [r7, #16]
 8004a42:	4313      	orrs	r3, r2
 8004a44:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	693a      	ldr	r2, [r7, #16]
 8004a4a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	685b      	ldr	r3, [r3, #4]
 8004a50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004a52:	2201      	movs	r2, #1
 8004a54:	697b      	ldr	r3, [r7, #20]
 8004a56:	409a      	lsls	r2, r3
 8004a58:	0013      	movs	r3, r2
 8004a5a:	43da      	mvns	r2, r3
 8004a5c:	693b      	ldr	r3, [r7, #16]
 8004a5e:	4013      	ands	r3, r2
 8004a60:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	091b      	lsrs	r3, r3, #4
 8004a68:	2201      	movs	r2, #1
 8004a6a:	401a      	ands	r2, r3
 8004a6c:	697b      	ldr	r3, [r7, #20]
 8004a6e:	409a      	lsls	r2, r3
 8004a70:	0013      	movs	r3, r2
 8004a72:	693a      	ldr	r2, [r7, #16]
 8004a74:	4313      	orrs	r3, r2
 8004a76:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	693a      	ldr	r2, [r7, #16]
 8004a7c:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	2203      	movs	r2, #3
 8004a84:	4013      	ands	r3, r2
 8004a86:	2b03      	cmp	r3, #3
 8004a88:	d017      	beq.n	8004aba <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	68db      	ldr	r3, [r3, #12]
 8004a8e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8004a90:	697b      	ldr	r3, [r7, #20]
 8004a92:	005b      	lsls	r3, r3, #1
 8004a94:	2203      	movs	r2, #3
 8004a96:	409a      	lsls	r2, r3
 8004a98:	0013      	movs	r3, r2
 8004a9a:	43da      	mvns	r2, r3
 8004a9c:	693b      	ldr	r3, [r7, #16]
 8004a9e:	4013      	ands	r3, r2
 8004aa0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	689a      	ldr	r2, [r3, #8]
 8004aa6:	697b      	ldr	r3, [r7, #20]
 8004aa8:	005b      	lsls	r3, r3, #1
 8004aaa:	409a      	lsls	r2, r3
 8004aac:	0013      	movs	r3, r2
 8004aae:	693a      	ldr	r2, [r7, #16]
 8004ab0:	4313      	orrs	r3, r2
 8004ab2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	693a      	ldr	r2, [r7, #16]
 8004ab8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	2203      	movs	r2, #3
 8004ac0:	4013      	ands	r3, r2
 8004ac2:	2b02      	cmp	r3, #2
 8004ac4:	d123      	bne.n	8004b0e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004ac6:	697b      	ldr	r3, [r7, #20]
 8004ac8:	08da      	lsrs	r2, r3, #3
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	3208      	adds	r2, #8
 8004ace:	0092      	lsls	r2, r2, #2
 8004ad0:	58d3      	ldr	r3, [r2, r3]
 8004ad2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004ad4:	697b      	ldr	r3, [r7, #20]
 8004ad6:	2207      	movs	r2, #7
 8004ad8:	4013      	ands	r3, r2
 8004ada:	009b      	lsls	r3, r3, #2
 8004adc:	220f      	movs	r2, #15
 8004ade:	409a      	lsls	r2, r3
 8004ae0:	0013      	movs	r3, r2
 8004ae2:	43da      	mvns	r2, r3
 8004ae4:	693b      	ldr	r3, [r7, #16]
 8004ae6:	4013      	ands	r3, r2
 8004ae8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	691a      	ldr	r2, [r3, #16]
 8004aee:	697b      	ldr	r3, [r7, #20]
 8004af0:	2107      	movs	r1, #7
 8004af2:	400b      	ands	r3, r1
 8004af4:	009b      	lsls	r3, r3, #2
 8004af6:	409a      	lsls	r2, r3
 8004af8:	0013      	movs	r3, r2
 8004afa:	693a      	ldr	r2, [r7, #16]
 8004afc:	4313      	orrs	r3, r2
 8004afe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004b00:	697b      	ldr	r3, [r7, #20]
 8004b02:	08da      	lsrs	r2, r3, #3
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	3208      	adds	r2, #8
 8004b08:	0092      	lsls	r2, r2, #2
 8004b0a:	6939      	ldr	r1, [r7, #16]
 8004b0c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8004b14:	697b      	ldr	r3, [r7, #20]
 8004b16:	005b      	lsls	r3, r3, #1
 8004b18:	2203      	movs	r2, #3
 8004b1a:	409a      	lsls	r2, r3
 8004b1c:	0013      	movs	r3, r2
 8004b1e:	43da      	mvns	r2, r3
 8004b20:	693b      	ldr	r3, [r7, #16]
 8004b22:	4013      	ands	r3, r2
 8004b24:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	685b      	ldr	r3, [r3, #4]
 8004b2a:	2203      	movs	r2, #3
 8004b2c:	401a      	ands	r2, r3
 8004b2e:	697b      	ldr	r3, [r7, #20]
 8004b30:	005b      	lsls	r3, r3, #1
 8004b32:	409a      	lsls	r2, r3
 8004b34:	0013      	movs	r3, r2
 8004b36:	693a      	ldr	r2, [r7, #16]
 8004b38:	4313      	orrs	r3, r2
 8004b3a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	693a      	ldr	r2, [r7, #16]
 8004b40:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	685a      	ldr	r2, [r3, #4]
 8004b46:	23c0      	movs	r3, #192	; 0xc0
 8004b48:	029b      	lsls	r3, r3, #10
 8004b4a:	4013      	ands	r3, r2
 8004b4c:	d100      	bne.n	8004b50 <HAL_GPIO_Init+0x174>
 8004b4e:	e094      	b.n	8004c7a <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004b50:	4b51      	ldr	r3, [pc, #324]	; (8004c98 <HAL_GPIO_Init+0x2bc>)
 8004b52:	699a      	ldr	r2, [r3, #24]
 8004b54:	4b50      	ldr	r3, [pc, #320]	; (8004c98 <HAL_GPIO_Init+0x2bc>)
 8004b56:	2101      	movs	r1, #1
 8004b58:	430a      	orrs	r2, r1
 8004b5a:	619a      	str	r2, [r3, #24]
 8004b5c:	4b4e      	ldr	r3, [pc, #312]	; (8004c98 <HAL_GPIO_Init+0x2bc>)
 8004b5e:	699b      	ldr	r3, [r3, #24]
 8004b60:	2201      	movs	r2, #1
 8004b62:	4013      	ands	r3, r2
 8004b64:	60bb      	str	r3, [r7, #8]
 8004b66:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004b68:	4a4c      	ldr	r2, [pc, #304]	; (8004c9c <HAL_GPIO_Init+0x2c0>)
 8004b6a:	697b      	ldr	r3, [r7, #20]
 8004b6c:	089b      	lsrs	r3, r3, #2
 8004b6e:	3302      	adds	r3, #2
 8004b70:	009b      	lsls	r3, r3, #2
 8004b72:	589b      	ldr	r3, [r3, r2]
 8004b74:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004b76:	697b      	ldr	r3, [r7, #20]
 8004b78:	2203      	movs	r2, #3
 8004b7a:	4013      	ands	r3, r2
 8004b7c:	009b      	lsls	r3, r3, #2
 8004b7e:	220f      	movs	r2, #15
 8004b80:	409a      	lsls	r2, r3
 8004b82:	0013      	movs	r3, r2
 8004b84:	43da      	mvns	r2, r3
 8004b86:	693b      	ldr	r3, [r7, #16]
 8004b88:	4013      	ands	r3, r2
 8004b8a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004b8c:	687a      	ldr	r2, [r7, #4]
 8004b8e:	2390      	movs	r3, #144	; 0x90
 8004b90:	05db      	lsls	r3, r3, #23
 8004b92:	429a      	cmp	r2, r3
 8004b94:	d00d      	beq.n	8004bb2 <HAL_GPIO_Init+0x1d6>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	4a41      	ldr	r2, [pc, #260]	; (8004ca0 <HAL_GPIO_Init+0x2c4>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d007      	beq.n	8004bae <HAL_GPIO_Init+0x1d2>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	4a40      	ldr	r2, [pc, #256]	; (8004ca4 <HAL_GPIO_Init+0x2c8>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d101      	bne.n	8004baa <HAL_GPIO_Init+0x1ce>
 8004ba6:	2302      	movs	r3, #2
 8004ba8:	e004      	b.n	8004bb4 <HAL_GPIO_Init+0x1d8>
 8004baa:	2305      	movs	r3, #5
 8004bac:	e002      	b.n	8004bb4 <HAL_GPIO_Init+0x1d8>
 8004bae:	2301      	movs	r3, #1
 8004bb0:	e000      	b.n	8004bb4 <HAL_GPIO_Init+0x1d8>
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	697a      	ldr	r2, [r7, #20]
 8004bb6:	2103      	movs	r1, #3
 8004bb8:	400a      	ands	r2, r1
 8004bba:	0092      	lsls	r2, r2, #2
 8004bbc:	4093      	lsls	r3, r2
 8004bbe:	693a      	ldr	r2, [r7, #16]
 8004bc0:	4313      	orrs	r3, r2
 8004bc2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004bc4:	4935      	ldr	r1, [pc, #212]	; (8004c9c <HAL_GPIO_Init+0x2c0>)
 8004bc6:	697b      	ldr	r3, [r7, #20]
 8004bc8:	089b      	lsrs	r3, r3, #2
 8004bca:	3302      	adds	r3, #2
 8004bcc:	009b      	lsls	r3, r3, #2
 8004bce:	693a      	ldr	r2, [r7, #16]
 8004bd0:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004bd2:	4b35      	ldr	r3, [pc, #212]	; (8004ca8 <HAL_GPIO_Init+0x2cc>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	43da      	mvns	r2, r3
 8004bdc:	693b      	ldr	r3, [r7, #16]
 8004bde:	4013      	ands	r3, r2
 8004be0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	685a      	ldr	r2, [r3, #4]
 8004be6:	2380      	movs	r3, #128	; 0x80
 8004be8:	025b      	lsls	r3, r3, #9
 8004bea:	4013      	ands	r3, r2
 8004bec:	d003      	beq.n	8004bf6 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8004bee:	693a      	ldr	r2, [r7, #16]
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	4313      	orrs	r3, r2
 8004bf4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8004bf6:	4b2c      	ldr	r3, [pc, #176]	; (8004ca8 <HAL_GPIO_Init+0x2cc>)
 8004bf8:	693a      	ldr	r2, [r7, #16]
 8004bfa:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8004bfc:	4b2a      	ldr	r3, [pc, #168]	; (8004ca8 <HAL_GPIO_Init+0x2cc>)
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	43da      	mvns	r2, r3
 8004c06:	693b      	ldr	r3, [r7, #16]
 8004c08:	4013      	ands	r3, r2
 8004c0a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	685a      	ldr	r2, [r3, #4]
 8004c10:	2380      	movs	r3, #128	; 0x80
 8004c12:	029b      	lsls	r3, r3, #10
 8004c14:	4013      	ands	r3, r2
 8004c16:	d003      	beq.n	8004c20 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8004c18:	693a      	ldr	r2, [r7, #16]
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	4313      	orrs	r3, r2
 8004c1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004c20:	4b21      	ldr	r3, [pc, #132]	; (8004ca8 <HAL_GPIO_Init+0x2cc>)
 8004c22:	693a      	ldr	r2, [r7, #16]
 8004c24:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004c26:	4b20      	ldr	r3, [pc, #128]	; (8004ca8 <HAL_GPIO_Init+0x2cc>)
 8004c28:	689b      	ldr	r3, [r3, #8]
 8004c2a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	43da      	mvns	r2, r3
 8004c30:	693b      	ldr	r3, [r7, #16]
 8004c32:	4013      	ands	r3, r2
 8004c34:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	685a      	ldr	r2, [r3, #4]
 8004c3a:	2380      	movs	r3, #128	; 0x80
 8004c3c:	035b      	lsls	r3, r3, #13
 8004c3e:	4013      	ands	r3, r2
 8004c40:	d003      	beq.n	8004c4a <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8004c42:	693a      	ldr	r2, [r7, #16]
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	4313      	orrs	r3, r2
 8004c48:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8004c4a:	4b17      	ldr	r3, [pc, #92]	; (8004ca8 <HAL_GPIO_Init+0x2cc>)
 8004c4c:	693a      	ldr	r2, [r7, #16]
 8004c4e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8004c50:	4b15      	ldr	r3, [pc, #84]	; (8004ca8 <HAL_GPIO_Init+0x2cc>)
 8004c52:	68db      	ldr	r3, [r3, #12]
 8004c54:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	43da      	mvns	r2, r3
 8004c5a:	693b      	ldr	r3, [r7, #16]
 8004c5c:	4013      	ands	r3, r2
 8004c5e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	685a      	ldr	r2, [r3, #4]
 8004c64:	2380      	movs	r3, #128	; 0x80
 8004c66:	039b      	lsls	r3, r3, #14
 8004c68:	4013      	ands	r3, r2
 8004c6a:	d003      	beq.n	8004c74 <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 8004c6c:	693a      	ldr	r2, [r7, #16]
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	4313      	orrs	r3, r2
 8004c72:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8004c74:	4b0c      	ldr	r3, [pc, #48]	; (8004ca8 <HAL_GPIO_Init+0x2cc>)
 8004c76:	693a      	ldr	r2, [r7, #16]
 8004c78:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8004c7a:	697b      	ldr	r3, [r7, #20]
 8004c7c:	3301      	adds	r3, #1
 8004c7e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	681a      	ldr	r2, [r3, #0]
 8004c84:	697b      	ldr	r3, [r7, #20]
 8004c86:	40da      	lsrs	r2, r3
 8004c88:	1e13      	subs	r3, r2, #0
 8004c8a:	d000      	beq.n	8004c8e <HAL_GPIO_Init+0x2b2>
 8004c8c:	e6ae      	b.n	80049ec <HAL_GPIO_Init+0x10>
  } 
}
 8004c8e:	46c0      	nop			; (mov r8, r8)
 8004c90:	46c0      	nop			; (mov r8, r8)
 8004c92:	46bd      	mov	sp, r7
 8004c94:	b006      	add	sp, #24
 8004c96:	bd80      	pop	{r7, pc}
 8004c98:	40021000 	.word	0x40021000
 8004c9c:	40010000 	.word	0x40010000
 8004ca0:	48000400 	.word	0x48000400
 8004ca4:	48000800 	.word	0x48000800
 8004ca8:	40010400 	.word	0x40010400

08004cac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b084      	sub	sp, #16
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
 8004cb4:	000a      	movs	r2, r1
 8004cb6:	1cbb      	adds	r3, r7, #2
 8004cb8:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	691b      	ldr	r3, [r3, #16]
 8004cbe:	1cba      	adds	r2, r7, #2
 8004cc0:	8812      	ldrh	r2, [r2, #0]
 8004cc2:	4013      	ands	r3, r2
 8004cc4:	d004      	beq.n	8004cd0 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8004cc6:	230f      	movs	r3, #15
 8004cc8:	18fb      	adds	r3, r7, r3
 8004cca:	2201      	movs	r2, #1
 8004ccc:	701a      	strb	r2, [r3, #0]
 8004cce:	e003      	b.n	8004cd8 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004cd0:	230f      	movs	r3, #15
 8004cd2:	18fb      	adds	r3, r7, r3
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8004cd8:	230f      	movs	r3, #15
 8004cda:	18fb      	adds	r3, r7, r3
 8004cdc:	781b      	ldrb	r3, [r3, #0]
  }
 8004cde:	0018      	movs	r0, r3
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	b004      	add	sp, #16
 8004ce4:	bd80      	pop	{r7, pc}

08004ce6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004ce6:	b580      	push	{r7, lr}
 8004ce8:	b082      	sub	sp, #8
 8004cea:	af00      	add	r7, sp, #0
 8004cec:	6078      	str	r0, [r7, #4]
 8004cee:	0008      	movs	r0, r1
 8004cf0:	0011      	movs	r1, r2
 8004cf2:	1cbb      	adds	r3, r7, #2
 8004cf4:	1c02      	adds	r2, r0, #0
 8004cf6:	801a      	strh	r2, [r3, #0]
 8004cf8:	1c7b      	adds	r3, r7, #1
 8004cfa:	1c0a      	adds	r2, r1, #0
 8004cfc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004cfe:	1c7b      	adds	r3, r7, #1
 8004d00:	781b      	ldrb	r3, [r3, #0]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d004      	beq.n	8004d10 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004d06:	1cbb      	adds	r3, r7, #2
 8004d08:	881a      	ldrh	r2, [r3, #0]
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004d0e:	e003      	b.n	8004d18 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004d10:	1cbb      	adds	r3, r7, #2
 8004d12:	881a      	ldrh	r2, [r3, #0]
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004d18:	46c0      	nop			; (mov r8, r8)
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	b002      	add	sp, #8
 8004d1e:	bd80      	pop	{r7, pc}

08004d20 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b082      	sub	sp, #8
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d101      	bne.n	8004d32 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004d2e:	2301      	movs	r3, #1
 8004d30:	e082      	b.n	8004e38 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2241      	movs	r2, #65	; 0x41
 8004d36:	5c9b      	ldrb	r3, [r3, r2]
 8004d38:	b2db      	uxtb	r3, r3
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d107      	bne.n	8004d4e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2240      	movs	r2, #64	; 0x40
 8004d42:	2100      	movs	r1, #0
 8004d44:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	0018      	movs	r0, r3
 8004d4a:	f7fe ffa9 	bl	8003ca0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2241      	movs	r2, #65	; 0x41
 8004d52:	2124      	movs	r1, #36	; 0x24
 8004d54:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	681a      	ldr	r2, [r3, #0]
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	2101      	movs	r1, #1
 8004d62:	438a      	bics	r2, r1
 8004d64:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	685a      	ldr	r2, [r3, #4]
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4934      	ldr	r1, [pc, #208]	; (8004e40 <HAL_I2C_Init+0x120>)
 8004d70:	400a      	ands	r2, r1
 8004d72:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	689a      	ldr	r2, [r3, #8]
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	4931      	ldr	r1, [pc, #196]	; (8004e44 <HAL_I2C_Init+0x124>)
 8004d80:	400a      	ands	r2, r1
 8004d82:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	68db      	ldr	r3, [r3, #12]
 8004d88:	2b01      	cmp	r3, #1
 8004d8a:	d108      	bne.n	8004d9e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	689a      	ldr	r2, [r3, #8]
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	2180      	movs	r1, #128	; 0x80
 8004d96:	0209      	lsls	r1, r1, #8
 8004d98:	430a      	orrs	r2, r1
 8004d9a:	609a      	str	r2, [r3, #8]
 8004d9c:	e007      	b.n	8004dae <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	689a      	ldr	r2, [r3, #8]
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	2184      	movs	r1, #132	; 0x84
 8004da8:	0209      	lsls	r1, r1, #8
 8004daa:	430a      	orrs	r2, r1
 8004dac:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	68db      	ldr	r3, [r3, #12]
 8004db2:	2b02      	cmp	r3, #2
 8004db4:	d104      	bne.n	8004dc0 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	2280      	movs	r2, #128	; 0x80
 8004dbc:	0112      	lsls	r2, r2, #4
 8004dbe:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	685a      	ldr	r2, [r3, #4]
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	491f      	ldr	r1, [pc, #124]	; (8004e48 <HAL_I2C_Init+0x128>)
 8004dcc:	430a      	orrs	r2, r1
 8004dce:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	68da      	ldr	r2, [r3, #12]
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	491a      	ldr	r1, [pc, #104]	; (8004e44 <HAL_I2C_Init+0x124>)
 8004ddc:	400a      	ands	r2, r1
 8004dde:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	691a      	ldr	r2, [r3, #16]
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	695b      	ldr	r3, [r3, #20]
 8004de8:	431a      	orrs	r2, r3
 8004dea:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	699b      	ldr	r3, [r3, #24]
 8004df0:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	430a      	orrs	r2, r1
 8004df8:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	69d9      	ldr	r1, [r3, #28]
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6a1a      	ldr	r2, [r3, #32]
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	430a      	orrs	r2, r1
 8004e08:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	681a      	ldr	r2, [r3, #0]
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	2101      	movs	r1, #1
 8004e16:	430a      	orrs	r2, r1
 8004e18:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2241      	movs	r2, #65	; 0x41
 8004e24:	2120      	movs	r1, #32
 8004e26:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2242      	movs	r2, #66	; 0x42
 8004e32:	2100      	movs	r1, #0
 8004e34:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004e36:	2300      	movs	r3, #0
}
 8004e38:	0018      	movs	r0, r3
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	b002      	add	sp, #8
 8004e3e:	bd80      	pop	{r7, pc}
 8004e40:	f0ffffff 	.word	0xf0ffffff
 8004e44:	ffff7fff 	.word	0xffff7fff
 8004e48:	02008000 	.word	0x02008000

08004e4c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b082      	sub	sp, #8
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
 8004e54:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2241      	movs	r2, #65	; 0x41
 8004e5a:	5c9b      	ldrb	r3, [r3, r2]
 8004e5c:	b2db      	uxtb	r3, r3
 8004e5e:	2b20      	cmp	r3, #32
 8004e60:	d138      	bne.n	8004ed4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2240      	movs	r2, #64	; 0x40
 8004e66:	5c9b      	ldrb	r3, [r3, r2]
 8004e68:	2b01      	cmp	r3, #1
 8004e6a:	d101      	bne.n	8004e70 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004e6c:	2302      	movs	r3, #2
 8004e6e:	e032      	b.n	8004ed6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2240      	movs	r2, #64	; 0x40
 8004e74:	2101      	movs	r1, #1
 8004e76:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2241      	movs	r2, #65	; 0x41
 8004e7c:	2124      	movs	r1, #36	; 0x24
 8004e7e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	681a      	ldr	r2, [r3, #0]
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	2101      	movs	r1, #1
 8004e8c:	438a      	bics	r2, r1
 8004e8e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	681a      	ldr	r2, [r3, #0]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4911      	ldr	r1, [pc, #68]	; (8004ee0 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8004e9c:	400a      	ands	r2, r1
 8004e9e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	6819      	ldr	r1, [r3, #0]
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	683a      	ldr	r2, [r7, #0]
 8004eac:	430a      	orrs	r2, r1
 8004eae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	681a      	ldr	r2, [r3, #0]
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	2101      	movs	r1, #1
 8004ebc:	430a      	orrs	r2, r1
 8004ebe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2241      	movs	r2, #65	; 0x41
 8004ec4:	2120      	movs	r1, #32
 8004ec6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2240      	movs	r2, #64	; 0x40
 8004ecc:	2100      	movs	r1, #0
 8004ece:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	e000      	b.n	8004ed6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004ed4:	2302      	movs	r3, #2
  }
}
 8004ed6:	0018      	movs	r0, r3
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	b002      	add	sp, #8
 8004edc:	bd80      	pop	{r7, pc}
 8004ede:	46c0      	nop			; (mov r8, r8)
 8004ee0:	ffffefff 	.word	0xffffefff

08004ee4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b084      	sub	sp, #16
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
 8004eec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2241      	movs	r2, #65	; 0x41
 8004ef2:	5c9b      	ldrb	r3, [r3, r2]
 8004ef4:	b2db      	uxtb	r3, r3
 8004ef6:	2b20      	cmp	r3, #32
 8004ef8:	d139      	bne.n	8004f6e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2240      	movs	r2, #64	; 0x40
 8004efe:	5c9b      	ldrb	r3, [r3, r2]
 8004f00:	2b01      	cmp	r3, #1
 8004f02:	d101      	bne.n	8004f08 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004f04:	2302      	movs	r3, #2
 8004f06:	e033      	b.n	8004f70 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2240      	movs	r2, #64	; 0x40
 8004f0c:	2101      	movs	r1, #1
 8004f0e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2241      	movs	r2, #65	; 0x41
 8004f14:	2124      	movs	r1, #36	; 0x24
 8004f16:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	681a      	ldr	r2, [r3, #0]
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	2101      	movs	r1, #1
 8004f24:	438a      	bics	r2, r1
 8004f26:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	4a11      	ldr	r2, [pc, #68]	; (8004f78 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8004f34:	4013      	ands	r3, r2
 8004f36:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	021b      	lsls	r3, r3, #8
 8004f3c:	68fa      	ldr	r2, [r7, #12]
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	68fa      	ldr	r2, [r7, #12]
 8004f48:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	681a      	ldr	r2, [r3, #0]
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	2101      	movs	r1, #1
 8004f56:	430a      	orrs	r2, r1
 8004f58:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2241      	movs	r2, #65	; 0x41
 8004f5e:	2120      	movs	r1, #32
 8004f60:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2240      	movs	r2, #64	; 0x40
 8004f66:	2100      	movs	r1, #0
 8004f68:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	e000      	b.n	8004f70 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004f6e:	2302      	movs	r3, #2
  }
}
 8004f70:	0018      	movs	r0, r3
 8004f72:	46bd      	mov	sp, r7
 8004f74:	b004      	add	sp, #16
 8004f76:	bd80      	pop	{r7, pc}
 8004f78:	fffff0ff 	.word	0xfffff0ff

08004f7c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b088      	sub	sp, #32
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d102      	bne.n	8004f90 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	f000 fb76 	bl	800567c <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	2201      	movs	r2, #1
 8004f96:	4013      	ands	r3, r2
 8004f98:	d100      	bne.n	8004f9c <HAL_RCC_OscConfig+0x20>
 8004f9a:	e08e      	b.n	80050ba <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004f9c:	4bc5      	ldr	r3, [pc, #788]	; (80052b4 <HAL_RCC_OscConfig+0x338>)
 8004f9e:	685b      	ldr	r3, [r3, #4]
 8004fa0:	220c      	movs	r2, #12
 8004fa2:	4013      	ands	r3, r2
 8004fa4:	2b04      	cmp	r3, #4
 8004fa6:	d00e      	beq.n	8004fc6 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004fa8:	4bc2      	ldr	r3, [pc, #776]	; (80052b4 <HAL_RCC_OscConfig+0x338>)
 8004faa:	685b      	ldr	r3, [r3, #4]
 8004fac:	220c      	movs	r2, #12
 8004fae:	4013      	ands	r3, r2
 8004fb0:	2b08      	cmp	r3, #8
 8004fb2:	d117      	bne.n	8004fe4 <HAL_RCC_OscConfig+0x68>
 8004fb4:	4bbf      	ldr	r3, [pc, #764]	; (80052b4 <HAL_RCC_OscConfig+0x338>)
 8004fb6:	685a      	ldr	r2, [r3, #4]
 8004fb8:	23c0      	movs	r3, #192	; 0xc0
 8004fba:	025b      	lsls	r3, r3, #9
 8004fbc:	401a      	ands	r2, r3
 8004fbe:	2380      	movs	r3, #128	; 0x80
 8004fc0:	025b      	lsls	r3, r3, #9
 8004fc2:	429a      	cmp	r2, r3
 8004fc4:	d10e      	bne.n	8004fe4 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004fc6:	4bbb      	ldr	r3, [pc, #748]	; (80052b4 <HAL_RCC_OscConfig+0x338>)
 8004fc8:	681a      	ldr	r2, [r3, #0]
 8004fca:	2380      	movs	r3, #128	; 0x80
 8004fcc:	029b      	lsls	r3, r3, #10
 8004fce:	4013      	ands	r3, r2
 8004fd0:	d100      	bne.n	8004fd4 <HAL_RCC_OscConfig+0x58>
 8004fd2:	e071      	b.n	80050b8 <HAL_RCC_OscConfig+0x13c>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	685b      	ldr	r3, [r3, #4]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d000      	beq.n	8004fde <HAL_RCC_OscConfig+0x62>
 8004fdc:	e06c      	b.n	80050b8 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8004fde:	2301      	movs	r3, #1
 8004fe0:	f000 fb4c 	bl	800567c <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	685b      	ldr	r3, [r3, #4]
 8004fe8:	2b01      	cmp	r3, #1
 8004fea:	d107      	bne.n	8004ffc <HAL_RCC_OscConfig+0x80>
 8004fec:	4bb1      	ldr	r3, [pc, #708]	; (80052b4 <HAL_RCC_OscConfig+0x338>)
 8004fee:	681a      	ldr	r2, [r3, #0]
 8004ff0:	4bb0      	ldr	r3, [pc, #704]	; (80052b4 <HAL_RCC_OscConfig+0x338>)
 8004ff2:	2180      	movs	r1, #128	; 0x80
 8004ff4:	0249      	lsls	r1, r1, #9
 8004ff6:	430a      	orrs	r2, r1
 8004ff8:	601a      	str	r2, [r3, #0]
 8004ffa:	e02f      	b.n	800505c <HAL_RCC_OscConfig+0xe0>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	685b      	ldr	r3, [r3, #4]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d10c      	bne.n	800501e <HAL_RCC_OscConfig+0xa2>
 8005004:	4bab      	ldr	r3, [pc, #684]	; (80052b4 <HAL_RCC_OscConfig+0x338>)
 8005006:	681a      	ldr	r2, [r3, #0]
 8005008:	4baa      	ldr	r3, [pc, #680]	; (80052b4 <HAL_RCC_OscConfig+0x338>)
 800500a:	49ab      	ldr	r1, [pc, #684]	; (80052b8 <HAL_RCC_OscConfig+0x33c>)
 800500c:	400a      	ands	r2, r1
 800500e:	601a      	str	r2, [r3, #0]
 8005010:	4ba8      	ldr	r3, [pc, #672]	; (80052b4 <HAL_RCC_OscConfig+0x338>)
 8005012:	681a      	ldr	r2, [r3, #0]
 8005014:	4ba7      	ldr	r3, [pc, #668]	; (80052b4 <HAL_RCC_OscConfig+0x338>)
 8005016:	49a9      	ldr	r1, [pc, #676]	; (80052bc <HAL_RCC_OscConfig+0x340>)
 8005018:	400a      	ands	r2, r1
 800501a:	601a      	str	r2, [r3, #0]
 800501c:	e01e      	b.n	800505c <HAL_RCC_OscConfig+0xe0>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	685b      	ldr	r3, [r3, #4]
 8005022:	2b05      	cmp	r3, #5
 8005024:	d10e      	bne.n	8005044 <HAL_RCC_OscConfig+0xc8>
 8005026:	4ba3      	ldr	r3, [pc, #652]	; (80052b4 <HAL_RCC_OscConfig+0x338>)
 8005028:	681a      	ldr	r2, [r3, #0]
 800502a:	4ba2      	ldr	r3, [pc, #648]	; (80052b4 <HAL_RCC_OscConfig+0x338>)
 800502c:	2180      	movs	r1, #128	; 0x80
 800502e:	02c9      	lsls	r1, r1, #11
 8005030:	430a      	orrs	r2, r1
 8005032:	601a      	str	r2, [r3, #0]
 8005034:	4b9f      	ldr	r3, [pc, #636]	; (80052b4 <HAL_RCC_OscConfig+0x338>)
 8005036:	681a      	ldr	r2, [r3, #0]
 8005038:	4b9e      	ldr	r3, [pc, #632]	; (80052b4 <HAL_RCC_OscConfig+0x338>)
 800503a:	2180      	movs	r1, #128	; 0x80
 800503c:	0249      	lsls	r1, r1, #9
 800503e:	430a      	orrs	r2, r1
 8005040:	601a      	str	r2, [r3, #0]
 8005042:	e00b      	b.n	800505c <HAL_RCC_OscConfig+0xe0>
 8005044:	4b9b      	ldr	r3, [pc, #620]	; (80052b4 <HAL_RCC_OscConfig+0x338>)
 8005046:	681a      	ldr	r2, [r3, #0]
 8005048:	4b9a      	ldr	r3, [pc, #616]	; (80052b4 <HAL_RCC_OscConfig+0x338>)
 800504a:	499b      	ldr	r1, [pc, #620]	; (80052b8 <HAL_RCC_OscConfig+0x33c>)
 800504c:	400a      	ands	r2, r1
 800504e:	601a      	str	r2, [r3, #0]
 8005050:	4b98      	ldr	r3, [pc, #608]	; (80052b4 <HAL_RCC_OscConfig+0x338>)
 8005052:	681a      	ldr	r2, [r3, #0]
 8005054:	4b97      	ldr	r3, [pc, #604]	; (80052b4 <HAL_RCC_OscConfig+0x338>)
 8005056:	4999      	ldr	r1, [pc, #612]	; (80052bc <HAL_RCC_OscConfig+0x340>)
 8005058:	400a      	ands	r2, r1
 800505a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	685b      	ldr	r3, [r3, #4]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d014      	beq.n	800508e <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005064:	f7ff f85a 	bl	800411c <HAL_GetTick>
 8005068:	0003      	movs	r3, r0
 800506a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800506c:	e008      	b.n	8005080 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800506e:	f7ff f855 	bl	800411c <HAL_GetTick>
 8005072:	0002      	movs	r2, r0
 8005074:	69bb      	ldr	r3, [r7, #24]
 8005076:	1ad3      	subs	r3, r2, r3
 8005078:	2b64      	cmp	r3, #100	; 0x64
 800507a:	d901      	bls.n	8005080 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 800507c:	2303      	movs	r3, #3
 800507e:	e2fd      	b.n	800567c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005080:	4b8c      	ldr	r3, [pc, #560]	; (80052b4 <HAL_RCC_OscConfig+0x338>)
 8005082:	681a      	ldr	r2, [r3, #0]
 8005084:	2380      	movs	r3, #128	; 0x80
 8005086:	029b      	lsls	r3, r3, #10
 8005088:	4013      	ands	r3, r2
 800508a:	d0f0      	beq.n	800506e <HAL_RCC_OscConfig+0xf2>
 800508c:	e015      	b.n	80050ba <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800508e:	f7ff f845 	bl	800411c <HAL_GetTick>
 8005092:	0003      	movs	r3, r0
 8005094:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005096:	e008      	b.n	80050aa <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005098:	f7ff f840 	bl	800411c <HAL_GetTick>
 800509c:	0002      	movs	r2, r0
 800509e:	69bb      	ldr	r3, [r7, #24]
 80050a0:	1ad3      	subs	r3, r2, r3
 80050a2:	2b64      	cmp	r3, #100	; 0x64
 80050a4:	d901      	bls.n	80050aa <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 80050a6:	2303      	movs	r3, #3
 80050a8:	e2e8      	b.n	800567c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80050aa:	4b82      	ldr	r3, [pc, #520]	; (80052b4 <HAL_RCC_OscConfig+0x338>)
 80050ac:	681a      	ldr	r2, [r3, #0]
 80050ae:	2380      	movs	r3, #128	; 0x80
 80050b0:	029b      	lsls	r3, r3, #10
 80050b2:	4013      	ands	r3, r2
 80050b4:	d1f0      	bne.n	8005098 <HAL_RCC_OscConfig+0x11c>
 80050b6:	e000      	b.n	80050ba <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050b8:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	2202      	movs	r2, #2
 80050c0:	4013      	ands	r3, r2
 80050c2:	d100      	bne.n	80050c6 <HAL_RCC_OscConfig+0x14a>
 80050c4:	e06c      	b.n	80051a0 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80050c6:	4b7b      	ldr	r3, [pc, #492]	; (80052b4 <HAL_RCC_OscConfig+0x338>)
 80050c8:	685b      	ldr	r3, [r3, #4]
 80050ca:	220c      	movs	r2, #12
 80050cc:	4013      	ands	r3, r2
 80050ce:	d00e      	beq.n	80050ee <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80050d0:	4b78      	ldr	r3, [pc, #480]	; (80052b4 <HAL_RCC_OscConfig+0x338>)
 80050d2:	685b      	ldr	r3, [r3, #4]
 80050d4:	220c      	movs	r2, #12
 80050d6:	4013      	ands	r3, r2
 80050d8:	2b08      	cmp	r3, #8
 80050da:	d11f      	bne.n	800511c <HAL_RCC_OscConfig+0x1a0>
 80050dc:	4b75      	ldr	r3, [pc, #468]	; (80052b4 <HAL_RCC_OscConfig+0x338>)
 80050de:	685a      	ldr	r2, [r3, #4]
 80050e0:	23c0      	movs	r3, #192	; 0xc0
 80050e2:	025b      	lsls	r3, r3, #9
 80050e4:	401a      	ands	r2, r3
 80050e6:	2380      	movs	r3, #128	; 0x80
 80050e8:	021b      	lsls	r3, r3, #8
 80050ea:	429a      	cmp	r2, r3
 80050ec:	d116      	bne.n	800511c <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80050ee:	4b71      	ldr	r3, [pc, #452]	; (80052b4 <HAL_RCC_OscConfig+0x338>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	2202      	movs	r2, #2
 80050f4:	4013      	ands	r3, r2
 80050f6:	d005      	beq.n	8005104 <HAL_RCC_OscConfig+0x188>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	68db      	ldr	r3, [r3, #12]
 80050fc:	2b01      	cmp	r3, #1
 80050fe:	d001      	beq.n	8005104 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8005100:	2301      	movs	r3, #1
 8005102:	e2bb      	b.n	800567c <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005104:	4b6b      	ldr	r3, [pc, #428]	; (80052b4 <HAL_RCC_OscConfig+0x338>)
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	22f8      	movs	r2, #248	; 0xf8
 800510a:	4393      	bics	r3, r2
 800510c:	0019      	movs	r1, r3
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	691b      	ldr	r3, [r3, #16]
 8005112:	00da      	lsls	r2, r3, #3
 8005114:	4b67      	ldr	r3, [pc, #412]	; (80052b4 <HAL_RCC_OscConfig+0x338>)
 8005116:	430a      	orrs	r2, r1
 8005118:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800511a:	e041      	b.n	80051a0 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	68db      	ldr	r3, [r3, #12]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d024      	beq.n	800516e <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005124:	4b63      	ldr	r3, [pc, #396]	; (80052b4 <HAL_RCC_OscConfig+0x338>)
 8005126:	681a      	ldr	r2, [r3, #0]
 8005128:	4b62      	ldr	r3, [pc, #392]	; (80052b4 <HAL_RCC_OscConfig+0x338>)
 800512a:	2101      	movs	r1, #1
 800512c:	430a      	orrs	r2, r1
 800512e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005130:	f7fe fff4 	bl	800411c <HAL_GetTick>
 8005134:	0003      	movs	r3, r0
 8005136:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005138:	e008      	b.n	800514c <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800513a:	f7fe ffef 	bl	800411c <HAL_GetTick>
 800513e:	0002      	movs	r2, r0
 8005140:	69bb      	ldr	r3, [r7, #24]
 8005142:	1ad3      	subs	r3, r2, r3
 8005144:	2b02      	cmp	r3, #2
 8005146:	d901      	bls.n	800514c <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8005148:	2303      	movs	r3, #3
 800514a:	e297      	b.n	800567c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800514c:	4b59      	ldr	r3, [pc, #356]	; (80052b4 <HAL_RCC_OscConfig+0x338>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	2202      	movs	r2, #2
 8005152:	4013      	ands	r3, r2
 8005154:	d0f1      	beq.n	800513a <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005156:	4b57      	ldr	r3, [pc, #348]	; (80052b4 <HAL_RCC_OscConfig+0x338>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	22f8      	movs	r2, #248	; 0xf8
 800515c:	4393      	bics	r3, r2
 800515e:	0019      	movs	r1, r3
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	691b      	ldr	r3, [r3, #16]
 8005164:	00da      	lsls	r2, r3, #3
 8005166:	4b53      	ldr	r3, [pc, #332]	; (80052b4 <HAL_RCC_OscConfig+0x338>)
 8005168:	430a      	orrs	r2, r1
 800516a:	601a      	str	r2, [r3, #0]
 800516c:	e018      	b.n	80051a0 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800516e:	4b51      	ldr	r3, [pc, #324]	; (80052b4 <HAL_RCC_OscConfig+0x338>)
 8005170:	681a      	ldr	r2, [r3, #0]
 8005172:	4b50      	ldr	r3, [pc, #320]	; (80052b4 <HAL_RCC_OscConfig+0x338>)
 8005174:	2101      	movs	r1, #1
 8005176:	438a      	bics	r2, r1
 8005178:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800517a:	f7fe ffcf 	bl	800411c <HAL_GetTick>
 800517e:	0003      	movs	r3, r0
 8005180:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005182:	e008      	b.n	8005196 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005184:	f7fe ffca 	bl	800411c <HAL_GetTick>
 8005188:	0002      	movs	r2, r0
 800518a:	69bb      	ldr	r3, [r7, #24]
 800518c:	1ad3      	subs	r3, r2, r3
 800518e:	2b02      	cmp	r3, #2
 8005190:	d901      	bls.n	8005196 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8005192:	2303      	movs	r3, #3
 8005194:	e272      	b.n	800567c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005196:	4b47      	ldr	r3, [pc, #284]	; (80052b4 <HAL_RCC_OscConfig+0x338>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	2202      	movs	r2, #2
 800519c:	4013      	ands	r3, r2
 800519e:	d1f1      	bne.n	8005184 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	2208      	movs	r2, #8
 80051a6:	4013      	ands	r3, r2
 80051a8:	d036      	beq.n	8005218 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	69db      	ldr	r3, [r3, #28]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d019      	beq.n	80051e6 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80051b2:	4b40      	ldr	r3, [pc, #256]	; (80052b4 <HAL_RCC_OscConfig+0x338>)
 80051b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80051b6:	4b3f      	ldr	r3, [pc, #252]	; (80052b4 <HAL_RCC_OscConfig+0x338>)
 80051b8:	2101      	movs	r1, #1
 80051ba:	430a      	orrs	r2, r1
 80051bc:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051be:	f7fe ffad 	bl	800411c <HAL_GetTick>
 80051c2:	0003      	movs	r3, r0
 80051c4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80051c6:	e008      	b.n	80051da <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80051c8:	f7fe ffa8 	bl	800411c <HAL_GetTick>
 80051cc:	0002      	movs	r2, r0
 80051ce:	69bb      	ldr	r3, [r7, #24]
 80051d0:	1ad3      	subs	r3, r2, r3
 80051d2:	2b02      	cmp	r3, #2
 80051d4:	d901      	bls.n	80051da <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 80051d6:	2303      	movs	r3, #3
 80051d8:	e250      	b.n	800567c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80051da:	4b36      	ldr	r3, [pc, #216]	; (80052b4 <HAL_RCC_OscConfig+0x338>)
 80051dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051de:	2202      	movs	r2, #2
 80051e0:	4013      	ands	r3, r2
 80051e2:	d0f1      	beq.n	80051c8 <HAL_RCC_OscConfig+0x24c>
 80051e4:	e018      	b.n	8005218 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80051e6:	4b33      	ldr	r3, [pc, #204]	; (80052b4 <HAL_RCC_OscConfig+0x338>)
 80051e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80051ea:	4b32      	ldr	r3, [pc, #200]	; (80052b4 <HAL_RCC_OscConfig+0x338>)
 80051ec:	2101      	movs	r1, #1
 80051ee:	438a      	bics	r2, r1
 80051f0:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051f2:	f7fe ff93 	bl	800411c <HAL_GetTick>
 80051f6:	0003      	movs	r3, r0
 80051f8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80051fa:	e008      	b.n	800520e <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80051fc:	f7fe ff8e 	bl	800411c <HAL_GetTick>
 8005200:	0002      	movs	r2, r0
 8005202:	69bb      	ldr	r3, [r7, #24]
 8005204:	1ad3      	subs	r3, r2, r3
 8005206:	2b02      	cmp	r3, #2
 8005208:	d901      	bls.n	800520e <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 800520a:	2303      	movs	r3, #3
 800520c:	e236      	b.n	800567c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800520e:	4b29      	ldr	r3, [pc, #164]	; (80052b4 <HAL_RCC_OscConfig+0x338>)
 8005210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005212:	2202      	movs	r2, #2
 8005214:	4013      	ands	r3, r2
 8005216:	d1f1      	bne.n	80051fc <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	2204      	movs	r2, #4
 800521e:	4013      	ands	r3, r2
 8005220:	d100      	bne.n	8005224 <HAL_RCC_OscConfig+0x2a8>
 8005222:	e0b5      	b.n	8005390 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005224:	201f      	movs	r0, #31
 8005226:	183b      	adds	r3, r7, r0
 8005228:	2200      	movs	r2, #0
 800522a:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800522c:	4b21      	ldr	r3, [pc, #132]	; (80052b4 <HAL_RCC_OscConfig+0x338>)
 800522e:	69da      	ldr	r2, [r3, #28]
 8005230:	2380      	movs	r3, #128	; 0x80
 8005232:	055b      	lsls	r3, r3, #21
 8005234:	4013      	ands	r3, r2
 8005236:	d110      	bne.n	800525a <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005238:	4b1e      	ldr	r3, [pc, #120]	; (80052b4 <HAL_RCC_OscConfig+0x338>)
 800523a:	69da      	ldr	r2, [r3, #28]
 800523c:	4b1d      	ldr	r3, [pc, #116]	; (80052b4 <HAL_RCC_OscConfig+0x338>)
 800523e:	2180      	movs	r1, #128	; 0x80
 8005240:	0549      	lsls	r1, r1, #21
 8005242:	430a      	orrs	r2, r1
 8005244:	61da      	str	r2, [r3, #28]
 8005246:	4b1b      	ldr	r3, [pc, #108]	; (80052b4 <HAL_RCC_OscConfig+0x338>)
 8005248:	69da      	ldr	r2, [r3, #28]
 800524a:	2380      	movs	r3, #128	; 0x80
 800524c:	055b      	lsls	r3, r3, #21
 800524e:	4013      	ands	r3, r2
 8005250:	60fb      	str	r3, [r7, #12]
 8005252:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005254:	183b      	adds	r3, r7, r0
 8005256:	2201      	movs	r2, #1
 8005258:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800525a:	4b19      	ldr	r3, [pc, #100]	; (80052c0 <HAL_RCC_OscConfig+0x344>)
 800525c:	681a      	ldr	r2, [r3, #0]
 800525e:	2380      	movs	r3, #128	; 0x80
 8005260:	005b      	lsls	r3, r3, #1
 8005262:	4013      	ands	r3, r2
 8005264:	d11a      	bne.n	800529c <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005266:	4b16      	ldr	r3, [pc, #88]	; (80052c0 <HAL_RCC_OscConfig+0x344>)
 8005268:	681a      	ldr	r2, [r3, #0]
 800526a:	4b15      	ldr	r3, [pc, #84]	; (80052c0 <HAL_RCC_OscConfig+0x344>)
 800526c:	2180      	movs	r1, #128	; 0x80
 800526e:	0049      	lsls	r1, r1, #1
 8005270:	430a      	orrs	r2, r1
 8005272:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005274:	f7fe ff52 	bl	800411c <HAL_GetTick>
 8005278:	0003      	movs	r3, r0
 800527a:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800527c:	e008      	b.n	8005290 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800527e:	f7fe ff4d 	bl	800411c <HAL_GetTick>
 8005282:	0002      	movs	r2, r0
 8005284:	69bb      	ldr	r3, [r7, #24]
 8005286:	1ad3      	subs	r3, r2, r3
 8005288:	2b64      	cmp	r3, #100	; 0x64
 800528a:	d901      	bls.n	8005290 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 800528c:	2303      	movs	r3, #3
 800528e:	e1f5      	b.n	800567c <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005290:	4b0b      	ldr	r3, [pc, #44]	; (80052c0 <HAL_RCC_OscConfig+0x344>)
 8005292:	681a      	ldr	r2, [r3, #0]
 8005294:	2380      	movs	r3, #128	; 0x80
 8005296:	005b      	lsls	r3, r3, #1
 8005298:	4013      	ands	r3, r2
 800529a:	d0f0      	beq.n	800527e <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	689b      	ldr	r3, [r3, #8]
 80052a0:	2b01      	cmp	r3, #1
 80052a2:	d10f      	bne.n	80052c4 <HAL_RCC_OscConfig+0x348>
 80052a4:	4b03      	ldr	r3, [pc, #12]	; (80052b4 <HAL_RCC_OscConfig+0x338>)
 80052a6:	6a1a      	ldr	r2, [r3, #32]
 80052a8:	4b02      	ldr	r3, [pc, #8]	; (80052b4 <HAL_RCC_OscConfig+0x338>)
 80052aa:	2101      	movs	r1, #1
 80052ac:	430a      	orrs	r2, r1
 80052ae:	621a      	str	r2, [r3, #32]
 80052b0:	e036      	b.n	8005320 <HAL_RCC_OscConfig+0x3a4>
 80052b2:	46c0      	nop			; (mov r8, r8)
 80052b4:	40021000 	.word	0x40021000
 80052b8:	fffeffff 	.word	0xfffeffff
 80052bc:	fffbffff 	.word	0xfffbffff
 80052c0:	40007000 	.word	0x40007000
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	689b      	ldr	r3, [r3, #8]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d10c      	bne.n	80052e6 <HAL_RCC_OscConfig+0x36a>
 80052cc:	4bca      	ldr	r3, [pc, #808]	; (80055f8 <HAL_RCC_OscConfig+0x67c>)
 80052ce:	6a1a      	ldr	r2, [r3, #32]
 80052d0:	4bc9      	ldr	r3, [pc, #804]	; (80055f8 <HAL_RCC_OscConfig+0x67c>)
 80052d2:	2101      	movs	r1, #1
 80052d4:	438a      	bics	r2, r1
 80052d6:	621a      	str	r2, [r3, #32]
 80052d8:	4bc7      	ldr	r3, [pc, #796]	; (80055f8 <HAL_RCC_OscConfig+0x67c>)
 80052da:	6a1a      	ldr	r2, [r3, #32]
 80052dc:	4bc6      	ldr	r3, [pc, #792]	; (80055f8 <HAL_RCC_OscConfig+0x67c>)
 80052de:	2104      	movs	r1, #4
 80052e0:	438a      	bics	r2, r1
 80052e2:	621a      	str	r2, [r3, #32]
 80052e4:	e01c      	b.n	8005320 <HAL_RCC_OscConfig+0x3a4>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	689b      	ldr	r3, [r3, #8]
 80052ea:	2b05      	cmp	r3, #5
 80052ec:	d10c      	bne.n	8005308 <HAL_RCC_OscConfig+0x38c>
 80052ee:	4bc2      	ldr	r3, [pc, #776]	; (80055f8 <HAL_RCC_OscConfig+0x67c>)
 80052f0:	6a1a      	ldr	r2, [r3, #32]
 80052f2:	4bc1      	ldr	r3, [pc, #772]	; (80055f8 <HAL_RCC_OscConfig+0x67c>)
 80052f4:	2104      	movs	r1, #4
 80052f6:	430a      	orrs	r2, r1
 80052f8:	621a      	str	r2, [r3, #32]
 80052fa:	4bbf      	ldr	r3, [pc, #764]	; (80055f8 <HAL_RCC_OscConfig+0x67c>)
 80052fc:	6a1a      	ldr	r2, [r3, #32]
 80052fe:	4bbe      	ldr	r3, [pc, #760]	; (80055f8 <HAL_RCC_OscConfig+0x67c>)
 8005300:	2101      	movs	r1, #1
 8005302:	430a      	orrs	r2, r1
 8005304:	621a      	str	r2, [r3, #32]
 8005306:	e00b      	b.n	8005320 <HAL_RCC_OscConfig+0x3a4>
 8005308:	4bbb      	ldr	r3, [pc, #748]	; (80055f8 <HAL_RCC_OscConfig+0x67c>)
 800530a:	6a1a      	ldr	r2, [r3, #32]
 800530c:	4bba      	ldr	r3, [pc, #744]	; (80055f8 <HAL_RCC_OscConfig+0x67c>)
 800530e:	2101      	movs	r1, #1
 8005310:	438a      	bics	r2, r1
 8005312:	621a      	str	r2, [r3, #32]
 8005314:	4bb8      	ldr	r3, [pc, #736]	; (80055f8 <HAL_RCC_OscConfig+0x67c>)
 8005316:	6a1a      	ldr	r2, [r3, #32]
 8005318:	4bb7      	ldr	r3, [pc, #732]	; (80055f8 <HAL_RCC_OscConfig+0x67c>)
 800531a:	2104      	movs	r1, #4
 800531c:	438a      	bics	r2, r1
 800531e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	689b      	ldr	r3, [r3, #8]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d014      	beq.n	8005352 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005328:	f7fe fef8 	bl	800411c <HAL_GetTick>
 800532c:	0003      	movs	r3, r0
 800532e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005330:	e009      	b.n	8005346 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005332:	f7fe fef3 	bl	800411c <HAL_GetTick>
 8005336:	0002      	movs	r2, r0
 8005338:	69bb      	ldr	r3, [r7, #24]
 800533a:	1ad3      	subs	r3, r2, r3
 800533c:	4aaf      	ldr	r2, [pc, #700]	; (80055fc <HAL_RCC_OscConfig+0x680>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d901      	bls.n	8005346 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8005342:	2303      	movs	r3, #3
 8005344:	e19a      	b.n	800567c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005346:	4bac      	ldr	r3, [pc, #688]	; (80055f8 <HAL_RCC_OscConfig+0x67c>)
 8005348:	6a1b      	ldr	r3, [r3, #32]
 800534a:	2202      	movs	r2, #2
 800534c:	4013      	ands	r3, r2
 800534e:	d0f0      	beq.n	8005332 <HAL_RCC_OscConfig+0x3b6>
 8005350:	e013      	b.n	800537a <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005352:	f7fe fee3 	bl	800411c <HAL_GetTick>
 8005356:	0003      	movs	r3, r0
 8005358:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800535a:	e009      	b.n	8005370 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800535c:	f7fe fede 	bl	800411c <HAL_GetTick>
 8005360:	0002      	movs	r2, r0
 8005362:	69bb      	ldr	r3, [r7, #24]
 8005364:	1ad3      	subs	r3, r2, r3
 8005366:	4aa5      	ldr	r2, [pc, #660]	; (80055fc <HAL_RCC_OscConfig+0x680>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d901      	bls.n	8005370 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 800536c:	2303      	movs	r3, #3
 800536e:	e185      	b.n	800567c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005370:	4ba1      	ldr	r3, [pc, #644]	; (80055f8 <HAL_RCC_OscConfig+0x67c>)
 8005372:	6a1b      	ldr	r3, [r3, #32]
 8005374:	2202      	movs	r2, #2
 8005376:	4013      	ands	r3, r2
 8005378:	d1f0      	bne.n	800535c <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800537a:	231f      	movs	r3, #31
 800537c:	18fb      	adds	r3, r7, r3
 800537e:	781b      	ldrb	r3, [r3, #0]
 8005380:	2b01      	cmp	r3, #1
 8005382:	d105      	bne.n	8005390 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005384:	4b9c      	ldr	r3, [pc, #624]	; (80055f8 <HAL_RCC_OscConfig+0x67c>)
 8005386:	69da      	ldr	r2, [r3, #28]
 8005388:	4b9b      	ldr	r3, [pc, #620]	; (80055f8 <HAL_RCC_OscConfig+0x67c>)
 800538a:	499d      	ldr	r1, [pc, #628]	; (8005600 <HAL_RCC_OscConfig+0x684>)
 800538c:	400a      	ands	r2, r1
 800538e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	2210      	movs	r2, #16
 8005396:	4013      	ands	r3, r2
 8005398:	d063      	beq.n	8005462 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	695b      	ldr	r3, [r3, #20]
 800539e:	2b01      	cmp	r3, #1
 80053a0:	d12a      	bne.n	80053f8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80053a2:	4b95      	ldr	r3, [pc, #596]	; (80055f8 <HAL_RCC_OscConfig+0x67c>)
 80053a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80053a6:	4b94      	ldr	r3, [pc, #592]	; (80055f8 <HAL_RCC_OscConfig+0x67c>)
 80053a8:	2104      	movs	r1, #4
 80053aa:	430a      	orrs	r2, r1
 80053ac:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80053ae:	4b92      	ldr	r3, [pc, #584]	; (80055f8 <HAL_RCC_OscConfig+0x67c>)
 80053b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80053b2:	4b91      	ldr	r3, [pc, #580]	; (80055f8 <HAL_RCC_OscConfig+0x67c>)
 80053b4:	2101      	movs	r1, #1
 80053b6:	430a      	orrs	r2, r1
 80053b8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80053ba:	f7fe feaf 	bl	800411c <HAL_GetTick>
 80053be:	0003      	movs	r3, r0
 80053c0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80053c2:	e008      	b.n	80053d6 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80053c4:	f7fe feaa 	bl	800411c <HAL_GetTick>
 80053c8:	0002      	movs	r2, r0
 80053ca:	69bb      	ldr	r3, [r7, #24]
 80053cc:	1ad3      	subs	r3, r2, r3
 80053ce:	2b02      	cmp	r3, #2
 80053d0:	d901      	bls.n	80053d6 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 80053d2:	2303      	movs	r3, #3
 80053d4:	e152      	b.n	800567c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80053d6:	4b88      	ldr	r3, [pc, #544]	; (80055f8 <HAL_RCC_OscConfig+0x67c>)
 80053d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053da:	2202      	movs	r2, #2
 80053dc:	4013      	ands	r3, r2
 80053de:	d0f1      	beq.n	80053c4 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80053e0:	4b85      	ldr	r3, [pc, #532]	; (80055f8 <HAL_RCC_OscConfig+0x67c>)
 80053e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053e4:	22f8      	movs	r2, #248	; 0xf8
 80053e6:	4393      	bics	r3, r2
 80053e8:	0019      	movs	r1, r3
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	699b      	ldr	r3, [r3, #24]
 80053ee:	00da      	lsls	r2, r3, #3
 80053f0:	4b81      	ldr	r3, [pc, #516]	; (80055f8 <HAL_RCC_OscConfig+0x67c>)
 80053f2:	430a      	orrs	r2, r1
 80053f4:	635a      	str	r2, [r3, #52]	; 0x34
 80053f6:	e034      	b.n	8005462 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	695b      	ldr	r3, [r3, #20]
 80053fc:	3305      	adds	r3, #5
 80053fe:	d111      	bne.n	8005424 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8005400:	4b7d      	ldr	r3, [pc, #500]	; (80055f8 <HAL_RCC_OscConfig+0x67c>)
 8005402:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005404:	4b7c      	ldr	r3, [pc, #496]	; (80055f8 <HAL_RCC_OscConfig+0x67c>)
 8005406:	2104      	movs	r1, #4
 8005408:	438a      	bics	r2, r1
 800540a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800540c:	4b7a      	ldr	r3, [pc, #488]	; (80055f8 <HAL_RCC_OscConfig+0x67c>)
 800540e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005410:	22f8      	movs	r2, #248	; 0xf8
 8005412:	4393      	bics	r3, r2
 8005414:	0019      	movs	r1, r3
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	699b      	ldr	r3, [r3, #24]
 800541a:	00da      	lsls	r2, r3, #3
 800541c:	4b76      	ldr	r3, [pc, #472]	; (80055f8 <HAL_RCC_OscConfig+0x67c>)
 800541e:	430a      	orrs	r2, r1
 8005420:	635a      	str	r2, [r3, #52]	; 0x34
 8005422:	e01e      	b.n	8005462 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8005424:	4b74      	ldr	r3, [pc, #464]	; (80055f8 <HAL_RCC_OscConfig+0x67c>)
 8005426:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005428:	4b73      	ldr	r3, [pc, #460]	; (80055f8 <HAL_RCC_OscConfig+0x67c>)
 800542a:	2104      	movs	r1, #4
 800542c:	430a      	orrs	r2, r1
 800542e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8005430:	4b71      	ldr	r3, [pc, #452]	; (80055f8 <HAL_RCC_OscConfig+0x67c>)
 8005432:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005434:	4b70      	ldr	r3, [pc, #448]	; (80055f8 <HAL_RCC_OscConfig+0x67c>)
 8005436:	2101      	movs	r1, #1
 8005438:	438a      	bics	r2, r1
 800543a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800543c:	f7fe fe6e 	bl	800411c <HAL_GetTick>
 8005440:	0003      	movs	r3, r0
 8005442:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8005444:	e008      	b.n	8005458 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8005446:	f7fe fe69 	bl	800411c <HAL_GetTick>
 800544a:	0002      	movs	r2, r0
 800544c:	69bb      	ldr	r3, [r7, #24]
 800544e:	1ad3      	subs	r3, r2, r3
 8005450:	2b02      	cmp	r3, #2
 8005452:	d901      	bls.n	8005458 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8005454:	2303      	movs	r3, #3
 8005456:	e111      	b.n	800567c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8005458:	4b67      	ldr	r3, [pc, #412]	; (80055f8 <HAL_RCC_OscConfig+0x67c>)
 800545a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800545c:	2202      	movs	r2, #2
 800545e:	4013      	ands	r3, r2
 8005460:	d1f1      	bne.n	8005446 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	2220      	movs	r2, #32
 8005468:	4013      	ands	r3, r2
 800546a:	d05c      	beq.n	8005526 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 800546c:	4b62      	ldr	r3, [pc, #392]	; (80055f8 <HAL_RCC_OscConfig+0x67c>)
 800546e:	685b      	ldr	r3, [r3, #4]
 8005470:	220c      	movs	r2, #12
 8005472:	4013      	ands	r3, r2
 8005474:	2b0c      	cmp	r3, #12
 8005476:	d00e      	beq.n	8005496 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8005478:	4b5f      	ldr	r3, [pc, #380]	; (80055f8 <HAL_RCC_OscConfig+0x67c>)
 800547a:	685b      	ldr	r3, [r3, #4]
 800547c:	220c      	movs	r2, #12
 800547e:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8005480:	2b08      	cmp	r3, #8
 8005482:	d114      	bne.n	80054ae <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8005484:	4b5c      	ldr	r3, [pc, #368]	; (80055f8 <HAL_RCC_OscConfig+0x67c>)
 8005486:	685a      	ldr	r2, [r3, #4]
 8005488:	23c0      	movs	r3, #192	; 0xc0
 800548a:	025b      	lsls	r3, r3, #9
 800548c:	401a      	ands	r2, r3
 800548e:	23c0      	movs	r3, #192	; 0xc0
 8005490:	025b      	lsls	r3, r3, #9
 8005492:	429a      	cmp	r2, r3
 8005494:	d10b      	bne.n	80054ae <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8005496:	4b58      	ldr	r3, [pc, #352]	; (80055f8 <HAL_RCC_OscConfig+0x67c>)
 8005498:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800549a:	2380      	movs	r3, #128	; 0x80
 800549c:	025b      	lsls	r3, r3, #9
 800549e:	4013      	ands	r3, r2
 80054a0:	d040      	beq.n	8005524 <HAL_RCC_OscConfig+0x5a8>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6a1b      	ldr	r3, [r3, #32]
 80054a6:	2b01      	cmp	r3, #1
 80054a8:	d03c      	beq.n	8005524 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80054aa:	2301      	movs	r3, #1
 80054ac:	e0e6      	b.n	800567c <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6a1b      	ldr	r3, [r3, #32]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d01b      	beq.n	80054ee <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80054b6:	4b50      	ldr	r3, [pc, #320]	; (80055f8 <HAL_RCC_OscConfig+0x67c>)
 80054b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80054ba:	4b4f      	ldr	r3, [pc, #316]	; (80055f8 <HAL_RCC_OscConfig+0x67c>)
 80054bc:	2180      	movs	r1, #128	; 0x80
 80054be:	0249      	lsls	r1, r1, #9
 80054c0:	430a      	orrs	r2, r1
 80054c2:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054c4:	f7fe fe2a 	bl	800411c <HAL_GetTick>
 80054c8:	0003      	movs	r3, r0
 80054ca:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80054cc:	e008      	b.n	80054e0 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80054ce:	f7fe fe25 	bl	800411c <HAL_GetTick>
 80054d2:	0002      	movs	r2, r0
 80054d4:	69bb      	ldr	r3, [r7, #24]
 80054d6:	1ad3      	subs	r3, r2, r3
 80054d8:	2b02      	cmp	r3, #2
 80054da:	d901      	bls.n	80054e0 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 80054dc:	2303      	movs	r3, #3
 80054de:	e0cd      	b.n	800567c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80054e0:	4b45      	ldr	r3, [pc, #276]	; (80055f8 <HAL_RCC_OscConfig+0x67c>)
 80054e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80054e4:	2380      	movs	r3, #128	; 0x80
 80054e6:	025b      	lsls	r3, r3, #9
 80054e8:	4013      	ands	r3, r2
 80054ea:	d0f0      	beq.n	80054ce <HAL_RCC_OscConfig+0x552>
 80054ec:	e01b      	b.n	8005526 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80054ee:	4b42      	ldr	r3, [pc, #264]	; (80055f8 <HAL_RCC_OscConfig+0x67c>)
 80054f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80054f2:	4b41      	ldr	r3, [pc, #260]	; (80055f8 <HAL_RCC_OscConfig+0x67c>)
 80054f4:	4943      	ldr	r1, [pc, #268]	; (8005604 <HAL_RCC_OscConfig+0x688>)
 80054f6:	400a      	ands	r2, r1
 80054f8:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054fa:	f7fe fe0f 	bl	800411c <HAL_GetTick>
 80054fe:	0003      	movs	r3, r0
 8005500:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8005502:	e008      	b.n	8005516 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005504:	f7fe fe0a 	bl	800411c <HAL_GetTick>
 8005508:	0002      	movs	r2, r0
 800550a:	69bb      	ldr	r3, [r7, #24]
 800550c:	1ad3      	subs	r3, r2, r3
 800550e:	2b02      	cmp	r3, #2
 8005510:	d901      	bls.n	8005516 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8005512:	2303      	movs	r3, #3
 8005514:	e0b2      	b.n	800567c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8005516:	4b38      	ldr	r3, [pc, #224]	; (80055f8 <HAL_RCC_OscConfig+0x67c>)
 8005518:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800551a:	2380      	movs	r3, #128	; 0x80
 800551c:	025b      	lsls	r3, r3, #9
 800551e:	4013      	ands	r3, r2
 8005520:	d1f0      	bne.n	8005504 <HAL_RCC_OscConfig+0x588>
 8005522:	e000      	b.n	8005526 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8005524:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800552a:	2b00      	cmp	r3, #0
 800552c:	d100      	bne.n	8005530 <HAL_RCC_OscConfig+0x5b4>
 800552e:	e0a4      	b.n	800567a <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005530:	4b31      	ldr	r3, [pc, #196]	; (80055f8 <HAL_RCC_OscConfig+0x67c>)
 8005532:	685b      	ldr	r3, [r3, #4]
 8005534:	220c      	movs	r2, #12
 8005536:	4013      	ands	r3, r2
 8005538:	2b08      	cmp	r3, #8
 800553a:	d100      	bne.n	800553e <HAL_RCC_OscConfig+0x5c2>
 800553c:	e078      	b.n	8005630 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005542:	2b02      	cmp	r3, #2
 8005544:	d14c      	bne.n	80055e0 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005546:	4b2c      	ldr	r3, [pc, #176]	; (80055f8 <HAL_RCC_OscConfig+0x67c>)
 8005548:	681a      	ldr	r2, [r3, #0]
 800554a:	4b2b      	ldr	r3, [pc, #172]	; (80055f8 <HAL_RCC_OscConfig+0x67c>)
 800554c:	492e      	ldr	r1, [pc, #184]	; (8005608 <HAL_RCC_OscConfig+0x68c>)
 800554e:	400a      	ands	r2, r1
 8005550:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005552:	f7fe fde3 	bl	800411c <HAL_GetTick>
 8005556:	0003      	movs	r3, r0
 8005558:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800555a:	e008      	b.n	800556e <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800555c:	f7fe fdde 	bl	800411c <HAL_GetTick>
 8005560:	0002      	movs	r2, r0
 8005562:	69bb      	ldr	r3, [r7, #24]
 8005564:	1ad3      	subs	r3, r2, r3
 8005566:	2b02      	cmp	r3, #2
 8005568:	d901      	bls.n	800556e <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 800556a:	2303      	movs	r3, #3
 800556c:	e086      	b.n	800567c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800556e:	4b22      	ldr	r3, [pc, #136]	; (80055f8 <HAL_RCC_OscConfig+0x67c>)
 8005570:	681a      	ldr	r2, [r3, #0]
 8005572:	2380      	movs	r3, #128	; 0x80
 8005574:	049b      	lsls	r3, r3, #18
 8005576:	4013      	ands	r3, r2
 8005578:	d1f0      	bne.n	800555c <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800557a:	4b1f      	ldr	r3, [pc, #124]	; (80055f8 <HAL_RCC_OscConfig+0x67c>)
 800557c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800557e:	220f      	movs	r2, #15
 8005580:	4393      	bics	r3, r2
 8005582:	0019      	movs	r1, r3
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005588:	4b1b      	ldr	r3, [pc, #108]	; (80055f8 <HAL_RCC_OscConfig+0x67c>)
 800558a:	430a      	orrs	r2, r1
 800558c:	62da      	str	r2, [r3, #44]	; 0x2c
 800558e:	4b1a      	ldr	r3, [pc, #104]	; (80055f8 <HAL_RCC_OscConfig+0x67c>)
 8005590:	685b      	ldr	r3, [r3, #4]
 8005592:	4a1e      	ldr	r2, [pc, #120]	; (800560c <HAL_RCC_OscConfig+0x690>)
 8005594:	4013      	ands	r3, r2
 8005596:	0019      	movs	r1, r3
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055a0:	431a      	orrs	r2, r3
 80055a2:	4b15      	ldr	r3, [pc, #84]	; (80055f8 <HAL_RCC_OscConfig+0x67c>)
 80055a4:	430a      	orrs	r2, r1
 80055a6:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80055a8:	4b13      	ldr	r3, [pc, #76]	; (80055f8 <HAL_RCC_OscConfig+0x67c>)
 80055aa:	681a      	ldr	r2, [r3, #0]
 80055ac:	4b12      	ldr	r3, [pc, #72]	; (80055f8 <HAL_RCC_OscConfig+0x67c>)
 80055ae:	2180      	movs	r1, #128	; 0x80
 80055b0:	0449      	lsls	r1, r1, #17
 80055b2:	430a      	orrs	r2, r1
 80055b4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055b6:	f7fe fdb1 	bl	800411c <HAL_GetTick>
 80055ba:	0003      	movs	r3, r0
 80055bc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80055be:	e008      	b.n	80055d2 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80055c0:	f7fe fdac 	bl	800411c <HAL_GetTick>
 80055c4:	0002      	movs	r2, r0
 80055c6:	69bb      	ldr	r3, [r7, #24]
 80055c8:	1ad3      	subs	r3, r2, r3
 80055ca:	2b02      	cmp	r3, #2
 80055cc:	d901      	bls.n	80055d2 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 80055ce:	2303      	movs	r3, #3
 80055d0:	e054      	b.n	800567c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80055d2:	4b09      	ldr	r3, [pc, #36]	; (80055f8 <HAL_RCC_OscConfig+0x67c>)
 80055d4:	681a      	ldr	r2, [r3, #0]
 80055d6:	2380      	movs	r3, #128	; 0x80
 80055d8:	049b      	lsls	r3, r3, #18
 80055da:	4013      	ands	r3, r2
 80055dc:	d0f0      	beq.n	80055c0 <HAL_RCC_OscConfig+0x644>
 80055de:	e04c      	b.n	800567a <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80055e0:	4b05      	ldr	r3, [pc, #20]	; (80055f8 <HAL_RCC_OscConfig+0x67c>)
 80055e2:	681a      	ldr	r2, [r3, #0]
 80055e4:	4b04      	ldr	r3, [pc, #16]	; (80055f8 <HAL_RCC_OscConfig+0x67c>)
 80055e6:	4908      	ldr	r1, [pc, #32]	; (8005608 <HAL_RCC_OscConfig+0x68c>)
 80055e8:	400a      	ands	r2, r1
 80055ea:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055ec:	f7fe fd96 	bl	800411c <HAL_GetTick>
 80055f0:	0003      	movs	r3, r0
 80055f2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80055f4:	e015      	b.n	8005622 <HAL_RCC_OscConfig+0x6a6>
 80055f6:	46c0      	nop			; (mov r8, r8)
 80055f8:	40021000 	.word	0x40021000
 80055fc:	00001388 	.word	0x00001388
 8005600:	efffffff 	.word	0xefffffff
 8005604:	fffeffff 	.word	0xfffeffff
 8005608:	feffffff 	.word	0xfeffffff
 800560c:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005610:	f7fe fd84 	bl	800411c <HAL_GetTick>
 8005614:	0002      	movs	r2, r0
 8005616:	69bb      	ldr	r3, [r7, #24]
 8005618:	1ad3      	subs	r3, r2, r3
 800561a:	2b02      	cmp	r3, #2
 800561c:	d901      	bls.n	8005622 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 800561e:	2303      	movs	r3, #3
 8005620:	e02c      	b.n	800567c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005622:	4b18      	ldr	r3, [pc, #96]	; (8005684 <HAL_RCC_OscConfig+0x708>)
 8005624:	681a      	ldr	r2, [r3, #0]
 8005626:	2380      	movs	r3, #128	; 0x80
 8005628:	049b      	lsls	r3, r3, #18
 800562a:	4013      	ands	r3, r2
 800562c:	d1f0      	bne.n	8005610 <HAL_RCC_OscConfig+0x694>
 800562e:	e024      	b.n	800567a <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005634:	2b01      	cmp	r3, #1
 8005636:	d101      	bne.n	800563c <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8005638:	2301      	movs	r3, #1
 800563a:	e01f      	b.n	800567c <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800563c:	4b11      	ldr	r3, [pc, #68]	; (8005684 <HAL_RCC_OscConfig+0x708>)
 800563e:	685b      	ldr	r3, [r3, #4]
 8005640:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8005642:	4b10      	ldr	r3, [pc, #64]	; (8005684 <HAL_RCC_OscConfig+0x708>)
 8005644:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005646:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005648:	697a      	ldr	r2, [r7, #20]
 800564a:	23c0      	movs	r3, #192	; 0xc0
 800564c:	025b      	lsls	r3, r3, #9
 800564e:	401a      	ands	r2, r3
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005654:	429a      	cmp	r2, r3
 8005656:	d10e      	bne.n	8005676 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8005658:	693b      	ldr	r3, [r7, #16]
 800565a:	220f      	movs	r2, #15
 800565c:	401a      	ands	r2, r3
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005662:	429a      	cmp	r2, r3
 8005664:	d107      	bne.n	8005676 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8005666:	697a      	ldr	r2, [r7, #20]
 8005668:	23f0      	movs	r3, #240	; 0xf0
 800566a:	039b      	lsls	r3, r3, #14
 800566c:	401a      	ands	r2, r3
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8005672:	429a      	cmp	r2, r3
 8005674:	d001      	beq.n	800567a <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8005676:	2301      	movs	r3, #1
 8005678:	e000      	b.n	800567c <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 800567a:	2300      	movs	r3, #0
}
 800567c:	0018      	movs	r0, r3
 800567e:	46bd      	mov	sp, r7
 8005680:	b008      	add	sp, #32
 8005682:	bd80      	pop	{r7, pc}
 8005684:	40021000 	.word	0x40021000

08005688 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b084      	sub	sp, #16
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
 8005690:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d101      	bne.n	800569c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005698:	2301      	movs	r3, #1
 800569a:	e0bf      	b.n	800581c <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800569c:	4b61      	ldr	r3, [pc, #388]	; (8005824 <HAL_RCC_ClockConfig+0x19c>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	2201      	movs	r2, #1
 80056a2:	4013      	ands	r3, r2
 80056a4:	683a      	ldr	r2, [r7, #0]
 80056a6:	429a      	cmp	r2, r3
 80056a8:	d911      	bls.n	80056ce <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056aa:	4b5e      	ldr	r3, [pc, #376]	; (8005824 <HAL_RCC_ClockConfig+0x19c>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	2201      	movs	r2, #1
 80056b0:	4393      	bics	r3, r2
 80056b2:	0019      	movs	r1, r3
 80056b4:	4b5b      	ldr	r3, [pc, #364]	; (8005824 <HAL_RCC_ClockConfig+0x19c>)
 80056b6:	683a      	ldr	r2, [r7, #0]
 80056b8:	430a      	orrs	r2, r1
 80056ba:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80056bc:	4b59      	ldr	r3, [pc, #356]	; (8005824 <HAL_RCC_ClockConfig+0x19c>)
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	2201      	movs	r2, #1
 80056c2:	4013      	ands	r3, r2
 80056c4:	683a      	ldr	r2, [r7, #0]
 80056c6:	429a      	cmp	r2, r3
 80056c8:	d001      	beq.n	80056ce <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80056ca:	2301      	movs	r3, #1
 80056cc:	e0a6      	b.n	800581c <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	2202      	movs	r2, #2
 80056d4:	4013      	ands	r3, r2
 80056d6:	d015      	beq.n	8005704 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	2204      	movs	r2, #4
 80056de:	4013      	ands	r3, r2
 80056e0:	d006      	beq.n	80056f0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80056e2:	4b51      	ldr	r3, [pc, #324]	; (8005828 <HAL_RCC_ClockConfig+0x1a0>)
 80056e4:	685a      	ldr	r2, [r3, #4]
 80056e6:	4b50      	ldr	r3, [pc, #320]	; (8005828 <HAL_RCC_ClockConfig+0x1a0>)
 80056e8:	21e0      	movs	r1, #224	; 0xe0
 80056ea:	00c9      	lsls	r1, r1, #3
 80056ec:	430a      	orrs	r2, r1
 80056ee:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80056f0:	4b4d      	ldr	r3, [pc, #308]	; (8005828 <HAL_RCC_ClockConfig+0x1a0>)
 80056f2:	685b      	ldr	r3, [r3, #4]
 80056f4:	22f0      	movs	r2, #240	; 0xf0
 80056f6:	4393      	bics	r3, r2
 80056f8:	0019      	movs	r1, r3
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	689a      	ldr	r2, [r3, #8]
 80056fe:	4b4a      	ldr	r3, [pc, #296]	; (8005828 <HAL_RCC_ClockConfig+0x1a0>)
 8005700:	430a      	orrs	r2, r1
 8005702:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	2201      	movs	r2, #1
 800570a:	4013      	ands	r3, r2
 800570c:	d04c      	beq.n	80057a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	685b      	ldr	r3, [r3, #4]
 8005712:	2b01      	cmp	r3, #1
 8005714:	d107      	bne.n	8005726 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005716:	4b44      	ldr	r3, [pc, #272]	; (8005828 <HAL_RCC_ClockConfig+0x1a0>)
 8005718:	681a      	ldr	r2, [r3, #0]
 800571a:	2380      	movs	r3, #128	; 0x80
 800571c:	029b      	lsls	r3, r3, #10
 800571e:	4013      	ands	r3, r2
 8005720:	d120      	bne.n	8005764 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8005722:	2301      	movs	r3, #1
 8005724:	e07a      	b.n	800581c <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	685b      	ldr	r3, [r3, #4]
 800572a:	2b02      	cmp	r3, #2
 800572c:	d107      	bne.n	800573e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800572e:	4b3e      	ldr	r3, [pc, #248]	; (8005828 <HAL_RCC_ClockConfig+0x1a0>)
 8005730:	681a      	ldr	r2, [r3, #0]
 8005732:	2380      	movs	r3, #128	; 0x80
 8005734:	049b      	lsls	r3, r3, #18
 8005736:	4013      	ands	r3, r2
 8005738:	d114      	bne.n	8005764 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800573a:	2301      	movs	r3, #1
 800573c:	e06e      	b.n	800581c <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	685b      	ldr	r3, [r3, #4]
 8005742:	2b03      	cmp	r3, #3
 8005744:	d107      	bne.n	8005756 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8005746:	4b38      	ldr	r3, [pc, #224]	; (8005828 <HAL_RCC_ClockConfig+0x1a0>)
 8005748:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800574a:	2380      	movs	r3, #128	; 0x80
 800574c:	025b      	lsls	r3, r3, #9
 800574e:	4013      	ands	r3, r2
 8005750:	d108      	bne.n	8005764 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8005752:	2301      	movs	r3, #1
 8005754:	e062      	b.n	800581c <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005756:	4b34      	ldr	r3, [pc, #208]	; (8005828 <HAL_RCC_ClockConfig+0x1a0>)
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	2202      	movs	r2, #2
 800575c:	4013      	ands	r3, r2
 800575e:	d101      	bne.n	8005764 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8005760:	2301      	movs	r3, #1
 8005762:	e05b      	b.n	800581c <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005764:	4b30      	ldr	r3, [pc, #192]	; (8005828 <HAL_RCC_ClockConfig+0x1a0>)
 8005766:	685b      	ldr	r3, [r3, #4]
 8005768:	2203      	movs	r2, #3
 800576a:	4393      	bics	r3, r2
 800576c:	0019      	movs	r1, r3
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	685a      	ldr	r2, [r3, #4]
 8005772:	4b2d      	ldr	r3, [pc, #180]	; (8005828 <HAL_RCC_ClockConfig+0x1a0>)
 8005774:	430a      	orrs	r2, r1
 8005776:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005778:	f7fe fcd0 	bl	800411c <HAL_GetTick>
 800577c:	0003      	movs	r3, r0
 800577e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005780:	e009      	b.n	8005796 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005782:	f7fe fccb 	bl	800411c <HAL_GetTick>
 8005786:	0002      	movs	r2, r0
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	1ad3      	subs	r3, r2, r3
 800578c:	4a27      	ldr	r2, [pc, #156]	; (800582c <HAL_RCC_ClockConfig+0x1a4>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d901      	bls.n	8005796 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005792:	2303      	movs	r3, #3
 8005794:	e042      	b.n	800581c <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005796:	4b24      	ldr	r3, [pc, #144]	; (8005828 <HAL_RCC_ClockConfig+0x1a0>)
 8005798:	685b      	ldr	r3, [r3, #4]
 800579a:	220c      	movs	r2, #12
 800579c:	401a      	ands	r2, r3
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	685b      	ldr	r3, [r3, #4]
 80057a2:	009b      	lsls	r3, r3, #2
 80057a4:	429a      	cmp	r2, r3
 80057a6:	d1ec      	bne.n	8005782 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80057a8:	4b1e      	ldr	r3, [pc, #120]	; (8005824 <HAL_RCC_ClockConfig+0x19c>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	2201      	movs	r2, #1
 80057ae:	4013      	ands	r3, r2
 80057b0:	683a      	ldr	r2, [r7, #0]
 80057b2:	429a      	cmp	r2, r3
 80057b4:	d211      	bcs.n	80057da <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057b6:	4b1b      	ldr	r3, [pc, #108]	; (8005824 <HAL_RCC_ClockConfig+0x19c>)
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	2201      	movs	r2, #1
 80057bc:	4393      	bics	r3, r2
 80057be:	0019      	movs	r1, r3
 80057c0:	4b18      	ldr	r3, [pc, #96]	; (8005824 <HAL_RCC_ClockConfig+0x19c>)
 80057c2:	683a      	ldr	r2, [r7, #0]
 80057c4:	430a      	orrs	r2, r1
 80057c6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80057c8:	4b16      	ldr	r3, [pc, #88]	; (8005824 <HAL_RCC_ClockConfig+0x19c>)
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	2201      	movs	r2, #1
 80057ce:	4013      	ands	r3, r2
 80057d0:	683a      	ldr	r2, [r7, #0]
 80057d2:	429a      	cmp	r2, r3
 80057d4:	d001      	beq.n	80057da <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 80057d6:	2301      	movs	r3, #1
 80057d8:	e020      	b.n	800581c <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	2204      	movs	r2, #4
 80057e0:	4013      	ands	r3, r2
 80057e2:	d009      	beq.n	80057f8 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80057e4:	4b10      	ldr	r3, [pc, #64]	; (8005828 <HAL_RCC_ClockConfig+0x1a0>)
 80057e6:	685b      	ldr	r3, [r3, #4]
 80057e8:	4a11      	ldr	r2, [pc, #68]	; (8005830 <HAL_RCC_ClockConfig+0x1a8>)
 80057ea:	4013      	ands	r3, r2
 80057ec:	0019      	movs	r1, r3
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	68da      	ldr	r2, [r3, #12]
 80057f2:	4b0d      	ldr	r3, [pc, #52]	; (8005828 <HAL_RCC_ClockConfig+0x1a0>)
 80057f4:	430a      	orrs	r2, r1
 80057f6:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80057f8:	f000 f82e 	bl	8005858 <HAL_RCC_GetSysClockFreq>
 80057fc:	0001      	movs	r1, r0
 80057fe:	4b0a      	ldr	r3, [pc, #40]	; (8005828 <HAL_RCC_ClockConfig+0x1a0>)
 8005800:	685b      	ldr	r3, [r3, #4]
 8005802:	091b      	lsrs	r3, r3, #4
 8005804:	220f      	movs	r2, #15
 8005806:	4013      	ands	r3, r2
 8005808:	4a0a      	ldr	r2, [pc, #40]	; (8005834 <HAL_RCC_ClockConfig+0x1ac>)
 800580a:	5cd3      	ldrb	r3, [r2, r3]
 800580c:	000a      	movs	r2, r1
 800580e:	40da      	lsrs	r2, r3
 8005810:	4b09      	ldr	r3, [pc, #36]	; (8005838 <HAL_RCC_ClockConfig+0x1b0>)
 8005812:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8005814:	2000      	movs	r0, #0
 8005816:	f7fe fc3b 	bl	8004090 <HAL_InitTick>
  
  return HAL_OK;
 800581a:	2300      	movs	r3, #0
}
 800581c:	0018      	movs	r0, r3
 800581e:	46bd      	mov	sp, r7
 8005820:	b004      	add	sp, #16
 8005822:	bd80      	pop	{r7, pc}
 8005824:	40022000 	.word	0x40022000
 8005828:	40021000 	.word	0x40021000
 800582c:	00001388 	.word	0x00001388
 8005830:	fffff8ff 	.word	0xfffff8ff
 8005834:	08006e78 	.word	0x08006e78
 8005838:	20000004 	.word	0x20000004

0800583c <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to 
  *         the Cortex-M0 NMI (Non-Maskable Interrupt) exception vector.  
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 800583c:	b580      	push	{r7, lr}
 800583e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSON) ;
 8005840:	4b04      	ldr	r3, [pc, #16]	; (8005854 <HAL_RCC_EnableCSS+0x18>)
 8005842:	681a      	ldr	r2, [r3, #0]
 8005844:	4b03      	ldr	r3, [pc, #12]	; (8005854 <HAL_RCC_EnableCSS+0x18>)
 8005846:	2180      	movs	r1, #128	; 0x80
 8005848:	0309      	lsls	r1, r1, #12
 800584a:	430a      	orrs	r2, r1
 800584c:	601a      	str	r2, [r3, #0]
}
 800584e:	46c0      	nop			; (mov r8, r8)
 8005850:	46bd      	mov	sp, r7
 8005852:	bd80      	pop	{r7, pc}
 8005854:	40021000 	.word	0x40021000

08005858 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005858:	b590      	push	{r4, r7, lr}
 800585a:	b08f      	sub	sp, #60	; 0x3c
 800585c:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800585e:	2314      	movs	r3, #20
 8005860:	18fb      	adds	r3, r7, r3
 8005862:	4a38      	ldr	r2, [pc, #224]	; (8005944 <HAL_RCC_GetSysClockFreq+0xec>)
 8005864:	ca13      	ldmia	r2!, {r0, r1, r4}
 8005866:	c313      	stmia	r3!, {r0, r1, r4}
 8005868:	6812      	ldr	r2, [r2, #0]
 800586a:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 800586c:	1d3b      	adds	r3, r7, #4
 800586e:	4a36      	ldr	r2, [pc, #216]	; (8005948 <HAL_RCC_GetSysClockFreq+0xf0>)
 8005870:	ca13      	ldmia	r2!, {r0, r1, r4}
 8005872:	c313      	stmia	r3!, {r0, r1, r4}
 8005874:	6812      	ldr	r2, [r2, #0]
 8005876:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005878:	2300      	movs	r3, #0
 800587a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800587c:	2300      	movs	r3, #0
 800587e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005880:	2300      	movs	r3, #0
 8005882:	637b      	str	r3, [r7, #52]	; 0x34
 8005884:	2300      	movs	r3, #0
 8005886:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8005888:	2300      	movs	r3, #0
 800588a:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 800588c:	4b2f      	ldr	r3, [pc, #188]	; (800594c <HAL_RCC_GetSysClockFreq+0xf4>)
 800588e:	685b      	ldr	r3, [r3, #4]
 8005890:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005894:	220c      	movs	r2, #12
 8005896:	4013      	ands	r3, r2
 8005898:	2b0c      	cmp	r3, #12
 800589a:	d047      	beq.n	800592c <HAL_RCC_GetSysClockFreq+0xd4>
 800589c:	d849      	bhi.n	8005932 <HAL_RCC_GetSysClockFreq+0xda>
 800589e:	2b04      	cmp	r3, #4
 80058a0:	d002      	beq.n	80058a8 <HAL_RCC_GetSysClockFreq+0x50>
 80058a2:	2b08      	cmp	r3, #8
 80058a4:	d003      	beq.n	80058ae <HAL_RCC_GetSysClockFreq+0x56>
 80058a6:	e044      	b.n	8005932 <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80058a8:	4b29      	ldr	r3, [pc, #164]	; (8005950 <HAL_RCC_GetSysClockFreq+0xf8>)
 80058aa:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80058ac:	e044      	b.n	8005938 <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80058ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058b0:	0c9b      	lsrs	r3, r3, #18
 80058b2:	220f      	movs	r2, #15
 80058b4:	4013      	ands	r3, r2
 80058b6:	2214      	movs	r2, #20
 80058b8:	18ba      	adds	r2, r7, r2
 80058ba:	5cd3      	ldrb	r3, [r2, r3]
 80058bc:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80058be:	4b23      	ldr	r3, [pc, #140]	; (800594c <HAL_RCC_GetSysClockFreq+0xf4>)
 80058c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058c2:	220f      	movs	r2, #15
 80058c4:	4013      	ands	r3, r2
 80058c6:	1d3a      	adds	r2, r7, #4
 80058c8:	5cd3      	ldrb	r3, [r2, r3]
 80058ca:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80058cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80058ce:	23c0      	movs	r3, #192	; 0xc0
 80058d0:	025b      	lsls	r3, r3, #9
 80058d2:	401a      	ands	r2, r3
 80058d4:	2380      	movs	r3, #128	; 0x80
 80058d6:	025b      	lsls	r3, r3, #9
 80058d8:	429a      	cmp	r2, r3
 80058da:	d109      	bne.n	80058f0 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80058dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80058de:	481c      	ldr	r0, [pc, #112]	; (8005950 <HAL_RCC_GetSysClockFreq+0xf8>)
 80058e0:	f7fa fc12 	bl	8000108 <__udivsi3>
 80058e4:	0003      	movs	r3, r0
 80058e6:	001a      	movs	r2, r3
 80058e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ea:	4353      	muls	r3, r2
 80058ec:	637b      	str	r3, [r7, #52]	; 0x34
 80058ee:	e01a      	b.n	8005926 <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 80058f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80058f2:	23c0      	movs	r3, #192	; 0xc0
 80058f4:	025b      	lsls	r3, r3, #9
 80058f6:	401a      	ands	r2, r3
 80058f8:	23c0      	movs	r3, #192	; 0xc0
 80058fa:	025b      	lsls	r3, r3, #9
 80058fc:	429a      	cmp	r2, r3
 80058fe:	d109      	bne.n	8005914 <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005900:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005902:	4814      	ldr	r0, [pc, #80]	; (8005954 <HAL_RCC_GetSysClockFreq+0xfc>)
 8005904:	f7fa fc00 	bl	8000108 <__udivsi3>
 8005908:	0003      	movs	r3, r0
 800590a:	001a      	movs	r2, r3
 800590c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800590e:	4353      	muls	r3, r2
 8005910:	637b      	str	r3, [r7, #52]	; 0x34
 8005912:	e008      	b.n	8005926 <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005914:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005916:	480e      	ldr	r0, [pc, #56]	; (8005950 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005918:	f7fa fbf6 	bl	8000108 <__udivsi3>
 800591c:	0003      	movs	r3, r0
 800591e:	001a      	movs	r2, r3
 8005920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005922:	4353      	muls	r3, r2
 8005924:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8005926:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005928:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800592a:	e005      	b.n	8005938 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 800592c:	4b09      	ldr	r3, [pc, #36]	; (8005954 <HAL_RCC_GetSysClockFreq+0xfc>)
 800592e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005930:	e002      	b.n	8005938 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005932:	4b07      	ldr	r3, [pc, #28]	; (8005950 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005934:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005936:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8005938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800593a:	0018      	movs	r0, r3
 800593c:	46bd      	mov	sp, r7
 800593e:	b00f      	add	sp, #60	; 0x3c
 8005940:	bd90      	pop	{r4, r7, pc}
 8005942:	46c0      	nop			; (mov r8, r8)
 8005944:	08006d18 	.word	0x08006d18
 8005948:	08006d28 	.word	0x08006d28
 800594c:	40021000 	.word	0x40021000
 8005950:	007a1200 	.word	0x007a1200
 8005954:	02dc6c00 	.word	0x02dc6c00

08005958 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8005958:	b580      	push	{r7, lr}
 800595a:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 800595c:	4b06      	ldr	r3, [pc, #24]	; (8005978 <HAL_RCC_NMI_IRQHandler+0x20>)
 800595e:	689b      	ldr	r3, [r3, #8]
 8005960:	2280      	movs	r2, #128	; 0x80
 8005962:	4013      	ands	r3, r2
 8005964:	2b80      	cmp	r3, #128	; 0x80
 8005966:	d104      	bne.n	8005972 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8005968:	f000 f80a 	bl	8005980 <HAL_RCC_CSSCallback>
    
    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 800596c:	4b03      	ldr	r3, [pc, #12]	; (800597c <HAL_RCC_NMI_IRQHandler+0x24>)
 800596e:	2280      	movs	r2, #128	; 0x80
 8005970:	701a      	strb	r2, [r3, #0]
  }
}
 8005972:	46c0      	nop			; (mov r8, r8)
 8005974:	46bd      	mov	sp, r7
 8005976:	bd80      	pop	{r7, pc}
 8005978:	40021000 	.word	0x40021000
 800597c:	4002100a 	.word	0x4002100a

08005980 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8005980:	b580      	push	{r7, lr}
 8005982:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
    the HAL_RCC_CSSCallback could be implemented in the user file
    */ 
}
 8005984:	46c0      	nop			; (mov r8, r8)
 8005986:	46bd      	mov	sp, r7
 8005988:	bd80      	pop	{r7, pc}
	...

0800598c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b086      	sub	sp, #24
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005994:	2300      	movs	r3, #0
 8005996:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8005998:	2300      	movs	r3, #0
 800599a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681a      	ldr	r2, [r3, #0]
 80059a0:	2380      	movs	r3, #128	; 0x80
 80059a2:	025b      	lsls	r3, r3, #9
 80059a4:	4013      	ands	r3, r2
 80059a6:	d100      	bne.n	80059aa <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80059a8:	e08e      	b.n	8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80059aa:	2017      	movs	r0, #23
 80059ac:	183b      	adds	r3, r7, r0
 80059ae:	2200      	movs	r2, #0
 80059b0:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80059b2:	4b67      	ldr	r3, [pc, #412]	; (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80059b4:	69da      	ldr	r2, [r3, #28]
 80059b6:	2380      	movs	r3, #128	; 0x80
 80059b8:	055b      	lsls	r3, r3, #21
 80059ba:	4013      	ands	r3, r2
 80059bc:	d110      	bne.n	80059e0 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80059be:	4b64      	ldr	r3, [pc, #400]	; (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80059c0:	69da      	ldr	r2, [r3, #28]
 80059c2:	4b63      	ldr	r3, [pc, #396]	; (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80059c4:	2180      	movs	r1, #128	; 0x80
 80059c6:	0549      	lsls	r1, r1, #21
 80059c8:	430a      	orrs	r2, r1
 80059ca:	61da      	str	r2, [r3, #28]
 80059cc:	4b60      	ldr	r3, [pc, #384]	; (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80059ce:	69da      	ldr	r2, [r3, #28]
 80059d0:	2380      	movs	r3, #128	; 0x80
 80059d2:	055b      	lsls	r3, r3, #21
 80059d4:	4013      	ands	r3, r2
 80059d6:	60bb      	str	r3, [r7, #8]
 80059d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80059da:	183b      	adds	r3, r7, r0
 80059dc:	2201      	movs	r2, #1
 80059de:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80059e0:	4b5c      	ldr	r3, [pc, #368]	; (8005b54 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80059e2:	681a      	ldr	r2, [r3, #0]
 80059e4:	2380      	movs	r3, #128	; 0x80
 80059e6:	005b      	lsls	r3, r3, #1
 80059e8:	4013      	ands	r3, r2
 80059ea:	d11a      	bne.n	8005a22 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80059ec:	4b59      	ldr	r3, [pc, #356]	; (8005b54 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80059ee:	681a      	ldr	r2, [r3, #0]
 80059f0:	4b58      	ldr	r3, [pc, #352]	; (8005b54 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80059f2:	2180      	movs	r1, #128	; 0x80
 80059f4:	0049      	lsls	r1, r1, #1
 80059f6:	430a      	orrs	r2, r1
 80059f8:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80059fa:	f7fe fb8f 	bl	800411c <HAL_GetTick>
 80059fe:	0003      	movs	r3, r0
 8005a00:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a02:	e008      	b.n	8005a16 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a04:	f7fe fb8a 	bl	800411c <HAL_GetTick>
 8005a08:	0002      	movs	r2, r0
 8005a0a:	693b      	ldr	r3, [r7, #16]
 8005a0c:	1ad3      	subs	r3, r2, r3
 8005a0e:	2b64      	cmp	r3, #100	; 0x64
 8005a10:	d901      	bls.n	8005a16 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8005a12:	2303      	movs	r3, #3
 8005a14:	e097      	b.n	8005b46 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a16:	4b4f      	ldr	r3, [pc, #316]	; (8005b54 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8005a18:	681a      	ldr	r2, [r3, #0]
 8005a1a:	2380      	movs	r3, #128	; 0x80
 8005a1c:	005b      	lsls	r3, r3, #1
 8005a1e:	4013      	ands	r3, r2
 8005a20:	d0f0      	beq.n	8005a04 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005a22:	4b4b      	ldr	r3, [pc, #300]	; (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005a24:	6a1a      	ldr	r2, [r3, #32]
 8005a26:	23c0      	movs	r3, #192	; 0xc0
 8005a28:	009b      	lsls	r3, r3, #2
 8005a2a:	4013      	ands	r3, r2
 8005a2c:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d034      	beq.n	8005a9e <HAL_RCCEx_PeriphCLKConfig+0x112>
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	685a      	ldr	r2, [r3, #4]
 8005a38:	23c0      	movs	r3, #192	; 0xc0
 8005a3a:	009b      	lsls	r3, r3, #2
 8005a3c:	4013      	ands	r3, r2
 8005a3e:	68fa      	ldr	r2, [r7, #12]
 8005a40:	429a      	cmp	r2, r3
 8005a42:	d02c      	beq.n	8005a9e <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005a44:	4b42      	ldr	r3, [pc, #264]	; (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005a46:	6a1b      	ldr	r3, [r3, #32]
 8005a48:	4a43      	ldr	r2, [pc, #268]	; (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005a4a:	4013      	ands	r3, r2
 8005a4c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005a4e:	4b40      	ldr	r3, [pc, #256]	; (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005a50:	6a1a      	ldr	r2, [r3, #32]
 8005a52:	4b3f      	ldr	r3, [pc, #252]	; (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005a54:	2180      	movs	r1, #128	; 0x80
 8005a56:	0249      	lsls	r1, r1, #9
 8005a58:	430a      	orrs	r2, r1
 8005a5a:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005a5c:	4b3c      	ldr	r3, [pc, #240]	; (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005a5e:	6a1a      	ldr	r2, [r3, #32]
 8005a60:	4b3b      	ldr	r3, [pc, #236]	; (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005a62:	493e      	ldr	r1, [pc, #248]	; (8005b5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005a64:	400a      	ands	r2, r1
 8005a66:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005a68:	4b39      	ldr	r3, [pc, #228]	; (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005a6a:	68fa      	ldr	r2, [r7, #12]
 8005a6c:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	2201      	movs	r2, #1
 8005a72:	4013      	ands	r3, r2
 8005a74:	d013      	beq.n	8005a9e <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a76:	f7fe fb51 	bl	800411c <HAL_GetTick>
 8005a7a:	0003      	movs	r3, r0
 8005a7c:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a7e:	e009      	b.n	8005a94 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a80:	f7fe fb4c 	bl	800411c <HAL_GetTick>
 8005a84:	0002      	movs	r2, r0
 8005a86:	693b      	ldr	r3, [r7, #16]
 8005a88:	1ad3      	subs	r3, r2, r3
 8005a8a:	4a35      	ldr	r2, [pc, #212]	; (8005b60 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	d901      	bls.n	8005a94 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8005a90:	2303      	movs	r3, #3
 8005a92:	e058      	b.n	8005b46 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a94:	4b2e      	ldr	r3, [pc, #184]	; (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005a96:	6a1b      	ldr	r3, [r3, #32]
 8005a98:	2202      	movs	r2, #2
 8005a9a:	4013      	ands	r3, r2
 8005a9c:	d0f0      	beq.n	8005a80 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005a9e:	4b2c      	ldr	r3, [pc, #176]	; (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005aa0:	6a1b      	ldr	r3, [r3, #32]
 8005aa2:	4a2d      	ldr	r2, [pc, #180]	; (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005aa4:	4013      	ands	r3, r2
 8005aa6:	0019      	movs	r1, r3
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	685a      	ldr	r2, [r3, #4]
 8005aac:	4b28      	ldr	r3, [pc, #160]	; (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005aae:	430a      	orrs	r2, r1
 8005ab0:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005ab2:	2317      	movs	r3, #23
 8005ab4:	18fb      	adds	r3, r7, r3
 8005ab6:	781b      	ldrb	r3, [r3, #0]
 8005ab8:	2b01      	cmp	r3, #1
 8005aba:	d105      	bne.n	8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005abc:	4b24      	ldr	r3, [pc, #144]	; (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005abe:	69da      	ldr	r2, [r3, #28]
 8005ac0:	4b23      	ldr	r3, [pc, #140]	; (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005ac2:	4928      	ldr	r1, [pc, #160]	; (8005b64 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005ac4:	400a      	ands	r2, r1
 8005ac6:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	2201      	movs	r2, #1
 8005ace:	4013      	ands	r3, r2
 8005ad0:	d009      	beq.n	8005ae6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005ad2:	4b1f      	ldr	r3, [pc, #124]	; (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ad6:	2203      	movs	r2, #3
 8005ad8:	4393      	bics	r3, r2
 8005ada:	0019      	movs	r1, r3
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	689a      	ldr	r2, [r3, #8]
 8005ae0:	4b1b      	ldr	r3, [pc, #108]	; (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005ae2:	430a      	orrs	r2, r1
 8005ae4:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	2220      	movs	r2, #32
 8005aec:	4013      	ands	r3, r2
 8005aee:	d009      	beq.n	8005b04 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005af0:	4b17      	ldr	r3, [pc, #92]	; (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005af2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005af4:	2210      	movs	r2, #16
 8005af6:	4393      	bics	r3, r2
 8005af8:	0019      	movs	r1, r3
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	68da      	ldr	r2, [r3, #12]
 8005afe:	4b14      	ldr	r3, [pc, #80]	; (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005b00:	430a      	orrs	r2, r1
 8005b02:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681a      	ldr	r2, [r3, #0]
 8005b08:	2380      	movs	r3, #128	; 0x80
 8005b0a:	029b      	lsls	r3, r3, #10
 8005b0c:	4013      	ands	r3, r2
 8005b0e:	d009      	beq.n	8005b24 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005b10:	4b0f      	ldr	r3, [pc, #60]	; (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005b12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b14:	2280      	movs	r2, #128	; 0x80
 8005b16:	4393      	bics	r3, r2
 8005b18:	0019      	movs	r1, r3
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	695a      	ldr	r2, [r3, #20]
 8005b1e:	4b0c      	ldr	r3, [pc, #48]	; (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005b20:	430a      	orrs	r2, r1
 8005b22:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681a      	ldr	r2, [r3, #0]
 8005b28:	2380      	movs	r3, #128	; 0x80
 8005b2a:	00db      	lsls	r3, r3, #3
 8005b2c:	4013      	ands	r3, r2
 8005b2e:	d009      	beq.n	8005b44 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005b30:	4b07      	ldr	r3, [pc, #28]	; (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005b32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b34:	2240      	movs	r2, #64	; 0x40
 8005b36:	4393      	bics	r3, r2
 8005b38:	0019      	movs	r1, r3
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	691a      	ldr	r2, [r3, #16]
 8005b3e:	4b04      	ldr	r3, [pc, #16]	; (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8005b40:	430a      	orrs	r2, r1
 8005b42:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8005b44:	2300      	movs	r3, #0
}
 8005b46:	0018      	movs	r0, r3
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	b006      	add	sp, #24
 8005b4c:	bd80      	pop	{r7, pc}
 8005b4e:	46c0      	nop			; (mov r8, r8)
 8005b50:	40021000 	.word	0x40021000
 8005b54:	40007000 	.word	0x40007000
 8005b58:	fffffcff 	.word	0xfffffcff
 8005b5c:	fffeffff 	.word	0xfffeffff
 8005b60:	00001388 	.word	0x00001388
 8005b64:	efffffff 	.word	0xefffffff

08005b68 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b082      	sub	sp, #8
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d101      	bne.n	8005b7a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005b76:	2301      	movs	r3, #1
 8005b78:	e042      	b.n	8005c00 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	223d      	movs	r2, #61	; 0x3d
 8005b7e:	5c9b      	ldrb	r3, [r3, r2]
 8005b80:	b2db      	uxtb	r3, r3
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d107      	bne.n	8005b96 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	223c      	movs	r2, #60	; 0x3c
 8005b8a:	2100      	movs	r1, #0
 8005b8c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	0018      	movs	r0, r3
 8005b92:	f7fe f8d3 	bl	8003d3c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	223d      	movs	r2, #61	; 0x3d
 8005b9a:	2102      	movs	r1, #2
 8005b9c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681a      	ldr	r2, [r3, #0]
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	3304      	adds	r3, #4
 8005ba6:	0019      	movs	r1, r3
 8005ba8:	0010      	movs	r0, r2
 8005baa:	f000 fc99 	bl	80064e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2246      	movs	r2, #70	; 0x46
 8005bb2:	2101      	movs	r1, #1
 8005bb4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	223e      	movs	r2, #62	; 0x3e
 8005bba:	2101      	movs	r1, #1
 8005bbc:	5499      	strb	r1, [r3, r2]
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	223f      	movs	r2, #63	; 0x3f
 8005bc2:	2101      	movs	r1, #1
 8005bc4:	5499      	strb	r1, [r3, r2]
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2240      	movs	r2, #64	; 0x40
 8005bca:	2101      	movs	r1, #1
 8005bcc:	5499      	strb	r1, [r3, r2]
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2241      	movs	r2, #65	; 0x41
 8005bd2:	2101      	movs	r1, #1
 8005bd4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2242      	movs	r2, #66	; 0x42
 8005bda:	2101      	movs	r1, #1
 8005bdc:	5499      	strb	r1, [r3, r2]
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2243      	movs	r2, #67	; 0x43
 8005be2:	2101      	movs	r1, #1
 8005be4:	5499      	strb	r1, [r3, r2]
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2244      	movs	r2, #68	; 0x44
 8005bea:	2101      	movs	r1, #1
 8005bec:	5499      	strb	r1, [r3, r2]
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2245      	movs	r2, #69	; 0x45
 8005bf2:	2101      	movs	r1, #1
 8005bf4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	223d      	movs	r2, #61	; 0x3d
 8005bfa:	2101      	movs	r1, #1
 8005bfc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005bfe:	2300      	movs	r3, #0
}
 8005c00:	0018      	movs	r0, r3
 8005c02:	46bd      	mov	sp, r7
 8005c04:	b002      	add	sp, #8
 8005c06:	bd80      	pop	{r7, pc}

08005c08 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b084      	sub	sp, #16
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	223d      	movs	r2, #61	; 0x3d
 8005c14:	5c9b      	ldrb	r3, [r3, r2]
 8005c16:	b2db      	uxtb	r3, r3
 8005c18:	2b01      	cmp	r3, #1
 8005c1a:	d001      	beq.n	8005c20 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	e02e      	b.n	8005c7e <HAL_TIM_Base_Start+0x76>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	223d      	movs	r2, #61	; 0x3d
 8005c24:	2102      	movs	r1, #2
 8005c26:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	4a16      	ldr	r2, [pc, #88]	; (8005c88 <HAL_TIM_Base_Start+0x80>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d00a      	beq.n	8005c48 <HAL_TIM_Base_Start+0x40>
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681a      	ldr	r2, [r3, #0]
 8005c36:	2380      	movs	r3, #128	; 0x80
 8005c38:	05db      	lsls	r3, r3, #23
 8005c3a:	429a      	cmp	r2, r3
 8005c3c:	d004      	beq.n	8005c48 <HAL_TIM_Base_Start+0x40>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	4a12      	ldr	r2, [pc, #72]	; (8005c8c <HAL_TIM_Base_Start+0x84>)
 8005c44:	4293      	cmp	r3, r2
 8005c46:	d111      	bne.n	8005c6c <HAL_TIM_Base_Start+0x64>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	689b      	ldr	r3, [r3, #8]
 8005c4e:	2207      	movs	r2, #7
 8005c50:	4013      	ands	r3, r2
 8005c52:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	2b06      	cmp	r3, #6
 8005c58:	d010      	beq.n	8005c7c <HAL_TIM_Base_Start+0x74>
    {
      __HAL_TIM_ENABLE(htim);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	681a      	ldr	r2, [r3, #0]
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	2101      	movs	r1, #1
 8005c66:	430a      	orrs	r2, r1
 8005c68:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c6a:	e007      	b.n	8005c7c <HAL_TIM_Base_Start+0x74>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	681a      	ldr	r2, [r3, #0]
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	2101      	movs	r1, #1
 8005c78:	430a      	orrs	r2, r1
 8005c7a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005c7c:	2300      	movs	r3, #0
}
 8005c7e:	0018      	movs	r0, r3
 8005c80:	46bd      	mov	sp, r7
 8005c82:	b004      	add	sp, #16
 8005c84:	bd80      	pop	{r7, pc}
 8005c86:	46c0      	nop			; (mov r8, r8)
 8005c88:	40012c00 	.word	0x40012c00
 8005c8c:	40000400 	.word	0x40000400

08005c90 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b084      	sub	sp, #16
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	223d      	movs	r2, #61	; 0x3d
 8005c9c:	5c9b      	ldrb	r3, [r3, r2]
 8005c9e:	b2db      	uxtb	r3, r3
 8005ca0:	2b01      	cmp	r3, #1
 8005ca2:	d001      	beq.n	8005ca8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005ca4:	2301      	movs	r3, #1
 8005ca6:	e036      	b.n	8005d16 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	223d      	movs	r2, #61	; 0x3d
 8005cac:	2102      	movs	r1, #2
 8005cae:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	68da      	ldr	r2, [r3, #12]
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	2101      	movs	r1, #1
 8005cbc:	430a      	orrs	r2, r1
 8005cbe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	4a16      	ldr	r2, [pc, #88]	; (8005d20 <HAL_TIM_Base_Start_IT+0x90>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d00a      	beq.n	8005ce0 <HAL_TIM_Base_Start_IT+0x50>
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681a      	ldr	r2, [r3, #0]
 8005cce:	2380      	movs	r3, #128	; 0x80
 8005cd0:	05db      	lsls	r3, r3, #23
 8005cd2:	429a      	cmp	r2, r3
 8005cd4:	d004      	beq.n	8005ce0 <HAL_TIM_Base_Start_IT+0x50>
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	4a12      	ldr	r2, [pc, #72]	; (8005d24 <HAL_TIM_Base_Start_IT+0x94>)
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d111      	bne.n	8005d04 <HAL_TIM_Base_Start_IT+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	689b      	ldr	r3, [r3, #8]
 8005ce6:	2207      	movs	r2, #7
 8005ce8:	4013      	ands	r3, r2
 8005cea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	2b06      	cmp	r3, #6
 8005cf0:	d010      	beq.n	8005d14 <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	681a      	ldr	r2, [r3, #0]
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	2101      	movs	r1, #1
 8005cfe:	430a      	orrs	r2, r1
 8005d00:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d02:	e007      	b.n	8005d14 <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	681a      	ldr	r2, [r3, #0]
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	2101      	movs	r1, #1
 8005d10:	430a      	orrs	r2, r1
 8005d12:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005d14:	2300      	movs	r3, #0
}
 8005d16:	0018      	movs	r0, r3
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	b004      	add	sp, #16
 8005d1c:	bd80      	pop	{r7, pc}
 8005d1e:	46c0      	nop			; (mov r8, r8)
 8005d20:	40012c00 	.word	0x40012c00
 8005d24:	40000400 	.word	0x40000400

08005d28 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b082      	sub	sp, #8
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d101      	bne.n	8005d3a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005d36:	2301      	movs	r3, #1
 8005d38:	e042      	b.n	8005dc0 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	223d      	movs	r2, #61	; 0x3d
 8005d3e:	5c9b      	ldrb	r3, [r3, r2]
 8005d40:	b2db      	uxtb	r3, r3
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d107      	bne.n	8005d56 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	223c      	movs	r2, #60	; 0x3c
 8005d4a:	2100      	movs	r1, #0
 8005d4c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	0018      	movs	r0, r3
 8005d52:	f000 f839 	bl	8005dc8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	223d      	movs	r2, #61	; 0x3d
 8005d5a:	2102      	movs	r1, #2
 8005d5c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681a      	ldr	r2, [r3, #0]
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	3304      	adds	r3, #4
 8005d66:	0019      	movs	r1, r3
 8005d68:	0010      	movs	r0, r2
 8005d6a:	f000 fbb9 	bl	80064e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2246      	movs	r2, #70	; 0x46
 8005d72:	2101      	movs	r1, #1
 8005d74:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	223e      	movs	r2, #62	; 0x3e
 8005d7a:	2101      	movs	r1, #1
 8005d7c:	5499      	strb	r1, [r3, r2]
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	223f      	movs	r2, #63	; 0x3f
 8005d82:	2101      	movs	r1, #1
 8005d84:	5499      	strb	r1, [r3, r2]
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2240      	movs	r2, #64	; 0x40
 8005d8a:	2101      	movs	r1, #1
 8005d8c:	5499      	strb	r1, [r3, r2]
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	2241      	movs	r2, #65	; 0x41
 8005d92:	2101      	movs	r1, #1
 8005d94:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2242      	movs	r2, #66	; 0x42
 8005d9a:	2101      	movs	r1, #1
 8005d9c:	5499      	strb	r1, [r3, r2]
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2243      	movs	r2, #67	; 0x43
 8005da2:	2101      	movs	r1, #1
 8005da4:	5499      	strb	r1, [r3, r2]
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2244      	movs	r2, #68	; 0x44
 8005daa:	2101      	movs	r1, #1
 8005dac:	5499      	strb	r1, [r3, r2]
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2245      	movs	r2, #69	; 0x45
 8005db2:	2101      	movs	r1, #1
 8005db4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	223d      	movs	r2, #61	; 0x3d
 8005dba:	2101      	movs	r1, #1
 8005dbc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005dbe:	2300      	movs	r3, #0
}
 8005dc0:	0018      	movs	r0, r3
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	b002      	add	sp, #8
 8005dc6:	bd80      	pop	{r7, pc}

08005dc8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b082      	sub	sp, #8
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005dd0:	46c0      	nop			; (mov r8, r8)
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	b002      	add	sp, #8
 8005dd6:	bd80      	pop	{r7, pc}

08005dd8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b084      	sub	sp, #16
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
 8005de0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d108      	bne.n	8005dfa <HAL_TIM_PWM_Start+0x22>
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	223e      	movs	r2, #62	; 0x3e
 8005dec:	5c9b      	ldrb	r3, [r3, r2]
 8005dee:	b2db      	uxtb	r3, r3
 8005df0:	3b01      	subs	r3, #1
 8005df2:	1e5a      	subs	r2, r3, #1
 8005df4:	4193      	sbcs	r3, r2
 8005df6:	b2db      	uxtb	r3, r3
 8005df8:	e01f      	b.n	8005e3a <HAL_TIM_PWM_Start+0x62>
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	2b04      	cmp	r3, #4
 8005dfe:	d108      	bne.n	8005e12 <HAL_TIM_PWM_Start+0x3a>
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	223f      	movs	r2, #63	; 0x3f
 8005e04:	5c9b      	ldrb	r3, [r3, r2]
 8005e06:	b2db      	uxtb	r3, r3
 8005e08:	3b01      	subs	r3, #1
 8005e0a:	1e5a      	subs	r2, r3, #1
 8005e0c:	4193      	sbcs	r3, r2
 8005e0e:	b2db      	uxtb	r3, r3
 8005e10:	e013      	b.n	8005e3a <HAL_TIM_PWM_Start+0x62>
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	2b08      	cmp	r3, #8
 8005e16:	d108      	bne.n	8005e2a <HAL_TIM_PWM_Start+0x52>
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2240      	movs	r2, #64	; 0x40
 8005e1c:	5c9b      	ldrb	r3, [r3, r2]
 8005e1e:	b2db      	uxtb	r3, r3
 8005e20:	3b01      	subs	r3, #1
 8005e22:	1e5a      	subs	r2, r3, #1
 8005e24:	4193      	sbcs	r3, r2
 8005e26:	b2db      	uxtb	r3, r3
 8005e28:	e007      	b.n	8005e3a <HAL_TIM_PWM_Start+0x62>
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2241      	movs	r2, #65	; 0x41
 8005e2e:	5c9b      	ldrb	r3, [r3, r2]
 8005e30:	b2db      	uxtb	r3, r3
 8005e32:	3b01      	subs	r3, #1
 8005e34:	1e5a      	subs	r2, r3, #1
 8005e36:	4193      	sbcs	r3, r2
 8005e38:	b2db      	uxtb	r3, r3
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d001      	beq.n	8005e42 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 8005e3e:	2301      	movs	r3, #1
 8005e40:	e06a      	b.n	8005f18 <HAL_TIM_PWM_Start+0x140>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d104      	bne.n	8005e52 <HAL_TIM_PWM_Start+0x7a>
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	223e      	movs	r2, #62	; 0x3e
 8005e4c:	2102      	movs	r1, #2
 8005e4e:	5499      	strb	r1, [r3, r2]
 8005e50:	e013      	b.n	8005e7a <HAL_TIM_PWM_Start+0xa2>
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	2b04      	cmp	r3, #4
 8005e56:	d104      	bne.n	8005e62 <HAL_TIM_PWM_Start+0x8a>
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	223f      	movs	r2, #63	; 0x3f
 8005e5c:	2102      	movs	r1, #2
 8005e5e:	5499      	strb	r1, [r3, r2]
 8005e60:	e00b      	b.n	8005e7a <HAL_TIM_PWM_Start+0xa2>
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	2b08      	cmp	r3, #8
 8005e66:	d104      	bne.n	8005e72 <HAL_TIM_PWM_Start+0x9a>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2240      	movs	r2, #64	; 0x40
 8005e6c:	2102      	movs	r1, #2
 8005e6e:	5499      	strb	r1, [r3, r2]
 8005e70:	e003      	b.n	8005e7a <HAL_TIM_PWM_Start+0xa2>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2241      	movs	r2, #65	; 0x41
 8005e76:	2102      	movs	r1, #2
 8005e78:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	6839      	ldr	r1, [r7, #0]
 8005e80:	2201      	movs	r2, #1
 8005e82:	0018      	movs	r0, r3
 8005e84:	f000 fe1c 	bl	8006ac0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	4a24      	ldr	r2, [pc, #144]	; (8005f20 <HAL_TIM_PWM_Start+0x148>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d009      	beq.n	8005ea6 <HAL_TIM_PWM_Start+0xce>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	4a23      	ldr	r2, [pc, #140]	; (8005f24 <HAL_TIM_PWM_Start+0x14c>)
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	d004      	beq.n	8005ea6 <HAL_TIM_PWM_Start+0xce>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	4a21      	ldr	r2, [pc, #132]	; (8005f28 <HAL_TIM_PWM_Start+0x150>)
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d101      	bne.n	8005eaa <HAL_TIM_PWM_Start+0xd2>
 8005ea6:	2301      	movs	r3, #1
 8005ea8:	e000      	b.n	8005eac <HAL_TIM_PWM_Start+0xd4>
 8005eaa:	2300      	movs	r3, #0
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d008      	beq.n	8005ec2 <HAL_TIM_PWM_Start+0xea>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	2180      	movs	r1, #128	; 0x80
 8005ebc:	0209      	lsls	r1, r1, #8
 8005ebe:	430a      	orrs	r2, r1
 8005ec0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	4a16      	ldr	r2, [pc, #88]	; (8005f20 <HAL_TIM_PWM_Start+0x148>)
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d00a      	beq.n	8005ee2 <HAL_TIM_PWM_Start+0x10a>
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681a      	ldr	r2, [r3, #0]
 8005ed0:	2380      	movs	r3, #128	; 0x80
 8005ed2:	05db      	lsls	r3, r3, #23
 8005ed4:	429a      	cmp	r2, r3
 8005ed6:	d004      	beq.n	8005ee2 <HAL_TIM_PWM_Start+0x10a>
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	4a13      	ldr	r2, [pc, #76]	; (8005f2c <HAL_TIM_PWM_Start+0x154>)
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d111      	bne.n	8005f06 <HAL_TIM_PWM_Start+0x12e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	689b      	ldr	r3, [r3, #8]
 8005ee8:	2207      	movs	r2, #7
 8005eea:	4013      	ands	r3, r2
 8005eec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	2b06      	cmp	r3, #6
 8005ef2:	d010      	beq.n	8005f16 <HAL_TIM_PWM_Start+0x13e>
    {
      __HAL_TIM_ENABLE(htim);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	681a      	ldr	r2, [r3, #0]
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	2101      	movs	r1, #1
 8005f00:	430a      	orrs	r2, r1
 8005f02:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f04:	e007      	b.n	8005f16 <HAL_TIM_PWM_Start+0x13e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	681a      	ldr	r2, [r3, #0]
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	2101      	movs	r1, #1
 8005f12:	430a      	orrs	r2, r1
 8005f14:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005f16:	2300      	movs	r3, #0
}
 8005f18:	0018      	movs	r0, r3
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	b004      	add	sp, #16
 8005f1e:	bd80      	pop	{r7, pc}
 8005f20:	40012c00 	.word	0x40012c00
 8005f24:	40014400 	.word	0x40014400
 8005f28:	40014800 	.word	0x40014800
 8005f2c:	40000400 	.word	0x40000400

08005f30 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b082      	sub	sp, #8
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	691b      	ldr	r3, [r3, #16]
 8005f3e:	2202      	movs	r2, #2
 8005f40:	4013      	ands	r3, r2
 8005f42:	2b02      	cmp	r3, #2
 8005f44:	d124      	bne.n	8005f90 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	68db      	ldr	r3, [r3, #12]
 8005f4c:	2202      	movs	r2, #2
 8005f4e:	4013      	ands	r3, r2
 8005f50:	2b02      	cmp	r3, #2
 8005f52:	d11d      	bne.n	8005f90 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	2203      	movs	r2, #3
 8005f5a:	4252      	negs	r2, r2
 8005f5c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	2201      	movs	r2, #1
 8005f62:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	699b      	ldr	r3, [r3, #24]
 8005f6a:	2203      	movs	r2, #3
 8005f6c:	4013      	ands	r3, r2
 8005f6e:	d004      	beq.n	8005f7a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	0018      	movs	r0, r3
 8005f74:	f000 fa9c 	bl	80064b0 <HAL_TIM_IC_CaptureCallback>
 8005f78:	e007      	b.n	8005f8a <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	0018      	movs	r0, r3
 8005f7e:	f000 fa8f 	bl	80064a0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	0018      	movs	r0, r3
 8005f86:	f000 fa9b 	bl	80064c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	691b      	ldr	r3, [r3, #16]
 8005f96:	2204      	movs	r2, #4
 8005f98:	4013      	ands	r3, r2
 8005f9a:	2b04      	cmp	r3, #4
 8005f9c:	d125      	bne.n	8005fea <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	68db      	ldr	r3, [r3, #12]
 8005fa4:	2204      	movs	r2, #4
 8005fa6:	4013      	ands	r3, r2
 8005fa8:	2b04      	cmp	r3, #4
 8005faa:	d11e      	bne.n	8005fea <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	2205      	movs	r2, #5
 8005fb2:	4252      	negs	r2, r2
 8005fb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2202      	movs	r2, #2
 8005fba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	699a      	ldr	r2, [r3, #24]
 8005fc2:	23c0      	movs	r3, #192	; 0xc0
 8005fc4:	009b      	lsls	r3, r3, #2
 8005fc6:	4013      	ands	r3, r2
 8005fc8:	d004      	beq.n	8005fd4 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	0018      	movs	r0, r3
 8005fce:	f000 fa6f 	bl	80064b0 <HAL_TIM_IC_CaptureCallback>
 8005fd2:	e007      	b.n	8005fe4 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	0018      	movs	r0, r3
 8005fd8:	f000 fa62 	bl	80064a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	0018      	movs	r0, r3
 8005fe0:	f000 fa6e 	bl	80064c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	691b      	ldr	r3, [r3, #16]
 8005ff0:	2208      	movs	r2, #8
 8005ff2:	4013      	ands	r3, r2
 8005ff4:	2b08      	cmp	r3, #8
 8005ff6:	d124      	bne.n	8006042 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	68db      	ldr	r3, [r3, #12]
 8005ffe:	2208      	movs	r2, #8
 8006000:	4013      	ands	r3, r2
 8006002:	2b08      	cmp	r3, #8
 8006004:	d11d      	bne.n	8006042 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	2209      	movs	r2, #9
 800600c:	4252      	negs	r2, r2
 800600e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2204      	movs	r2, #4
 8006014:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	69db      	ldr	r3, [r3, #28]
 800601c:	2203      	movs	r2, #3
 800601e:	4013      	ands	r3, r2
 8006020:	d004      	beq.n	800602c <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	0018      	movs	r0, r3
 8006026:	f000 fa43 	bl	80064b0 <HAL_TIM_IC_CaptureCallback>
 800602a:	e007      	b.n	800603c <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	0018      	movs	r0, r3
 8006030:	f000 fa36 	bl	80064a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	0018      	movs	r0, r3
 8006038:	f000 fa42 	bl	80064c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2200      	movs	r2, #0
 8006040:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	691b      	ldr	r3, [r3, #16]
 8006048:	2210      	movs	r2, #16
 800604a:	4013      	ands	r3, r2
 800604c:	2b10      	cmp	r3, #16
 800604e:	d125      	bne.n	800609c <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	68db      	ldr	r3, [r3, #12]
 8006056:	2210      	movs	r2, #16
 8006058:	4013      	ands	r3, r2
 800605a:	2b10      	cmp	r3, #16
 800605c:	d11e      	bne.n	800609c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	2211      	movs	r2, #17
 8006064:	4252      	negs	r2, r2
 8006066:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2208      	movs	r2, #8
 800606c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	69da      	ldr	r2, [r3, #28]
 8006074:	23c0      	movs	r3, #192	; 0xc0
 8006076:	009b      	lsls	r3, r3, #2
 8006078:	4013      	ands	r3, r2
 800607a:	d004      	beq.n	8006086 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	0018      	movs	r0, r3
 8006080:	f000 fa16 	bl	80064b0 <HAL_TIM_IC_CaptureCallback>
 8006084:	e007      	b.n	8006096 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	0018      	movs	r0, r3
 800608a:	f000 fa09 	bl	80064a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	0018      	movs	r0, r3
 8006092:	f000 fa15 	bl	80064c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2200      	movs	r2, #0
 800609a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	691b      	ldr	r3, [r3, #16]
 80060a2:	2201      	movs	r2, #1
 80060a4:	4013      	ands	r3, r2
 80060a6:	2b01      	cmp	r3, #1
 80060a8:	d10f      	bne.n	80060ca <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	68db      	ldr	r3, [r3, #12]
 80060b0:	2201      	movs	r2, #1
 80060b2:	4013      	ands	r3, r2
 80060b4:	2b01      	cmp	r3, #1
 80060b6:	d108      	bne.n	80060ca <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	2202      	movs	r2, #2
 80060be:	4252      	negs	r2, r2
 80060c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	0018      	movs	r0, r3
 80060c6:	f000 f9e3 	bl	8006490 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	691b      	ldr	r3, [r3, #16]
 80060d0:	2280      	movs	r2, #128	; 0x80
 80060d2:	4013      	ands	r3, r2
 80060d4:	2b80      	cmp	r3, #128	; 0x80
 80060d6:	d10f      	bne.n	80060f8 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	68db      	ldr	r3, [r3, #12]
 80060de:	2280      	movs	r2, #128	; 0x80
 80060e0:	4013      	ands	r3, r2
 80060e2:	2b80      	cmp	r3, #128	; 0x80
 80060e4:	d108      	bne.n	80060f8 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	2281      	movs	r2, #129	; 0x81
 80060ec:	4252      	negs	r2, r2
 80060ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	0018      	movs	r0, r3
 80060f4:	f000 fdc6 	bl	8006c84 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	691b      	ldr	r3, [r3, #16]
 80060fe:	2240      	movs	r2, #64	; 0x40
 8006100:	4013      	ands	r3, r2
 8006102:	2b40      	cmp	r3, #64	; 0x40
 8006104:	d10f      	bne.n	8006126 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	68db      	ldr	r3, [r3, #12]
 800610c:	2240      	movs	r2, #64	; 0x40
 800610e:	4013      	ands	r3, r2
 8006110:	2b40      	cmp	r3, #64	; 0x40
 8006112:	d108      	bne.n	8006126 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	2241      	movs	r2, #65	; 0x41
 800611a:	4252      	negs	r2, r2
 800611c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	0018      	movs	r0, r3
 8006122:	f000 f9d5 	bl	80064d0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	691b      	ldr	r3, [r3, #16]
 800612c:	2220      	movs	r2, #32
 800612e:	4013      	ands	r3, r2
 8006130:	2b20      	cmp	r3, #32
 8006132:	d10f      	bne.n	8006154 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	68db      	ldr	r3, [r3, #12]
 800613a:	2220      	movs	r2, #32
 800613c:	4013      	ands	r3, r2
 800613e:	2b20      	cmp	r3, #32
 8006140:	d108      	bne.n	8006154 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	2221      	movs	r2, #33	; 0x21
 8006148:	4252      	negs	r2, r2
 800614a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	0018      	movs	r0, r3
 8006150:	f000 fd90 	bl	8006c74 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006154:	46c0      	nop			; (mov r8, r8)
 8006156:	46bd      	mov	sp, r7
 8006158:	b002      	add	sp, #8
 800615a:	bd80      	pop	{r7, pc}

0800615c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800615c:	b580      	push	{r7, lr}
 800615e:	b086      	sub	sp, #24
 8006160:	af00      	add	r7, sp, #0
 8006162:	60f8      	str	r0, [r7, #12]
 8006164:	60b9      	str	r1, [r7, #8]
 8006166:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006168:	2317      	movs	r3, #23
 800616a:	18fb      	adds	r3, r7, r3
 800616c:	2200      	movs	r2, #0
 800616e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	223c      	movs	r2, #60	; 0x3c
 8006174:	5c9b      	ldrb	r3, [r3, r2]
 8006176:	2b01      	cmp	r3, #1
 8006178:	d101      	bne.n	800617e <HAL_TIM_PWM_ConfigChannel+0x22>
 800617a:	2302      	movs	r3, #2
 800617c:	e0ad      	b.n	80062da <HAL_TIM_PWM_ConfigChannel+0x17e>
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	223c      	movs	r2, #60	; 0x3c
 8006182:	2101      	movs	r1, #1
 8006184:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	2b0c      	cmp	r3, #12
 800618a:	d100      	bne.n	800618e <HAL_TIM_PWM_ConfigChannel+0x32>
 800618c:	e076      	b.n	800627c <HAL_TIM_PWM_ConfigChannel+0x120>
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2b0c      	cmp	r3, #12
 8006192:	d900      	bls.n	8006196 <HAL_TIM_PWM_ConfigChannel+0x3a>
 8006194:	e095      	b.n	80062c2 <HAL_TIM_PWM_ConfigChannel+0x166>
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	2b08      	cmp	r3, #8
 800619a:	d04e      	beq.n	800623a <HAL_TIM_PWM_ConfigChannel+0xde>
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2b08      	cmp	r3, #8
 80061a0:	d900      	bls.n	80061a4 <HAL_TIM_PWM_ConfigChannel+0x48>
 80061a2:	e08e      	b.n	80062c2 <HAL_TIM_PWM_ConfigChannel+0x166>
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d003      	beq.n	80061b2 <HAL_TIM_PWM_ConfigChannel+0x56>
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2b04      	cmp	r3, #4
 80061ae:	d021      	beq.n	80061f4 <HAL_TIM_PWM_ConfigChannel+0x98>
 80061b0:	e087      	b.n	80062c2 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	68ba      	ldr	r2, [r7, #8]
 80061b8:	0011      	movs	r1, r2
 80061ba:	0018      	movs	r0, r3
 80061bc:	f000 fa06 	bl	80065cc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	699a      	ldr	r2, [r3, #24]
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	2108      	movs	r1, #8
 80061cc:	430a      	orrs	r2, r1
 80061ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	699a      	ldr	r2, [r3, #24]
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	2104      	movs	r1, #4
 80061dc:	438a      	bics	r2, r1
 80061de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	6999      	ldr	r1, [r3, #24]
 80061e6:	68bb      	ldr	r3, [r7, #8]
 80061e8:	691a      	ldr	r2, [r3, #16]
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	430a      	orrs	r2, r1
 80061f0:	619a      	str	r2, [r3, #24]
      break;
 80061f2:	e06b      	b.n	80062cc <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	68ba      	ldr	r2, [r7, #8]
 80061fa:	0011      	movs	r1, r2
 80061fc:	0018      	movs	r0, r3
 80061fe:	f000 fa63 	bl	80066c8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	699a      	ldr	r2, [r3, #24]
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	2180      	movs	r1, #128	; 0x80
 800620e:	0109      	lsls	r1, r1, #4
 8006210:	430a      	orrs	r2, r1
 8006212:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	699a      	ldr	r2, [r3, #24]
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	4931      	ldr	r1, [pc, #196]	; (80062e4 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8006220:	400a      	ands	r2, r1
 8006222:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	6999      	ldr	r1, [r3, #24]
 800622a:	68bb      	ldr	r3, [r7, #8]
 800622c:	691b      	ldr	r3, [r3, #16]
 800622e:	021a      	lsls	r2, r3, #8
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	430a      	orrs	r2, r1
 8006236:	619a      	str	r2, [r3, #24]
      break;
 8006238:	e048      	b.n	80062cc <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	68ba      	ldr	r2, [r7, #8]
 8006240:	0011      	movs	r1, r2
 8006242:	0018      	movs	r0, r3
 8006244:	f000 fabe 	bl	80067c4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	69da      	ldr	r2, [r3, #28]
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	2108      	movs	r1, #8
 8006254:	430a      	orrs	r2, r1
 8006256:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	69da      	ldr	r2, [r3, #28]
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	2104      	movs	r1, #4
 8006264:	438a      	bics	r2, r1
 8006266:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	69d9      	ldr	r1, [r3, #28]
 800626e:	68bb      	ldr	r3, [r7, #8]
 8006270:	691a      	ldr	r2, [r3, #16]
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	430a      	orrs	r2, r1
 8006278:	61da      	str	r2, [r3, #28]
      break;
 800627a:	e027      	b.n	80062cc <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	68ba      	ldr	r2, [r7, #8]
 8006282:	0011      	movs	r1, r2
 8006284:	0018      	movs	r0, r3
 8006286:	f000 fb1d 	bl	80068c4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	69da      	ldr	r2, [r3, #28]
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	2180      	movs	r1, #128	; 0x80
 8006296:	0109      	lsls	r1, r1, #4
 8006298:	430a      	orrs	r2, r1
 800629a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	69da      	ldr	r2, [r3, #28]
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	490f      	ldr	r1, [pc, #60]	; (80062e4 <HAL_TIM_PWM_ConfigChannel+0x188>)
 80062a8:	400a      	ands	r2, r1
 80062aa:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	69d9      	ldr	r1, [r3, #28]
 80062b2:	68bb      	ldr	r3, [r7, #8]
 80062b4:	691b      	ldr	r3, [r3, #16]
 80062b6:	021a      	lsls	r2, r3, #8
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	430a      	orrs	r2, r1
 80062be:	61da      	str	r2, [r3, #28]
      break;
 80062c0:	e004      	b.n	80062cc <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 80062c2:	2317      	movs	r3, #23
 80062c4:	18fb      	adds	r3, r7, r3
 80062c6:	2201      	movs	r2, #1
 80062c8:	701a      	strb	r2, [r3, #0]
      break;
 80062ca:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	223c      	movs	r2, #60	; 0x3c
 80062d0:	2100      	movs	r1, #0
 80062d2:	5499      	strb	r1, [r3, r2]

  return status;
 80062d4:	2317      	movs	r3, #23
 80062d6:	18fb      	adds	r3, r7, r3
 80062d8:	781b      	ldrb	r3, [r3, #0]
}
 80062da:	0018      	movs	r0, r3
 80062dc:	46bd      	mov	sp, r7
 80062de:	b006      	add	sp, #24
 80062e0:	bd80      	pop	{r7, pc}
 80062e2:	46c0      	nop			; (mov r8, r8)
 80062e4:	fffffbff 	.word	0xfffffbff

080062e8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b084      	sub	sp, #16
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
 80062f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80062f2:	230f      	movs	r3, #15
 80062f4:	18fb      	adds	r3, r7, r3
 80062f6:	2200      	movs	r2, #0
 80062f8:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	223c      	movs	r2, #60	; 0x3c
 80062fe:	5c9b      	ldrb	r3, [r3, r2]
 8006300:	2b01      	cmp	r3, #1
 8006302:	d101      	bne.n	8006308 <HAL_TIM_ConfigClockSource+0x20>
 8006304:	2302      	movs	r3, #2
 8006306:	e0bc      	b.n	8006482 <HAL_TIM_ConfigClockSource+0x19a>
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	223c      	movs	r2, #60	; 0x3c
 800630c:	2101      	movs	r1, #1
 800630e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	223d      	movs	r2, #61	; 0x3d
 8006314:	2102      	movs	r1, #2
 8006316:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	689b      	ldr	r3, [r3, #8]
 800631e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006320:	68bb      	ldr	r3, [r7, #8]
 8006322:	2277      	movs	r2, #119	; 0x77
 8006324:	4393      	bics	r3, r2
 8006326:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006328:	68bb      	ldr	r3, [r7, #8]
 800632a:	4a58      	ldr	r2, [pc, #352]	; (800648c <HAL_TIM_ConfigClockSource+0x1a4>)
 800632c:	4013      	ands	r3, r2
 800632e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	68ba      	ldr	r2, [r7, #8]
 8006336:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	2280      	movs	r2, #128	; 0x80
 800633e:	0192      	lsls	r2, r2, #6
 8006340:	4293      	cmp	r3, r2
 8006342:	d040      	beq.n	80063c6 <HAL_TIM_ConfigClockSource+0xde>
 8006344:	2280      	movs	r2, #128	; 0x80
 8006346:	0192      	lsls	r2, r2, #6
 8006348:	4293      	cmp	r3, r2
 800634a:	d900      	bls.n	800634e <HAL_TIM_ConfigClockSource+0x66>
 800634c:	e088      	b.n	8006460 <HAL_TIM_ConfigClockSource+0x178>
 800634e:	2280      	movs	r2, #128	; 0x80
 8006350:	0152      	lsls	r2, r2, #5
 8006352:	4293      	cmp	r3, r2
 8006354:	d100      	bne.n	8006358 <HAL_TIM_ConfigClockSource+0x70>
 8006356:	e088      	b.n	800646a <HAL_TIM_ConfigClockSource+0x182>
 8006358:	2280      	movs	r2, #128	; 0x80
 800635a:	0152      	lsls	r2, r2, #5
 800635c:	4293      	cmp	r3, r2
 800635e:	d900      	bls.n	8006362 <HAL_TIM_ConfigClockSource+0x7a>
 8006360:	e07e      	b.n	8006460 <HAL_TIM_ConfigClockSource+0x178>
 8006362:	2b70      	cmp	r3, #112	; 0x70
 8006364:	d018      	beq.n	8006398 <HAL_TIM_ConfigClockSource+0xb0>
 8006366:	d900      	bls.n	800636a <HAL_TIM_ConfigClockSource+0x82>
 8006368:	e07a      	b.n	8006460 <HAL_TIM_ConfigClockSource+0x178>
 800636a:	2b60      	cmp	r3, #96	; 0x60
 800636c:	d04f      	beq.n	800640e <HAL_TIM_ConfigClockSource+0x126>
 800636e:	d900      	bls.n	8006372 <HAL_TIM_ConfigClockSource+0x8a>
 8006370:	e076      	b.n	8006460 <HAL_TIM_ConfigClockSource+0x178>
 8006372:	2b50      	cmp	r3, #80	; 0x50
 8006374:	d03b      	beq.n	80063ee <HAL_TIM_ConfigClockSource+0x106>
 8006376:	d900      	bls.n	800637a <HAL_TIM_ConfigClockSource+0x92>
 8006378:	e072      	b.n	8006460 <HAL_TIM_ConfigClockSource+0x178>
 800637a:	2b40      	cmp	r3, #64	; 0x40
 800637c:	d057      	beq.n	800642e <HAL_TIM_ConfigClockSource+0x146>
 800637e:	d900      	bls.n	8006382 <HAL_TIM_ConfigClockSource+0x9a>
 8006380:	e06e      	b.n	8006460 <HAL_TIM_ConfigClockSource+0x178>
 8006382:	2b30      	cmp	r3, #48	; 0x30
 8006384:	d063      	beq.n	800644e <HAL_TIM_ConfigClockSource+0x166>
 8006386:	d86b      	bhi.n	8006460 <HAL_TIM_ConfigClockSource+0x178>
 8006388:	2b20      	cmp	r3, #32
 800638a:	d060      	beq.n	800644e <HAL_TIM_ConfigClockSource+0x166>
 800638c:	d868      	bhi.n	8006460 <HAL_TIM_ConfigClockSource+0x178>
 800638e:	2b00      	cmp	r3, #0
 8006390:	d05d      	beq.n	800644e <HAL_TIM_ConfigClockSource+0x166>
 8006392:	2b10      	cmp	r3, #16
 8006394:	d05b      	beq.n	800644e <HAL_TIM_ConfigClockSource+0x166>
 8006396:	e063      	b.n	8006460 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	6818      	ldr	r0, [r3, #0]
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	6899      	ldr	r1, [r3, #8]
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	685a      	ldr	r2, [r3, #4]
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	68db      	ldr	r3, [r3, #12]
 80063a8:	f000 fb6a 	bl	8006a80 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	689b      	ldr	r3, [r3, #8]
 80063b2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80063b4:	68bb      	ldr	r3, [r7, #8]
 80063b6:	2277      	movs	r2, #119	; 0x77
 80063b8:	4313      	orrs	r3, r2
 80063ba:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	68ba      	ldr	r2, [r7, #8]
 80063c2:	609a      	str	r2, [r3, #8]
      break;
 80063c4:	e052      	b.n	800646c <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6818      	ldr	r0, [r3, #0]
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	6899      	ldr	r1, [r3, #8]
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	685a      	ldr	r2, [r3, #4]
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	68db      	ldr	r3, [r3, #12]
 80063d6:	f000 fb53 	bl	8006a80 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	689a      	ldr	r2, [r3, #8]
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	2180      	movs	r1, #128	; 0x80
 80063e6:	01c9      	lsls	r1, r1, #7
 80063e8:	430a      	orrs	r2, r1
 80063ea:	609a      	str	r2, [r3, #8]
      break;
 80063ec:	e03e      	b.n	800646c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	6818      	ldr	r0, [r3, #0]
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	6859      	ldr	r1, [r3, #4]
 80063f6:	683b      	ldr	r3, [r7, #0]
 80063f8:	68db      	ldr	r3, [r3, #12]
 80063fa:	001a      	movs	r2, r3
 80063fc:	f000 fac6 	bl	800698c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	2150      	movs	r1, #80	; 0x50
 8006406:	0018      	movs	r0, r3
 8006408:	f000 fb20 	bl	8006a4c <TIM_ITRx_SetConfig>
      break;
 800640c:	e02e      	b.n	800646c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	6818      	ldr	r0, [r3, #0]
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	6859      	ldr	r1, [r3, #4]
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	68db      	ldr	r3, [r3, #12]
 800641a:	001a      	movs	r2, r3
 800641c:	f000 fae4 	bl	80069e8 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	2160      	movs	r1, #96	; 0x60
 8006426:	0018      	movs	r0, r3
 8006428:	f000 fb10 	bl	8006a4c <TIM_ITRx_SetConfig>
      break;
 800642c:	e01e      	b.n	800646c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6818      	ldr	r0, [r3, #0]
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	6859      	ldr	r1, [r3, #4]
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	68db      	ldr	r3, [r3, #12]
 800643a:	001a      	movs	r2, r3
 800643c:	f000 faa6 	bl	800698c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	2140      	movs	r1, #64	; 0x40
 8006446:	0018      	movs	r0, r3
 8006448:	f000 fb00 	bl	8006a4c <TIM_ITRx_SetConfig>
      break;
 800644c:	e00e      	b.n	800646c <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681a      	ldr	r2, [r3, #0]
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	0019      	movs	r1, r3
 8006458:	0010      	movs	r0, r2
 800645a:	f000 faf7 	bl	8006a4c <TIM_ITRx_SetConfig>
      break;
 800645e:	e005      	b.n	800646c <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8006460:	230f      	movs	r3, #15
 8006462:	18fb      	adds	r3, r7, r3
 8006464:	2201      	movs	r2, #1
 8006466:	701a      	strb	r2, [r3, #0]
      break;
 8006468:	e000      	b.n	800646c <HAL_TIM_ConfigClockSource+0x184>
      break;
 800646a:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	223d      	movs	r2, #61	; 0x3d
 8006470:	2101      	movs	r1, #1
 8006472:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	223c      	movs	r2, #60	; 0x3c
 8006478:	2100      	movs	r1, #0
 800647a:	5499      	strb	r1, [r3, r2]

  return status;
 800647c:	230f      	movs	r3, #15
 800647e:	18fb      	adds	r3, r7, r3
 8006480:	781b      	ldrb	r3, [r3, #0]
}
 8006482:	0018      	movs	r0, r3
 8006484:	46bd      	mov	sp, r7
 8006486:	b004      	add	sp, #16
 8006488:	bd80      	pop	{r7, pc}
 800648a:	46c0      	nop			; (mov r8, r8)
 800648c:	ffff00ff 	.word	0xffff00ff

08006490 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006490:	b580      	push	{r7, lr}
 8006492:	b082      	sub	sp, #8
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006498:	46c0      	nop			; (mov r8, r8)
 800649a:	46bd      	mov	sp, r7
 800649c:	b002      	add	sp, #8
 800649e:	bd80      	pop	{r7, pc}

080064a0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80064a0:	b580      	push	{r7, lr}
 80064a2:	b082      	sub	sp, #8
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80064a8:	46c0      	nop			; (mov r8, r8)
 80064aa:	46bd      	mov	sp, r7
 80064ac:	b002      	add	sp, #8
 80064ae:	bd80      	pop	{r7, pc}

080064b0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b082      	sub	sp, #8
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80064b8:	46c0      	nop			; (mov r8, r8)
 80064ba:	46bd      	mov	sp, r7
 80064bc:	b002      	add	sp, #8
 80064be:	bd80      	pop	{r7, pc}

080064c0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80064c0:	b580      	push	{r7, lr}
 80064c2:	b082      	sub	sp, #8
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80064c8:	46c0      	nop			; (mov r8, r8)
 80064ca:	46bd      	mov	sp, r7
 80064cc:	b002      	add	sp, #8
 80064ce:	bd80      	pop	{r7, pc}

080064d0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b082      	sub	sp, #8
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80064d8:	46c0      	nop			; (mov r8, r8)
 80064da:	46bd      	mov	sp, r7
 80064dc:	b002      	add	sp, #8
 80064de:	bd80      	pop	{r7, pc}

080064e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b084      	sub	sp, #16
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
 80064e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	4a30      	ldr	r2, [pc, #192]	; (80065b4 <TIM_Base_SetConfig+0xd4>)
 80064f4:	4293      	cmp	r3, r2
 80064f6:	d008      	beq.n	800650a <TIM_Base_SetConfig+0x2a>
 80064f8:	687a      	ldr	r2, [r7, #4]
 80064fa:	2380      	movs	r3, #128	; 0x80
 80064fc:	05db      	lsls	r3, r3, #23
 80064fe:	429a      	cmp	r2, r3
 8006500:	d003      	beq.n	800650a <TIM_Base_SetConfig+0x2a>
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	4a2c      	ldr	r2, [pc, #176]	; (80065b8 <TIM_Base_SetConfig+0xd8>)
 8006506:	4293      	cmp	r3, r2
 8006508:	d108      	bne.n	800651c <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	2270      	movs	r2, #112	; 0x70
 800650e:	4393      	bics	r3, r2
 8006510:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	685b      	ldr	r3, [r3, #4]
 8006516:	68fa      	ldr	r2, [r7, #12]
 8006518:	4313      	orrs	r3, r2
 800651a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	4a25      	ldr	r2, [pc, #148]	; (80065b4 <TIM_Base_SetConfig+0xd4>)
 8006520:	4293      	cmp	r3, r2
 8006522:	d014      	beq.n	800654e <TIM_Base_SetConfig+0x6e>
 8006524:	687a      	ldr	r2, [r7, #4]
 8006526:	2380      	movs	r3, #128	; 0x80
 8006528:	05db      	lsls	r3, r3, #23
 800652a:	429a      	cmp	r2, r3
 800652c:	d00f      	beq.n	800654e <TIM_Base_SetConfig+0x6e>
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	4a21      	ldr	r2, [pc, #132]	; (80065b8 <TIM_Base_SetConfig+0xd8>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d00b      	beq.n	800654e <TIM_Base_SetConfig+0x6e>
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	4a20      	ldr	r2, [pc, #128]	; (80065bc <TIM_Base_SetConfig+0xdc>)
 800653a:	4293      	cmp	r3, r2
 800653c:	d007      	beq.n	800654e <TIM_Base_SetConfig+0x6e>
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	4a1f      	ldr	r2, [pc, #124]	; (80065c0 <TIM_Base_SetConfig+0xe0>)
 8006542:	4293      	cmp	r3, r2
 8006544:	d003      	beq.n	800654e <TIM_Base_SetConfig+0x6e>
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	4a1e      	ldr	r2, [pc, #120]	; (80065c4 <TIM_Base_SetConfig+0xe4>)
 800654a:	4293      	cmp	r3, r2
 800654c:	d108      	bne.n	8006560 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	4a1d      	ldr	r2, [pc, #116]	; (80065c8 <TIM_Base_SetConfig+0xe8>)
 8006552:	4013      	ands	r3, r2
 8006554:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	68db      	ldr	r3, [r3, #12]
 800655a:	68fa      	ldr	r2, [r7, #12]
 800655c:	4313      	orrs	r3, r2
 800655e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	2280      	movs	r2, #128	; 0x80
 8006564:	4393      	bics	r3, r2
 8006566:	001a      	movs	r2, r3
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	695b      	ldr	r3, [r3, #20]
 800656c:	4313      	orrs	r3, r2
 800656e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	68fa      	ldr	r2, [r7, #12]
 8006574:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	689a      	ldr	r2, [r3, #8]
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	681a      	ldr	r2, [r3, #0]
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	4a0a      	ldr	r2, [pc, #40]	; (80065b4 <TIM_Base_SetConfig+0xd4>)
 800658a:	4293      	cmp	r3, r2
 800658c:	d007      	beq.n	800659e <TIM_Base_SetConfig+0xbe>
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	4a0b      	ldr	r2, [pc, #44]	; (80065c0 <TIM_Base_SetConfig+0xe0>)
 8006592:	4293      	cmp	r3, r2
 8006594:	d003      	beq.n	800659e <TIM_Base_SetConfig+0xbe>
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	4a0a      	ldr	r2, [pc, #40]	; (80065c4 <TIM_Base_SetConfig+0xe4>)
 800659a:	4293      	cmp	r3, r2
 800659c:	d103      	bne.n	80065a6 <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	691a      	ldr	r2, [r3, #16]
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	2201      	movs	r2, #1
 80065aa:	615a      	str	r2, [r3, #20]
}
 80065ac:	46c0      	nop			; (mov r8, r8)
 80065ae:	46bd      	mov	sp, r7
 80065b0:	b004      	add	sp, #16
 80065b2:	bd80      	pop	{r7, pc}
 80065b4:	40012c00 	.word	0x40012c00
 80065b8:	40000400 	.word	0x40000400
 80065bc:	40002000 	.word	0x40002000
 80065c0:	40014400 	.word	0x40014400
 80065c4:	40014800 	.word	0x40014800
 80065c8:	fffffcff 	.word	0xfffffcff

080065cc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b086      	sub	sp, #24
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
 80065d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	6a1b      	ldr	r3, [r3, #32]
 80065da:	2201      	movs	r2, #1
 80065dc:	4393      	bics	r3, r2
 80065de:	001a      	movs	r2, r3
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	6a1b      	ldr	r3, [r3, #32]
 80065e8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	685b      	ldr	r3, [r3, #4]
 80065ee:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	699b      	ldr	r3, [r3, #24]
 80065f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	2270      	movs	r2, #112	; 0x70
 80065fa:	4393      	bics	r3, r2
 80065fc:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	2203      	movs	r2, #3
 8006602:	4393      	bics	r3, r2
 8006604:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	68fa      	ldr	r2, [r7, #12]
 800660c:	4313      	orrs	r3, r2
 800660e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006610:	697b      	ldr	r3, [r7, #20]
 8006612:	2202      	movs	r2, #2
 8006614:	4393      	bics	r3, r2
 8006616:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	689b      	ldr	r3, [r3, #8]
 800661c:	697a      	ldr	r2, [r7, #20]
 800661e:	4313      	orrs	r3, r2
 8006620:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	4a23      	ldr	r2, [pc, #140]	; (80066b4 <TIM_OC1_SetConfig+0xe8>)
 8006626:	4293      	cmp	r3, r2
 8006628:	d007      	beq.n	800663a <TIM_OC1_SetConfig+0x6e>
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	4a22      	ldr	r2, [pc, #136]	; (80066b8 <TIM_OC1_SetConfig+0xec>)
 800662e:	4293      	cmp	r3, r2
 8006630:	d003      	beq.n	800663a <TIM_OC1_SetConfig+0x6e>
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	4a21      	ldr	r2, [pc, #132]	; (80066bc <TIM_OC1_SetConfig+0xf0>)
 8006636:	4293      	cmp	r3, r2
 8006638:	d10c      	bne.n	8006654 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800663a:	697b      	ldr	r3, [r7, #20]
 800663c:	2208      	movs	r2, #8
 800663e:	4393      	bics	r3, r2
 8006640:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	68db      	ldr	r3, [r3, #12]
 8006646:	697a      	ldr	r2, [r7, #20]
 8006648:	4313      	orrs	r3, r2
 800664a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800664c:	697b      	ldr	r3, [r7, #20]
 800664e:	2204      	movs	r2, #4
 8006650:	4393      	bics	r3, r2
 8006652:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	4a17      	ldr	r2, [pc, #92]	; (80066b4 <TIM_OC1_SetConfig+0xe8>)
 8006658:	4293      	cmp	r3, r2
 800665a:	d007      	beq.n	800666c <TIM_OC1_SetConfig+0xa0>
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	4a16      	ldr	r2, [pc, #88]	; (80066b8 <TIM_OC1_SetConfig+0xec>)
 8006660:	4293      	cmp	r3, r2
 8006662:	d003      	beq.n	800666c <TIM_OC1_SetConfig+0xa0>
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	4a15      	ldr	r2, [pc, #84]	; (80066bc <TIM_OC1_SetConfig+0xf0>)
 8006668:	4293      	cmp	r3, r2
 800666a:	d111      	bne.n	8006690 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800666c:	693b      	ldr	r3, [r7, #16]
 800666e:	4a14      	ldr	r2, [pc, #80]	; (80066c0 <TIM_OC1_SetConfig+0xf4>)
 8006670:	4013      	ands	r3, r2
 8006672:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006674:	693b      	ldr	r3, [r7, #16]
 8006676:	4a13      	ldr	r2, [pc, #76]	; (80066c4 <TIM_OC1_SetConfig+0xf8>)
 8006678:	4013      	ands	r3, r2
 800667a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	695b      	ldr	r3, [r3, #20]
 8006680:	693a      	ldr	r2, [r7, #16]
 8006682:	4313      	orrs	r3, r2
 8006684:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	699b      	ldr	r3, [r3, #24]
 800668a:	693a      	ldr	r2, [r7, #16]
 800668c:	4313      	orrs	r3, r2
 800668e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	693a      	ldr	r2, [r7, #16]
 8006694:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	68fa      	ldr	r2, [r7, #12]
 800669a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	685a      	ldr	r2, [r3, #4]
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	697a      	ldr	r2, [r7, #20]
 80066a8:	621a      	str	r2, [r3, #32]
}
 80066aa:	46c0      	nop			; (mov r8, r8)
 80066ac:	46bd      	mov	sp, r7
 80066ae:	b006      	add	sp, #24
 80066b0:	bd80      	pop	{r7, pc}
 80066b2:	46c0      	nop			; (mov r8, r8)
 80066b4:	40012c00 	.word	0x40012c00
 80066b8:	40014400 	.word	0x40014400
 80066bc:	40014800 	.word	0x40014800
 80066c0:	fffffeff 	.word	0xfffffeff
 80066c4:	fffffdff 	.word	0xfffffdff

080066c8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b086      	sub	sp, #24
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
 80066d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6a1b      	ldr	r3, [r3, #32]
 80066d6:	2210      	movs	r2, #16
 80066d8:	4393      	bics	r3, r2
 80066da:	001a      	movs	r2, r3
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	6a1b      	ldr	r3, [r3, #32]
 80066e4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	685b      	ldr	r3, [r3, #4]
 80066ea:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	699b      	ldr	r3, [r3, #24]
 80066f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	4a2c      	ldr	r2, [pc, #176]	; (80067a8 <TIM_OC2_SetConfig+0xe0>)
 80066f6:	4013      	ands	r3, r2
 80066f8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	4a2b      	ldr	r2, [pc, #172]	; (80067ac <TIM_OC2_SetConfig+0xe4>)
 80066fe:	4013      	ands	r3, r2
 8006700:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	021b      	lsls	r3, r3, #8
 8006708:	68fa      	ldr	r2, [r7, #12]
 800670a:	4313      	orrs	r3, r2
 800670c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800670e:	697b      	ldr	r3, [r7, #20]
 8006710:	2220      	movs	r2, #32
 8006712:	4393      	bics	r3, r2
 8006714:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	689b      	ldr	r3, [r3, #8]
 800671a:	011b      	lsls	r3, r3, #4
 800671c:	697a      	ldr	r2, [r7, #20]
 800671e:	4313      	orrs	r3, r2
 8006720:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	4a22      	ldr	r2, [pc, #136]	; (80067b0 <TIM_OC2_SetConfig+0xe8>)
 8006726:	4293      	cmp	r3, r2
 8006728:	d10d      	bne.n	8006746 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800672a:	697b      	ldr	r3, [r7, #20]
 800672c:	2280      	movs	r2, #128	; 0x80
 800672e:	4393      	bics	r3, r2
 8006730:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	68db      	ldr	r3, [r3, #12]
 8006736:	011b      	lsls	r3, r3, #4
 8006738:	697a      	ldr	r2, [r7, #20]
 800673a:	4313      	orrs	r3, r2
 800673c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800673e:	697b      	ldr	r3, [r7, #20]
 8006740:	2240      	movs	r2, #64	; 0x40
 8006742:	4393      	bics	r3, r2
 8006744:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	4a19      	ldr	r2, [pc, #100]	; (80067b0 <TIM_OC2_SetConfig+0xe8>)
 800674a:	4293      	cmp	r3, r2
 800674c:	d007      	beq.n	800675e <TIM_OC2_SetConfig+0x96>
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	4a18      	ldr	r2, [pc, #96]	; (80067b4 <TIM_OC2_SetConfig+0xec>)
 8006752:	4293      	cmp	r3, r2
 8006754:	d003      	beq.n	800675e <TIM_OC2_SetConfig+0x96>
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	4a17      	ldr	r2, [pc, #92]	; (80067b8 <TIM_OC2_SetConfig+0xf0>)
 800675a:	4293      	cmp	r3, r2
 800675c:	d113      	bne.n	8006786 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800675e:	693b      	ldr	r3, [r7, #16]
 8006760:	4a16      	ldr	r2, [pc, #88]	; (80067bc <TIM_OC2_SetConfig+0xf4>)
 8006762:	4013      	ands	r3, r2
 8006764:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006766:	693b      	ldr	r3, [r7, #16]
 8006768:	4a15      	ldr	r2, [pc, #84]	; (80067c0 <TIM_OC2_SetConfig+0xf8>)
 800676a:	4013      	ands	r3, r2
 800676c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	695b      	ldr	r3, [r3, #20]
 8006772:	009b      	lsls	r3, r3, #2
 8006774:	693a      	ldr	r2, [r7, #16]
 8006776:	4313      	orrs	r3, r2
 8006778:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	699b      	ldr	r3, [r3, #24]
 800677e:	009b      	lsls	r3, r3, #2
 8006780:	693a      	ldr	r2, [r7, #16]
 8006782:	4313      	orrs	r3, r2
 8006784:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	693a      	ldr	r2, [r7, #16]
 800678a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	68fa      	ldr	r2, [r7, #12]
 8006790:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	685a      	ldr	r2, [r3, #4]
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	697a      	ldr	r2, [r7, #20]
 800679e:	621a      	str	r2, [r3, #32]
}
 80067a0:	46c0      	nop			; (mov r8, r8)
 80067a2:	46bd      	mov	sp, r7
 80067a4:	b006      	add	sp, #24
 80067a6:	bd80      	pop	{r7, pc}
 80067a8:	ffff8fff 	.word	0xffff8fff
 80067ac:	fffffcff 	.word	0xfffffcff
 80067b0:	40012c00 	.word	0x40012c00
 80067b4:	40014400 	.word	0x40014400
 80067b8:	40014800 	.word	0x40014800
 80067bc:	fffffbff 	.word	0xfffffbff
 80067c0:	fffff7ff 	.word	0xfffff7ff

080067c4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80067c4:	b580      	push	{r7, lr}
 80067c6:	b086      	sub	sp, #24
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
 80067cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	6a1b      	ldr	r3, [r3, #32]
 80067d2:	4a33      	ldr	r2, [pc, #204]	; (80068a0 <TIM_OC3_SetConfig+0xdc>)
 80067d4:	401a      	ands	r2, r3
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6a1b      	ldr	r3, [r3, #32]
 80067de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	685b      	ldr	r3, [r3, #4]
 80067e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	69db      	ldr	r3, [r3, #28]
 80067ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	2270      	movs	r2, #112	; 0x70
 80067f0:	4393      	bics	r3, r2
 80067f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	2203      	movs	r2, #3
 80067f8:	4393      	bics	r3, r2
 80067fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80067fc:	683b      	ldr	r3, [r7, #0]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	68fa      	ldr	r2, [r7, #12]
 8006802:	4313      	orrs	r3, r2
 8006804:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006806:	697b      	ldr	r3, [r7, #20]
 8006808:	4a26      	ldr	r2, [pc, #152]	; (80068a4 <TIM_OC3_SetConfig+0xe0>)
 800680a:	4013      	ands	r3, r2
 800680c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	689b      	ldr	r3, [r3, #8]
 8006812:	021b      	lsls	r3, r3, #8
 8006814:	697a      	ldr	r2, [r7, #20]
 8006816:	4313      	orrs	r3, r2
 8006818:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	4a22      	ldr	r2, [pc, #136]	; (80068a8 <TIM_OC3_SetConfig+0xe4>)
 800681e:	4293      	cmp	r3, r2
 8006820:	d10d      	bne.n	800683e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006822:	697b      	ldr	r3, [r7, #20]
 8006824:	4a21      	ldr	r2, [pc, #132]	; (80068ac <TIM_OC3_SetConfig+0xe8>)
 8006826:	4013      	ands	r3, r2
 8006828:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	68db      	ldr	r3, [r3, #12]
 800682e:	021b      	lsls	r3, r3, #8
 8006830:	697a      	ldr	r2, [r7, #20]
 8006832:	4313      	orrs	r3, r2
 8006834:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006836:	697b      	ldr	r3, [r7, #20]
 8006838:	4a1d      	ldr	r2, [pc, #116]	; (80068b0 <TIM_OC3_SetConfig+0xec>)
 800683a:	4013      	ands	r3, r2
 800683c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	4a19      	ldr	r2, [pc, #100]	; (80068a8 <TIM_OC3_SetConfig+0xe4>)
 8006842:	4293      	cmp	r3, r2
 8006844:	d007      	beq.n	8006856 <TIM_OC3_SetConfig+0x92>
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	4a1a      	ldr	r2, [pc, #104]	; (80068b4 <TIM_OC3_SetConfig+0xf0>)
 800684a:	4293      	cmp	r3, r2
 800684c:	d003      	beq.n	8006856 <TIM_OC3_SetConfig+0x92>
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	4a19      	ldr	r2, [pc, #100]	; (80068b8 <TIM_OC3_SetConfig+0xf4>)
 8006852:	4293      	cmp	r3, r2
 8006854:	d113      	bne.n	800687e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006856:	693b      	ldr	r3, [r7, #16]
 8006858:	4a18      	ldr	r2, [pc, #96]	; (80068bc <TIM_OC3_SetConfig+0xf8>)
 800685a:	4013      	ands	r3, r2
 800685c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800685e:	693b      	ldr	r3, [r7, #16]
 8006860:	4a17      	ldr	r2, [pc, #92]	; (80068c0 <TIM_OC3_SetConfig+0xfc>)
 8006862:	4013      	ands	r3, r2
 8006864:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006866:	683b      	ldr	r3, [r7, #0]
 8006868:	695b      	ldr	r3, [r3, #20]
 800686a:	011b      	lsls	r3, r3, #4
 800686c:	693a      	ldr	r2, [r7, #16]
 800686e:	4313      	orrs	r3, r2
 8006870:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	699b      	ldr	r3, [r3, #24]
 8006876:	011b      	lsls	r3, r3, #4
 8006878:	693a      	ldr	r2, [r7, #16]
 800687a:	4313      	orrs	r3, r2
 800687c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	693a      	ldr	r2, [r7, #16]
 8006882:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	68fa      	ldr	r2, [r7, #12]
 8006888:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	685a      	ldr	r2, [r3, #4]
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	697a      	ldr	r2, [r7, #20]
 8006896:	621a      	str	r2, [r3, #32]
}
 8006898:	46c0      	nop			; (mov r8, r8)
 800689a:	46bd      	mov	sp, r7
 800689c:	b006      	add	sp, #24
 800689e:	bd80      	pop	{r7, pc}
 80068a0:	fffffeff 	.word	0xfffffeff
 80068a4:	fffffdff 	.word	0xfffffdff
 80068a8:	40012c00 	.word	0x40012c00
 80068ac:	fffff7ff 	.word	0xfffff7ff
 80068b0:	fffffbff 	.word	0xfffffbff
 80068b4:	40014400 	.word	0x40014400
 80068b8:	40014800 	.word	0x40014800
 80068bc:	ffffefff 	.word	0xffffefff
 80068c0:	ffffdfff 	.word	0xffffdfff

080068c4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80068c4:	b580      	push	{r7, lr}
 80068c6:	b086      	sub	sp, #24
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
 80068cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6a1b      	ldr	r3, [r3, #32]
 80068d2:	4a26      	ldr	r2, [pc, #152]	; (800696c <TIM_OC4_SetConfig+0xa8>)
 80068d4:	401a      	ands	r2, r3
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6a1b      	ldr	r3, [r3, #32]
 80068de:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	685b      	ldr	r3, [r3, #4]
 80068e4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	69db      	ldr	r3, [r3, #28]
 80068ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	4a20      	ldr	r2, [pc, #128]	; (8006970 <TIM_OC4_SetConfig+0xac>)
 80068f0:	4013      	ands	r3, r2
 80068f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	4a1f      	ldr	r2, [pc, #124]	; (8006974 <TIM_OC4_SetConfig+0xb0>)
 80068f8:	4013      	ands	r3, r2
 80068fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	021b      	lsls	r3, r3, #8
 8006902:	68fa      	ldr	r2, [r7, #12]
 8006904:	4313      	orrs	r3, r2
 8006906:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006908:	693b      	ldr	r3, [r7, #16]
 800690a:	4a1b      	ldr	r2, [pc, #108]	; (8006978 <TIM_OC4_SetConfig+0xb4>)
 800690c:	4013      	ands	r3, r2
 800690e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	689b      	ldr	r3, [r3, #8]
 8006914:	031b      	lsls	r3, r3, #12
 8006916:	693a      	ldr	r2, [r7, #16]
 8006918:	4313      	orrs	r3, r2
 800691a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	4a17      	ldr	r2, [pc, #92]	; (800697c <TIM_OC4_SetConfig+0xb8>)
 8006920:	4293      	cmp	r3, r2
 8006922:	d007      	beq.n	8006934 <TIM_OC4_SetConfig+0x70>
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	4a16      	ldr	r2, [pc, #88]	; (8006980 <TIM_OC4_SetConfig+0xbc>)
 8006928:	4293      	cmp	r3, r2
 800692a:	d003      	beq.n	8006934 <TIM_OC4_SetConfig+0x70>
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	4a15      	ldr	r2, [pc, #84]	; (8006984 <TIM_OC4_SetConfig+0xc0>)
 8006930:	4293      	cmp	r3, r2
 8006932:	d109      	bne.n	8006948 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006934:	697b      	ldr	r3, [r7, #20]
 8006936:	4a14      	ldr	r2, [pc, #80]	; (8006988 <TIM_OC4_SetConfig+0xc4>)
 8006938:	4013      	ands	r3, r2
 800693a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	695b      	ldr	r3, [r3, #20]
 8006940:	019b      	lsls	r3, r3, #6
 8006942:	697a      	ldr	r2, [r7, #20]
 8006944:	4313      	orrs	r3, r2
 8006946:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	697a      	ldr	r2, [r7, #20]
 800694c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	68fa      	ldr	r2, [r7, #12]
 8006952:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	685a      	ldr	r2, [r3, #4]
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	693a      	ldr	r2, [r7, #16]
 8006960:	621a      	str	r2, [r3, #32]
}
 8006962:	46c0      	nop			; (mov r8, r8)
 8006964:	46bd      	mov	sp, r7
 8006966:	b006      	add	sp, #24
 8006968:	bd80      	pop	{r7, pc}
 800696a:	46c0      	nop			; (mov r8, r8)
 800696c:	ffffefff 	.word	0xffffefff
 8006970:	ffff8fff 	.word	0xffff8fff
 8006974:	fffffcff 	.word	0xfffffcff
 8006978:	ffffdfff 	.word	0xffffdfff
 800697c:	40012c00 	.word	0x40012c00
 8006980:	40014400 	.word	0x40014400
 8006984:	40014800 	.word	0x40014800
 8006988:	ffffbfff 	.word	0xffffbfff

0800698c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800698c:	b580      	push	{r7, lr}
 800698e:	b086      	sub	sp, #24
 8006990:	af00      	add	r7, sp, #0
 8006992:	60f8      	str	r0, [r7, #12]
 8006994:	60b9      	str	r1, [r7, #8]
 8006996:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	6a1b      	ldr	r3, [r3, #32]
 800699c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	6a1b      	ldr	r3, [r3, #32]
 80069a2:	2201      	movs	r2, #1
 80069a4:	4393      	bics	r3, r2
 80069a6:	001a      	movs	r2, r3
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	699b      	ldr	r3, [r3, #24]
 80069b0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80069b2:	693b      	ldr	r3, [r7, #16]
 80069b4:	22f0      	movs	r2, #240	; 0xf0
 80069b6:	4393      	bics	r3, r2
 80069b8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	011b      	lsls	r3, r3, #4
 80069be:	693a      	ldr	r2, [r7, #16]
 80069c0:	4313      	orrs	r3, r2
 80069c2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80069c4:	697b      	ldr	r3, [r7, #20]
 80069c6:	220a      	movs	r2, #10
 80069c8:	4393      	bics	r3, r2
 80069ca:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80069cc:	697a      	ldr	r2, [r7, #20]
 80069ce:	68bb      	ldr	r3, [r7, #8]
 80069d0:	4313      	orrs	r3, r2
 80069d2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	693a      	ldr	r2, [r7, #16]
 80069d8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	697a      	ldr	r2, [r7, #20]
 80069de:	621a      	str	r2, [r3, #32]
}
 80069e0:	46c0      	nop			; (mov r8, r8)
 80069e2:	46bd      	mov	sp, r7
 80069e4:	b006      	add	sp, #24
 80069e6:	bd80      	pop	{r7, pc}

080069e8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b086      	sub	sp, #24
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	60f8      	str	r0, [r7, #12]
 80069f0:	60b9      	str	r1, [r7, #8]
 80069f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	6a1b      	ldr	r3, [r3, #32]
 80069f8:	2210      	movs	r2, #16
 80069fa:	4393      	bics	r3, r2
 80069fc:	001a      	movs	r2, r3
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	699b      	ldr	r3, [r3, #24]
 8006a06:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	6a1b      	ldr	r3, [r3, #32]
 8006a0c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006a0e:	697b      	ldr	r3, [r7, #20]
 8006a10:	4a0d      	ldr	r2, [pc, #52]	; (8006a48 <TIM_TI2_ConfigInputStage+0x60>)
 8006a12:	4013      	ands	r3, r2
 8006a14:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	031b      	lsls	r3, r3, #12
 8006a1a:	697a      	ldr	r2, [r7, #20]
 8006a1c:	4313      	orrs	r3, r2
 8006a1e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006a20:	693b      	ldr	r3, [r7, #16]
 8006a22:	22a0      	movs	r2, #160	; 0xa0
 8006a24:	4393      	bics	r3, r2
 8006a26:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006a28:	68bb      	ldr	r3, [r7, #8]
 8006a2a:	011b      	lsls	r3, r3, #4
 8006a2c:	693a      	ldr	r2, [r7, #16]
 8006a2e:	4313      	orrs	r3, r2
 8006a30:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	697a      	ldr	r2, [r7, #20]
 8006a36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	693a      	ldr	r2, [r7, #16]
 8006a3c:	621a      	str	r2, [r3, #32]
}
 8006a3e:	46c0      	nop			; (mov r8, r8)
 8006a40:	46bd      	mov	sp, r7
 8006a42:	b006      	add	sp, #24
 8006a44:	bd80      	pop	{r7, pc}
 8006a46:	46c0      	nop			; (mov r8, r8)
 8006a48:	ffff0fff 	.word	0xffff0fff

08006a4c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	b084      	sub	sp, #16
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
 8006a54:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	689b      	ldr	r3, [r3, #8]
 8006a5a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	2270      	movs	r2, #112	; 0x70
 8006a60:	4393      	bics	r3, r2
 8006a62:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006a64:	683a      	ldr	r2, [r7, #0]
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	4313      	orrs	r3, r2
 8006a6a:	2207      	movs	r2, #7
 8006a6c:	4313      	orrs	r3, r2
 8006a6e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	68fa      	ldr	r2, [r7, #12]
 8006a74:	609a      	str	r2, [r3, #8]
}
 8006a76:	46c0      	nop			; (mov r8, r8)
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	b004      	add	sp, #16
 8006a7c:	bd80      	pop	{r7, pc}
	...

08006a80 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006a80:	b580      	push	{r7, lr}
 8006a82:	b086      	sub	sp, #24
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	60f8      	str	r0, [r7, #12]
 8006a88:	60b9      	str	r1, [r7, #8]
 8006a8a:	607a      	str	r2, [r7, #4]
 8006a8c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	689b      	ldr	r3, [r3, #8]
 8006a92:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006a94:	697b      	ldr	r3, [r7, #20]
 8006a96:	4a09      	ldr	r2, [pc, #36]	; (8006abc <TIM_ETR_SetConfig+0x3c>)
 8006a98:	4013      	ands	r3, r2
 8006a9a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	021a      	lsls	r2, r3, #8
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	431a      	orrs	r2, r3
 8006aa4:	68bb      	ldr	r3, [r7, #8]
 8006aa6:	4313      	orrs	r3, r2
 8006aa8:	697a      	ldr	r2, [r7, #20]
 8006aaa:	4313      	orrs	r3, r2
 8006aac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	697a      	ldr	r2, [r7, #20]
 8006ab2:	609a      	str	r2, [r3, #8]
}
 8006ab4:	46c0      	nop			; (mov r8, r8)
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	b006      	add	sp, #24
 8006aba:	bd80      	pop	{r7, pc}
 8006abc:	ffff00ff 	.word	0xffff00ff

08006ac0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b086      	sub	sp, #24
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	60f8      	str	r0, [r7, #12]
 8006ac8:	60b9      	str	r1, [r7, #8]
 8006aca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006acc:	68bb      	ldr	r3, [r7, #8]
 8006ace:	221f      	movs	r2, #31
 8006ad0:	4013      	ands	r3, r2
 8006ad2:	2201      	movs	r2, #1
 8006ad4:	409a      	lsls	r2, r3
 8006ad6:	0013      	movs	r3, r2
 8006ad8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	6a1b      	ldr	r3, [r3, #32]
 8006ade:	697a      	ldr	r2, [r7, #20]
 8006ae0:	43d2      	mvns	r2, r2
 8006ae2:	401a      	ands	r2, r3
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	6a1a      	ldr	r2, [r3, #32]
 8006aec:	68bb      	ldr	r3, [r7, #8]
 8006aee:	211f      	movs	r1, #31
 8006af0:	400b      	ands	r3, r1
 8006af2:	6879      	ldr	r1, [r7, #4]
 8006af4:	4099      	lsls	r1, r3
 8006af6:	000b      	movs	r3, r1
 8006af8:	431a      	orrs	r2, r3
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	621a      	str	r2, [r3, #32]
}
 8006afe:	46c0      	nop			; (mov r8, r8)
 8006b00:	46bd      	mov	sp, r7
 8006b02:	b006      	add	sp, #24
 8006b04:	bd80      	pop	{r7, pc}
	...

08006b08 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	b084      	sub	sp, #16
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
 8006b10:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	223c      	movs	r2, #60	; 0x3c
 8006b16:	5c9b      	ldrb	r3, [r3, r2]
 8006b18:	2b01      	cmp	r3, #1
 8006b1a:	d101      	bne.n	8006b20 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006b1c:	2302      	movs	r3, #2
 8006b1e:	e042      	b.n	8006ba6 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	223c      	movs	r2, #60	; 0x3c
 8006b24:	2101      	movs	r1, #1
 8006b26:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	223d      	movs	r2, #61	; 0x3d
 8006b2c:	2102      	movs	r1, #2
 8006b2e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	685b      	ldr	r3, [r3, #4]
 8006b36:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	689b      	ldr	r3, [r3, #8]
 8006b3e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	2270      	movs	r2, #112	; 0x70
 8006b44:	4393      	bics	r3, r2
 8006b46:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	68fa      	ldr	r2, [r7, #12]
 8006b4e:	4313      	orrs	r3, r2
 8006b50:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	68fa      	ldr	r2, [r7, #12]
 8006b58:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	4a14      	ldr	r2, [pc, #80]	; (8006bb0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8006b60:	4293      	cmp	r3, r2
 8006b62:	d00a      	beq.n	8006b7a <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681a      	ldr	r2, [r3, #0]
 8006b68:	2380      	movs	r3, #128	; 0x80
 8006b6a:	05db      	lsls	r3, r3, #23
 8006b6c:	429a      	cmp	r2, r3
 8006b6e:	d004      	beq.n	8006b7a <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	4a0f      	ldr	r2, [pc, #60]	; (8006bb4 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8006b76:	4293      	cmp	r3, r2
 8006b78:	d10c      	bne.n	8006b94 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006b7a:	68bb      	ldr	r3, [r7, #8]
 8006b7c:	2280      	movs	r2, #128	; 0x80
 8006b7e:	4393      	bics	r3, r2
 8006b80:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006b82:	683b      	ldr	r3, [r7, #0]
 8006b84:	685b      	ldr	r3, [r3, #4]
 8006b86:	68ba      	ldr	r2, [r7, #8]
 8006b88:	4313      	orrs	r3, r2
 8006b8a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	68ba      	ldr	r2, [r7, #8]
 8006b92:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	223d      	movs	r2, #61	; 0x3d
 8006b98:	2101      	movs	r1, #1
 8006b9a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	223c      	movs	r2, #60	; 0x3c
 8006ba0:	2100      	movs	r1, #0
 8006ba2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006ba4:	2300      	movs	r3, #0
}
 8006ba6:	0018      	movs	r0, r3
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	b004      	add	sp, #16
 8006bac:	bd80      	pop	{r7, pc}
 8006bae:	46c0      	nop			; (mov r8, r8)
 8006bb0:	40012c00 	.word	0x40012c00
 8006bb4:	40000400 	.word	0x40000400

08006bb8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b084      	sub	sp, #16
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
 8006bc0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	223c      	movs	r2, #60	; 0x3c
 8006bca:	5c9b      	ldrb	r3, [r3, r2]
 8006bcc:	2b01      	cmp	r3, #1
 8006bce:	d101      	bne.n	8006bd4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006bd0:	2302      	movs	r3, #2
 8006bd2:	e03e      	b.n	8006c52 <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	223c      	movs	r2, #60	; 0x3c
 8006bd8:	2101      	movs	r1, #1
 8006bda:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	22ff      	movs	r2, #255	; 0xff
 8006be0:	4393      	bics	r3, r2
 8006be2:	001a      	movs	r2, r3
 8006be4:	683b      	ldr	r3, [r7, #0]
 8006be6:	68db      	ldr	r3, [r3, #12]
 8006be8:	4313      	orrs	r3, r2
 8006bea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	4a1b      	ldr	r2, [pc, #108]	; (8006c5c <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 8006bf0:	401a      	ands	r2, r3
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	689b      	ldr	r3, [r3, #8]
 8006bf6:	4313      	orrs	r3, r2
 8006bf8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	4a18      	ldr	r2, [pc, #96]	; (8006c60 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 8006bfe:	401a      	ands	r2, r3
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	685b      	ldr	r3, [r3, #4]
 8006c04:	4313      	orrs	r3, r2
 8006c06:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	4a16      	ldr	r2, [pc, #88]	; (8006c64 <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 8006c0c:	401a      	ands	r2, r3
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	4313      	orrs	r3, r2
 8006c14:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	4a13      	ldr	r2, [pc, #76]	; (8006c68 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 8006c1a:	401a      	ands	r2, r3
 8006c1c:	683b      	ldr	r3, [r7, #0]
 8006c1e:	691b      	ldr	r3, [r3, #16]
 8006c20:	4313      	orrs	r3, r2
 8006c22:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	4a11      	ldr	r2, [pc, #68]	; (8006c6c <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 8006c28:	401a      	ands	r2, r3
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	695b      	ldr	r3, [r3, #20]
 8006c2e:	4313      	orrs	r3, r2
 8006c30:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	4a0e      	ldr	r2, [pc, #56]	; (8006c70 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 8006c36:	401a      	ands	r2, r3
 8006c38:	683b      	ldr	r3, [r7, #0]
 8006c3a:	69db      	ldr	r3, [r3, #28]
 8006c3c:	4313      	orrs	r3, r2
 8006c3e:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	68fa      	ldr	r2, [r7, #12]
 8006c46:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	223c      	movs	r2, #60	; 0x3c
 8006c4c:	2100      	movs	r1, #0
 8006c4e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006c50:	2300      	movs	r3, #0
}
 8006c52:	0018      	movs	r0, r3
 8006c54:	46bd      	mov	sp, r7
 8006c56:	b004      	add	sp, #16
 8006c58:	bd80      	pop	{r7, pc}
 8006c5a:	46c0      	nop			; (mov r8, r8)
 8006c5c:	fffffcff 	.word	0xfffffcff
 8006c60:	fffffbff 	.word	0xfffffbff
 8006c64:	fffff7ff 	.word	0xfffff7ff
 8006c68:	ffffefff 	.word	0xffffefff
 8006c6c:	ffffdfff 	.word	0xffffdfff
 8006c70:	ffffbfff 	.word	0xffffbfff

08006c74 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b082      	sub	sp, #8
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006c7c:	46c0      	nop			; (mov r8, r8)
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	b002      	add	sp, #8
 8006c82:	bd80      	pop	{r7, pc}

08006c84 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006c84:	b580      	push	{r7, lr}
 8006c86:	b082      	sub	sp, #8
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006c8c:	46c0      	nop			; (mov r8, r8)
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	b002      	add	sp, #8
 8006c92:	bd80      	pop	{r7, pc}

08006c94 <__libc_init_array>:
 8006c94:	b570      	push	{r4, r5, r6, lr}
 8006c96:	2600      	movs	r6, #0
 8006c98:	4d0c      	ldr	r5, [pc, #48]	; (8006ccc <__libc_init_array+0x38>)
 8006c9a:	4c0d      	ldr	r4, [pc, #52]	; (8006cd0 <__libc_init_array+0x3c>)
 8006c9c:	1b64      	subs	r4, r4, r5
 8006c9e:	10a4      	asrs	r4, r4, #2
 8006ca0:	42a6      	cmp	r6, r4
 8006ca2:	d109      	bne.n	8006cb8 <__libc_init_array+0x24>
 8006ca4:	2600      	movs	r6, #0
 8006ca6:	f000 f82b 	bl	8006d00 <_init>
 8006caa:	4d0a      	ldr	r5, [pc, #40]	; (8006cd4 <__libc_init_array+0x40>)
 8006cac:	4c0a      	ldr	r4, [pc, #40]	; (8006cd8 <__libc_init_array+0x44>)
 8006cae:	1b64      	subs	r4, r4, r5
 8006cb0:	10a4      	asrs	r4, r4, #2
 8006cb2:	42a6      	cmp	r6, r4
 8006cb4:	d105      	bne.n	8006cc2 <__libc_init_array+0x2e>
 8006cb6:	bd70      	pop	{r4, r5, r6, pc}
 8006cb8:	00b3      	lsls	r3, r6, #2
 8006cba:	58eb      	ldr	r3, [r5, r3]
 8006cbc:	4798      	blx	r3
 8006cbe:	3601      	adds	r6, #1
 8006cc0:	e7ee      	b.n	8006ca0 <__libc_init_array+0xc>
 8006cc2:	00b3      	lsls	r3, r6, #2
 8006cc4:	58eb      	ldr	r3, [r5, r3]
 8006cc6:	4798      	blx	r3
 8006cc8:	3601      	adds	r6, #1
 8006cca:	e7f2      	b.n	8006cb2 <__libc_init_array+0x1e>
 8006ccc:	08006e88 	.word	0x08006e88
 8006cd0:	08006e88 	.word	0x08006e88
 8006cd4:	08006e88 	.word	0x08006e88
 8006cd8:	08006e8c 	.word	0x08006e8c

08006cdc <memcpy>:
 8006cdc:	2300      	movs	r3, #0
 8006cde:	b510      	push	{r4, lr}
 8006ce0:	429a      	cmp	r2, r3
 8006ce2:	d100      	bne.n	8006ce6 <memcpy+0xa>
 8006ce4:	bd10      	pop	{r4, pc}
 8006ce6:	5ccc      	ldrb	r4, [r1, r3]
 8006ce8:	54c4      	strb	r4, [r0, r3]
 8006cea:	3301      	adds	r3, #1
 8006cec:	e7f8      	b.n	8006ce0 <memcpy+0x4>

08006cee <memset>:
 8006cee:	0003      	movs	r3, r0
 8006cf0:	1882      	adds	r2, r0, r2
 8006cf2:	4293      	cmp	r3, r2
 8006cf4:	d100      	bne.n	8006cf8 <memset+0xa>
 8006cf6:	4770      	bx	lr
 8006cf8:	7019      	strb	r1, [r3, #0]
 8006cfa:	3301      	adds	r3, #1
 8006cfc:	e7f9      	b.n	8006cf2 <memset+0x4>
	...

08006d00 <_init>:
 8006d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d02:	46c0      	nop			; (mov r8, r8)
 8006d04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d06:	bc08      	pop	{r3}
 8006d08:	469e      	mov	lr, r3
 8006d0a:	4770      	bx	lr

08006d0c <_fini>:
 8006d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d0e:	46c0      	nop			; (mov r8, r8)
 8006d10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d12:	bc08      	pop	{r3}
 8006d14:	469e      	mov	lr, r3
 8006d16:	4770      	bx	lr
