
BLDC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000044d8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08004598  08004598  00014598  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080045c8  080045c8  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  080045c8  080045c8  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080045c8  080045c8  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080045c8  080045c8  000145c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080045cc  080045cc  000145cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080045d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f4  20000010  080045e0  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000204  080045e0  00020204  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013186  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002722  00000000  00000000  000331be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e50  00000000  00000000  000358e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d28  00000000  00000000  00036730  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a474  00000000  00000000  00037458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001249b  00000000  00000000  000518cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000917fe  00000000  00000000  00063d67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f5565  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003368  00000000  00000000  000f55b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000010 	.word	0x20000010
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004580 	.word	0x08004580

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000014 	.word	0x20000014
 8000104:	08004580 	.word	0x08004580

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <AS5600_mem_read>:
			Error_Handler();
		}
	}
}

uint16_t AS5600_mem_read(uint16_t mem_addr){
 80003f4:	b590      	push	{r4, r7, lr}
 80003f6:	b089      	sub	sp, #36	; 0x24
 80003f8:	af04      	add	r7, sp, #16
 80003fa:	0002      	movs	r2, r0
 80003fc:	1dbb      	adds	r3, r7, #6
 80003fe:	801a      	strh	r2, [r3, #0]
	uint8_t Rxbuffer[2] = {};
 8000400:	230c      	movs	r3, #12
 8000402:	18fb      	adds	r3, r7, r3
 8000404:	2200      	movs	r2, #0
 8000406:	801a      	strh	r2, [r3, #0]
	uint16_t result = 0;
 8000408:	230e      	movs	r3, #14
 800040a:	18fb      	adds	r3, r7, r3
 800040c:	2200      	movs	r2, #0
 800040e:	801a      	strh	r2, [r3, #0]

	while(HAL_I2C_Mem_Read(&hi2c1, (uint16_t)AS5600_addr +1, mem_addr, 1, Rxbuffer, 2, 1000) != HAL_OK){
 8000410:	e008      	b.n	8000424 <AS5600_mem_read+0x30>
		if(HAL_I2C_GetError(&hi2c1) != HAL_I2C_ERROR_AF){
 8000412:	4b19      	ldr	r3, [pc, #100]	; (8000478 <AS5600_mem_read+0x84>)
 8000414:	0018      	movs	r0, r3
 8000416:	f001 ff61 	bl	80022dc <HAL_I2C_GetError>
 800041a:	0003      	movs	r3, r0
 800041c:	2b04      	cmp	r3, #4
 800041e:	d001      	beq.n	8000424 <AS5600_mem_read+0x30>
			Error_Handler();
 8000420:	f000 fcea 	bl	8000df8 <Error_Handler>
	while(HAL_I2C_Mem_Read(&hi2c1, (uint16_t)AS5600_addr +1, mem_addr, 1, Rxbuffer, 2, 1000) != HAL_OK){
 8000424:	1dbb      	adds	r3, r7, #6
 8000426:	881a      	ldrh	r2, [r3, #0]
 8000428:	4813      	ldr	r0, [pc, #76]	; (8000478 <AS5600_mem_read+0x84>)
 800042a:	23fa      	movs	r3, #250	; 0xfa
 800042c:	009b      	lsls	r3, r3, #2
 800042e:	9302      	str	r3, [sp, #8]
 8000430:	2302      	movs	r3, #2
 8000432:	9301      	str	r3, [sp, #4]
 8000434:	240c      	movs	r4, #12
 8000436:	193b      	adds	r3, r7, r4
 8000438:	9300      	str	r3, [sp, #0]
 800043a:	2301      	movs	r3, #1
 800043c:	216d      	movs	r1, #109	; 0x6d
 800043e:	f001 fe19 	bl	8002074 <HAL_I2C_Mem_Read>
 8000442:	1e03      	subs	r3, r0, #0
 8000444:	d1e5      	bne.n	8000412 <AS5600_mem_read+0x1e>
		}
	}

	result = Rxbuffer[0] & 0xFF;
 8000446:	0021      	movs	r1, r4
 8000448:	187b      	adds	r3, r7, r1
 800044a:	781a      	ldrb	r2, [r3, #0]
 800044c:	200e      	movs	r0, #14
 800044e:	183b      	adds	r3, r7, r0
 8000450:	801a      	strh	r2, [r3, #0]
	result <<= 8;
 8000452:	183b      	adds	r3, r7, r0
 8000454:	183a      	adds	r2, r7, r0
 8000456:	8812      	ldrh	r2, [r2, #0]
 8000458:	0212      	lsls	r2, r2, #8
 800045a:	801a      	strh	r2, [r3, #0]
	result |= Rxbuffer[1];
 800045c:	187b      	adds	r3, r7, r1
 800045e:	785b      	ldrb	r3, [r3, #1]
 8000460:	b299      	uxth	r1, r3
 8000462:	183b      	adds	r3, r7, r0
 8000464:	183a      	adds	r2, r7, r0
 8000466:	8812      	ldrh	r2, [r2, #0]
 8000468:	430a      	orrs	r2, r1
 800046a:	801a      	strh	r2, [r3, #0]

	return (result);
 800046c:	183b      	adds	r3, r7, r0
 800046e:	881b      	ldrh	r3, [r3, #0]
}
 8000470:	0018      	movs	r0, r3
 8000472:	46bd      	mov	sp, r7
 8000474:	b005      	add	sp, #20
 8000476:	bd90      	pop	{r4, r7, pc}
 8000478:	20000058 	.word	0x20000058

0800047c <dSW_state>:
 *  Created on: Jul 3, 2021
 *      Author: seven
 */
#include "dSW.h"

int16_t dSW_state(void){
 800047c:	b580      	push	{r7, lr}
 800047e:	b082      	sub	sp, #8
 8000480:	af00      	add	r7, sp, #0
	int16_t result = 0;
 8000482:	1dbb      	adds	r3, r7, #6
 8000484:	2200      	movs	r2, #0
 8000486:	801a      	strh	r2, [r3, #0]

	result |= HAL_GPIO_ReadPin(dSW4_GPIO_Port,dSW4_Pin);
 8000488:	2380      	movs	r3, #128	; 0x80
 800048a:	021a      	lsls	r2, r3, #8
 800048c:	2390      	movs	r3, #144	; 0x90
 800048e:	05db      	lsls	r3, r3, #23
 8000490:	0011      	movs	r1, r2
 8000492:	0018      	movs	r0, r3
 8000494:	f001 fd1e 	bl	8001ed4 <HAL_GPIO_ReadPin>
 8000498:	0003      	movs	r3, r0
 800049a:	b219      	sxth	r1, r3
 800049c:	1dbb      	adds	r3, r7, #6
 800049e:	1dba      	adds	r2, r7, #6
 80004a0:	8812      	ldrh	r2, [r2, #0]
 80004a2:	430a      	orrs	r2, r1
 80004a4:	801a      	strh	r2, [r3, #0]
	result <<= 1;
 80004a6:	1dbb      	adds	r3, r7, #6
 80004a8:	2200      	movs	r2, #0
 80004aa:	5e9b      	ldrsh	r3, [r3, r2]
 80004ac:	005a      	lsls	r2, r3, #1
 80004ae:	1dbb      	adds	r3, r7, #6
 80004b0:	801a      	strh	r2, [r3, #0]
	result |= HAL_GPIO_ReadPin(dSW3_GPIO_Port,dSW3_Pin);
 80004b2:	4b1e      	ldr	r3, [pc, #120]	; (800052c <dSW_state+0xb0>)
 80004b4:	2108      	movs	r1, #8
 80004b6:	0018      	movs	r0, r3
 80004b8:	f001 fd0c 	bl	8001ed4 <HAL_GPIO_ReadPin>
 80004bc:	0003      	movs	r3, r0
 80004be:	b219      	sxth	r1, r3
 80004c0:	1dbb      	adds	r3, r7, #6
 80004c2:	1dba      	adds	r2, r7, #6
 80004c4:	8812      	ldrh	r2, [r2, #0]
 80004c6:	430a      	orrs	r2, r1
 80004c8:	801a      	strh	r2, [r3, #0]
	result <<= 1;
 80004ca:	1dbb      	adds	r3, r7, #6
 80004cc:	2200      	movs	r2, #0
 80004ce:	5e9b      	ldrsh	r3, [r3, r2]
 80004d0:	005a      	lsls	r2, r3, #1
 80004d2:	1dbb      	adds	r3, r7, #6
 80004d4:	801a      	strh	r2, [r3, #0]
	result |= HAL_GPIO_ReadPin(dSW2_GPIO_Port,dSW2_Pin);
 80004d6:	4b15      	ldr	r3, [pc, #84]	; (800052c <dSW_state+0xb0>)
 80004d8:	2110      	movs	r1, #16
 80004da:	0018      	movs	r0, r3
 80004dc:	f001 fcfa 	bl	8001ed4 <HAL_GPIO_ReadPin>
 80004e0:	0003      	movs	r3, r0
 80004e2:	b219      	sxth	r1, r3
 80004e4:	1dbb      	adds	r3, r7, #6
 80004e6:	1dba      	adds	r2, r7, #6
 80004e8:	8812      	ldrh	r2, [r2, #0]
 80004ea:	430a      	orrs	r2, r1
 80004ec:	801a      	strh	r2, [r3, #0]
	result <<= 1;
 80004ee:	1dbb      	adds	r3, r7, #6
 80004f0:	2200      	movs	r2, #0
 80004f2:	5e9b      	ldrsh	r3, [r3, r2]
 80004f4:	005a      	lsls	r2, r3, #1
 80004f6:	1dbb      	adds	r3, r7, #6
 80004f8:	801a      	strh	r2, [r3, #0]
	result |= HAL_GPIO_ReadPin(dSW1_GPIO_Port,dSW1_Pin);
 80004fa:	4b0c      	ldr	r3, [pc, #48]	; (800052c <dSW_state+0xb0>)
 80004fc:	2120      	movs	r1, #32
 80004fe:	0018      	movs	r0, r3
 8000500:	f001 fce8 	bl	8001ed4 <HAL_GPIO_ReadPin>
 8000504:	0003      	movs	r3, r0
 8000506:	b219      	sxth	r1, r3
 8000508:	1dbb      	adds	r3, r7, #6
 800050a:	1dba      	adds	r2, r7, #6
 800050c:	8812      	ldrh	r2, [r2, #0]
 800050e:	430a      	orrs	r2, r1
 8000510:	801a      	strh	r2, [r3, #0]
	result <<= 1;
 8000512:	1dbb      	adds	r3, r7, #6
 8000514:	2200      	movs	r2, #0
 8000516:	5e9b      	ldrsh	r3, [r3, r2]
 8000518:	005a      	lsls	r2, r3, #1
 800051a:	1dbb      	adds	r3, r7, #6
 800051c:	801a      	strh	r2, [r3, #0]

	return result;
 800051e:	1dbb      	adds	r3, r7, #6
 8000520:	2200      	movs	r2, #0
 8000522:	5e9b      	ldrsh	r3, [r3, r2]
}
 8000524:	0018      	movs	r0, r3
 8000526:	46bd      	mov	sp, r7
 8000528:	b002      	add	sp, #8
 800052a:	bd80      	pop	{r7, pc}
 800052c:	48000400 	.word	0x48000400

08000530 <LEDpwm_Init>:

#include "led.h"

static uint32_t g_st_period = 1000;

void LEDpwm_Init(TIM_HandleTypeDef htim){
 8000530:	b084      	sub	sp, #16
 8000532:	b5b0      	push	{r4, r5, r7, lr}
 8000534:	af00      	add	r7, sp, #0
 8000536:	250c      	movs	r5, #12
 8000538:	1d3c      	adds	r4, r7, #4
 800053a:	1964      	adds	r4, r4, r5
 800053c:	6020      	str	r0, [r4, #0]
 800053e:	6061      	str	r1, [r4, #4]
 8000540:	60a2      	str	r2, [r4, #8]
 8000542:	60e3      	str	r3, [r4, #12]
	g_st_period = htim.Init.Period;
 8000544:	1d3b      	adds	r3, r7, #4
 8000546:	195b      	adds	r3, r3, r5
 8000548:	68da      	ldr	r2, [r3, #12]
 800054a:	4b04      	ldr	r3, [pc, #16]	; (800055c <LEDpwm_Init+0x2c>)
 800054c:	601a      	str	r2, [r3, #0]
}
 800054e:	46c0      	nop			; (mov r8, r8)
 8000550:	46bd      	mov	sp, r7
 8000552:	bcb0      	pop	{r4, r5, r7}
 8000554:	bc08      	pop	{r3}
 8000556:	b004      	add	sp, #16
 8000558:	4718      	bx	r3
 800055a:	46c0      	nop			; (mov r8, r8)
 800055c:	20000000 	.word	0x20000000

08000560 <LED_pwm>:

void LED_pwm(uint32_t ledch, uint32_t pulse){
 8000560:	b580      	push	{r7, lr}
 8000562:	b082      	sub	sp, #8
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
 8000568:	6039      	str	r1, [r7, #0]
	pulse *= g_st_period/1000+1;
 800056a:	4b16      	ldr	r3, [pc, #88]	; (80005c4 <LED_pwm+0x64>)
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	22fa      	movs	r2, #250	; 0xfa
 8000570:	0091      	lsls	r1, r2, #2
 8000572:	0018      	movs	r0, r3
 8000574:	f7ff fdc8 	bl	8000108 <__udivsi3>
 8000578:	0003      	movs	r3, r0
 800057a:	1c5a      	adds	r2, r3, #1
 800057c:	683b      	ldr	r3, [r7, #0]
 800057e:	4353      	muls	r3, r2
 8000580:	603b      	str	r3, [r7, #0]
	__HAL_TIM_SET_COMPARE(&htim16, ledch, pulse);
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	2b00      	cmp	r3, #0
 8000586:	d104      	bne.n	8000592 <LED_pwm+0x32>
 8000588:	4b0f      	ldr	r3, [pc, #60]	; (80005c8 <LED_pwm+0x68>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	683a      	ldr	r2, [r7, #0]
 800058e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000590:	e013      	b.n	80005ba <LED_pwm+0x5a>
	__HAL_TIM_SET_COMPARE(&htim16, ledch, pulse);
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	2b04      	cmp	r3, #4
 8000596:	d104      	bne.n	80005a2 <LED_pwm+0x42>
 8000598:	4b0b      	ldr	r3, [pc, #44]	; (80005c8 <LED_pwm+0x68>)
 800059a:	681a      	ldr	r2, [r3, #0]
 800059c:	683b      	ldr	r3, [r7, #0]
 800059e:	6393      	str	r3, [r2, #56]	; 0x38
}
 80005a0:	e00b      	b.n	80005ba <LED_pwm+0x5a>
	__HAL_TIM_SET_COMPARE(&htim16, ledch, pulse);
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	2b08      	cmp	r3, #8
 80005a6:	d104      	bne.n	80005b2 <LED_pwm+0x52>
 80005a8:	4b07      	ldr	r3, [pc, #28]	; (80005c8 <LED_pwm+0x68>)
 80005aa:	681a      	ldr	r2, [r3, #0]
 80005ac:	683b      	ldr	r3, [r7, #0]
 80005ae:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 80005b0:	e003      	b.n	80005ba <LED_pwm+0x5a>
	__HAL_TIM_SET_COMPARE(&htim16, ledch, pulse);
 80005b2:	4b05      	ldr	r3, [pc, #20]	; (80005c8 <LED_pwm+0x68>)
 80005b4:	681a      	ldr	r2, [r3, #0]
 80005b6:	683b      	ldr	r3, [r7, #0]
 80005b8:	6413      	str	r3, [r2, #64]	; 0x40
}
 80005ba:	46c0      	nop			; (mov r8, r8)
 80005bc:	46bd      	mov	sp, r7
 80005be:	b002      	add	sp, #8
 80005c0:	bd80      	pop	{r7, pc}
 80005c2:	46c0      	nop			; (mov r8, r8)
 80005c4:	20000000 	.word	0x20000000
 80005c8:	200001b8 	.word	0x200001b8

080005cc <User_Init>:
static void MX_TIM1_Init(void);
static void MX_TIM14_Init(void);
static void MX_I2C1_Init(void);
static void MX_TIM16_Init(void);
/* USER CODE BEGIN PFP */
void User_Init(void){
 80005cc:	b590      	push	{r4, r7, lr}
 80005ce:	b08f      	sub	sp, #60	; 0x3c
 80005d0:	af0e      	add	r7, sp, #56	; 0x38
	/* timer */
	HAL_TIM_Base_Start_IT(&htim14);
 80005d2:	4b28      	ldr	r3, [pc, #160]	; (8000674 <User_Init+0xa8>)
 80005d4:	0018      	movs	r0, r3
 80005d6:	f002 ff9b 	bl	8003510 <HAL_TIM_Base_Start_IT>
	HAL_Delay(100);
 80005da:	2064      	movs	r0, #100	; 0x64
 80005dc:	f000 febc 	bl	8001358 <HAL_Delay>
	/* ADC DMA */


	/* User LED PWM */
	HAL_TIM_Base_Start(&htim16);
 80005e0:	4b25      	ldr	r3, [pc, #148]	; (8000678 <User_Init+0xac>)
 80005e2:	0018      	movs	r0, r3
 80005e4:	f002 ff50 	bl	8003488 <HAL_TIM_Base_Start>
	if(HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1) != HAL_OK) Error_Handler();
 80005e8:	4b23      	ldr	r3, [pc, #140]	; (8000678 <User_Init+0xac>)
 80005ea:	2100      	movs	r1, #0
 80005ec:	0018      	movs	r0, r3
 80005ee:	f003 f833 	bl	8003658 <HAL_TIM_PWM_Start>
 80005f2:	1e03      	subs	r3, r0, #0
 80005f4:	d001      	beq.n	80005fa <User_Init+0x2e>
 80005f6:	f000 fbff 	bl	8000df8 <Error_Handler>
	LEDpwm_Init(htim16);
 80005fa:	4c1f      	ldr	r4, [pc, #124]	; (8000678 <User_Init+0xac>)
 80005fc:	466b      	mov	r3, sp
 80005fe:	0018      	movs	r0, r3
 8000600:	0023      	movs	r3, r4
 8000602:	3310      	adds	r3, #16
 8000604:	2238      	movs	r2, #56	; 0x38
 8000606:	0019      	movs	r1, r3
 8000608:	f003 ffa8 	bl	800455c <memcpy>
 800060c:	6820      	ldr	r0, [r4, #0]
 800060e:	6861      	ldr	r1, [r4, #4]
 8000610:	68a2      	ldr	r2, [r4, #8]
 8000612:	68e3      	ldr	r3, [r4, #12]
 8000614:	f7ff ff8c 	bl	8000530 <LEDpwm_Init>

	/* motor PWM */
	//HAL_TIM_Base_Start(&htim1);
	HAL_TIM_Base_Start_IT(&htim1);
 8000618:	4b18      	ldr	r3, [pc, #96]	; (800067c <User_Init+0xb0>)
 800061a:	0018      	movs	r0, r3
 800061c:	f002 ff78 	bl	8003510 <HAL_TIM_Base_Start_IT>
	if(HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1) != HAL_OK) Error_Handler();
 8000620:	4b16      	ldr	r3, [pc, #88]	; (800067c <User_Init+0xb0>)
 8000622:	2100      	movs	r1, #0
 8000624:	0018      	movs	r0, r3
 8000626:	f003 f817 	bl	8003658 <HAL_TIM_PWM_Start>
 800062a:	1e03      	subs	r3, r0, #0
 800062c:	d001      	beq.n	8000632 <User_Init+0x66>
 800062e:	f000 fbe3 	bl	8000df8 <Error_Handler>
	if(HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_2) != HAL_OK) Error_Handler();
 8000632:	4b12      	ldr	r3, [pc, #72]	; (800067c <User_Init+0xb0>)
 8000634:	2104      	movs	r1, #4
 8000636:	0018      	movs	r0, r3
 8000638:	f003 f80e 	bl	8003658 <HAL_TIM_PWM_Start>
 800063c:	1e03      	subs	r3, r0, #0
 800063e:	d001      	beq.n	8000644 <User_Init+0x78>
 8000640:	f000 fbda 	bl	8000df8 <Error_Handler>
	if(HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_3) != HAL_OK) Error_Handler();
 8000644:	4b0d      	ldr	r3, [pc, #52]	; (800067c <User_Init+0xb0>)
 8000646:	2108      	movs	r1, #8
 8000648:	0018      	movs	r0, r3
 800064a:	f003 f805 	bl	8003658 <HAL_TIM_PWM_Start>
 800064e:	1e03      	subs	r3, r0, #0
 8000650:	d001      	beq.n	8000656 <User_Init+0x8a>
 8000652:	f000 fbd1 	bl	8000df8 <Error_Handler>

	HAL_Delay(1000);
 8000656:	23fa      	movs	r3, #250	; 0xfa
 8000658:	009b      	lsls	r3, r3, #2
 800065a:	0018      	movs	r0, r3
 800065c:	f000 fe7c 	bl	8001358 <HAL_Delay>

	g_pi_val.ki = 0;
 8000660:	4b07      	ldr	r3, [pc, #28]	; (8000680 <User_Init+0xb4>)
 8000662:	2200      	movs	r2, #0
 8000664:	80da      	strh	r2, [r3, #6]
	g_pi_val.kp = 10;
 8000666:	4b06      	ldr	r3, [pc, #24]	; (8000680 <User_Init+0xb4>)
 8000668:	220a      	movs	r2, #10
 800066a:	809a      	strh	r2, [r3, #4]
}
 800066c:	46c0      	nop			; (mov r8, r8)
 800066e:	46bd      	mov	sp, r7
 8000670:	b001      	add	sp, #4
 8000672:	bd90      	pop	{r4, r7, pc}
 8000674:	200000ec 	.word	0x200000ec
 8000678:	200001b8 	.word	0x200001b8
 800067c:	200000a4 	.word	0x200000a4
 8000680:	2000004c 	.word	0x2000004c

08000684 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	int raw = 0;
 800068a:	2300      	movs	r3, #0
 800068c:	607b      	str	r3, [r7, #4]
	int dSW = 0;
 800068e:	2300      	movs	r3, #0
 8000690:	603b      	str	r3, [r7, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000692:	f000 fdfd 	bl	8001290 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000696:	f000 f883 	bl	80007a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800069a:	f000 fb1d 	bl	8000cd8 <MX_GPIO_Init>
  MX_DMA_Init();
 800069e:	f000 fafd 	bl	8000c9c <MX_DMA_Init>
  MX_ADC_Init();
 80006a2:	f000 f8eb 	bl	800087c <MX_ADC_Init>
  MX_TIM1_Init();
 80006a6:	f000 f983 	bl	80009b0 <MX_TIM1_Init>
  MX_TIM14_Init();
 80006aa:	f000 fa4d 	bl	8000b48 <MX_TIM14_Init>
  MX_I2C1_Init();
 80006ae:	f000 f93f 	bl	8000930 <MX_I2C1_Init>
  MX_TIM16_Init();
 80006b2:	f000 fa6d 	bl	8000b90 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
  User_Init();
 80006b6:	f7ff ff89 	bl	80005cc <User_Init>
  /* USER CODE BEGIN WHILE */
  while (1){
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(g_tim14_cnt >= cntl_cyc){
 80006ba:	4b33      	ldr	r3, [pc, #204]	; (8000788 <main+0x104>)
 80006bc:	881b      	ldrh	r3, [r3, #0]
 80006be:	2b63      	cmp	r3, #99	; 0x63
 80006c0:	d928      	bls.n	8000714 <main+0x90>
		  raw = def_AS5600_Read_Raw;
 80006c2:	200c      	movs	r0, #12
 80006c4:	f7ff fe96 	bl	80003f4 <AS5600_mem_read>
 80006c8:	0003      	movs	r3, r0
 80006ca:	607b      	str	r3, [r7, #4]
		  //raw += g_tim14_cnt/100;
		  LED1PWM(raw*1000/4095);
 80006cc:	687a      	ldr	r2, [r7, #4]
 80006ce:	0013      	movs	r3, r2
 80006d0:	015b      	lsls	r3, r3, #5
 80006d2:	1a9b      	subs	r3, r3, r2
 80006d4:	009b      	lsls	r3, r3, #2
 80006d6:	189b      	adds	r3, r3, r2
 80006d8:	00db      	lsls	r3, r3, #3
 80006da:	492c      	ldr	r1, [pc, #176]	; (800078c <main+0x108>)
 80006dc:	0018      	movs	r0, r3
 80006de:	f7ff fd9d 	bl	800021c <__divsi3>
 80006e2:	0003      	movs	r3, r0
 80006e4:	0019      	movs	r1, r3
 80006e6:	2000      	movs	r0, #0
 80006e8:	f7ff ff3a 	bl	8000560 <LED_pwm>
		  //raw += 10;
		  if(raw >= 360){
 80006ec:	687a      	ldr	r2, [r7, #4]
 80006ee:	23b4      	movs	r3, #180	; 0xb4
 80006f0:	005b      	lsls	r3, r3, #1
 80006f2:	429a      	cmp	r2, r3
 80006f4:	db01      	blt.n	80006fa <main+0x76>
			  raw = 0;
 80006f6:	2300      	movs	r3, #0
 80006f8:	607b      	str	r3, [r7, #4]
		  }
		  g_posi_arr[0]=raw;
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	b29a      	uxth	r2, r3
 80006fe:	4b24      	ldr	r3, [pc, #144]	; (8000790 <main+0x10c>)
 8000700:	801a      	strh	r2, [r3, #0]
		  g_value.Vd = 0;
 8000702:	4b24      	ldr	r3, [pc, #144]	; (8000794 <main+0x110>)
 8000704:	2200      	movs	r2, #0
 8000706:	825a      	strh	r2, [r3, #18]
		  g_value.Vq = 5;
 8000708:	4b22      	ldr	r3, [pc, #136]	; (8000794 <main+0x110>)
 800070a:	2205      	movs	r2, #5
 800070c:	829a      	strh	r2, [r3, #20]
		  g_tim14_cnt = 0;
 800070e:	4b1e      	ldr	r3, [pc, #120]	; (8000788 <main+0x104>)
 8000710:	2200      	movs	r2, #0
 8000712:	801a      	strh	r2, [r3, #0]
	  }
/* for debug */
	  if(g_dSW_cnt >= 5000){ 	//500ms
 8000714:	4b20      	ldr	r3, [pc, #128]	; (8000798 <main+0x114>)
 8000716:	881b      	ldrh	r3, [r3, #0]
 8000718:	4a20      	ldr	r2, [pc, #128]	; (800079c <main+0x118>)
 800071a:	4293      	cmp	r3, r2
 800071c:	d92e      	bls.n	800077c <main+0xf8>
		  dSW = dSW_state();
 800071e:	f7ff fead 	bl	800047c <dSW_state>
 8000722:	0003      	movs	r3, r0
 8000724:	603b      	str	r3, [r7, #0]

		  switch(dSW){
 8000726:	683b      	ldr	r3, [r7, #0]
 8000728:	2b03      	cmp	r3, #3
 800072a:	d029      	beq.n	8000780 <main+0xfc>
 800072c:	683b      	ldr	r3, [r7, #0]
 800072e:	2b03      	cmp	r3, #3
 8000730:	dc1c      	bgt.n	800076c <main+0xe8>
 8000732:	683b      	ldr	r3, [r7, #0]
 8000734:	2b02      	cmp	r3, #2
 8000736:	d025      	beq.n	8000784 <main+0x100>
 8000738:	683b      	ldr	r3, [r7, #0]
 800073a:	2b02      	cmp	r3, #2
 800073c:	dc16      	bgt.n	800076c <main+0xe8>
 800073e:	683b      	ldr	r3, [r7, #0]
 8000740:	2b00      	cmp	r3, #0
 8000742:	d003      	beq.n	800074c <main+0xc8>
 8000744:	683b      	ldr	r3, [r7, #0]
 8000746:	2b01      	cmp	r3, #1
 8000748:	d008      	beq.n	800075c <main+0xd8>
 800074a:	e00f      	b.n	800076c <main+0xe8>
		  	  case 0:
		  		  MD_EN_ON;
 800074c:	2390      	movs	r3, #144	; 0x90
 800074e:	05db      	lsls	r3, r3, #23
 8000750:	2201      	movs	r2, #1
 8000752:	2120      	movs	r1, #32
 8000754:	0018      	movs	r0, r3
 8000756:	f001 fbda 	bl	8001f0e <HAL_GPIO_WritePin>
		  	  	  break;
 800075a:	e014      	b.n	8000786 <main+0x102>
		  	  case 1:
		  		  MD_EN_ON;
 800075c:	2390      	movs	r3, #144	; 0x90
 800075e:	05db      	lsls	r3, r3, #23
 8000760:	2201      	movs	r2, #1
 8000762:	2120      	movs	r1, #32
 8000764:	0018      	movs	r0, r3
 8000766:	f001 fbd2 	bl	8001f0e <HAL_GPIO_WritePin>
		  		  break;
 800076a:	e00c      	b.n	8000786 <main+0x102>
		  	  case 2:
				  break;
			  case 3:
				  break;
			  default:
				  MD_EN_ON;
 800076c:	2390      	movs	r3, #144	; 0x90
 800076e:	05db      	lsls	r3, r3, #23
 8000770:	2201      	movs	r2, #1
 8000772:	2120      	movs	r1, #32
 8000774:	0018      	movs	r0, r3
 8000776:	f001 fbca 	bl	8001f0e <HAL_GPIO_WritePin>
				  break;
 800077a:	e004      	b.n	8000786 <main+0x102>
		  }
	  }
 800077c:	46c0      	nop			; (mov r8, r8)
 800077e:	e79c      	b.n	80006ba <main+0x36>
				  break;
 8000780:	46c0      	nop			; (mov r8, r8)
 8000782:	e79a      	b.n	80006ba <main+0x36>
				  break;
 8000784:	46c0      	nop			; (mov r8, r8)
	  if(g_tim14_cnt >= cntl_cyc){
 8000786:	e798      	b.n	80006ba <main+0x36>
 8000788:	2000002c 	.word	0x2000002c
 800078c:	00000fff 	.word	0x00000fff
 8000790:	20000030 	.word	0x20000030
 8000794:	20000034 	.word	0x20000034
 8000798:	20000056 	.word	0x20000056
 800079c:	00001387 	.word	0x00001387

080007a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007a0:	b590      	push	{r4, r7, lr}
 80007a2:	b099      	sub	sp, #100	; 0x64
 80007a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007a6:	242c      	movs	r4, #44	; 0x2c
 80007a8:	193b      	adds	r3, r7, r4
 80007aa:	0018      	movs	r0, r3
 80007ac:	2334      	movs	r3, #52	; 0x34
 80007ae:	001a      	movs	r2, r3
 80007b0:	2100      	movs	r1, #0
 80007b2:	f003 fedc 	bl	800456e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007b6:	231c      	movs	r3, #28
 80007b8:	18fb      	adds	r3, r7, r3
 80007ba:	0018      	movs	r0, r3
 80007bc:	2310      	movs	r3, #16
 80007be:	001a      	movs	r2, r3
 80007c0:	2100      	movs	r1, #0
 80007c2:	f003 fed4 	bl	800456e <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007c6:	1d3b      	adds	r3, r7, #4
 80007c8:	0018      	movs	r0, r3
 80007ca:	2318      	movs	r3, #24
 80007cc:	001a      	movs	r2, r3
 80007ce:	2100      	movs	r1, #0
 80007d0:	f003 fecd 	bl	800456e <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14
 80007d4:	0021      	movs	r1, r4
 80007d6:	187b      	adds	r3, r7, r1
 80007d8:	2213      	movs	r2, #19
 80007da:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007dc:	187b      	adds	r3, r7, r1
 80007de:	2201      	movs	r2, #1
 80007e0:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007e2:	187b      	adds	r3, r7, r1
 80007e4:	2201      	movs	r2, #1
 80007e6:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 80007e8:	187b      	adds	r3, r7, r1
 80007ea:	2201      	movs	r2, #1
 80007ec:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007ee:	187b      	adds	r3, r7, r1
 80007f0:	2210      	movs	r2, #16
 80007f2:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 80007f4:	187b      	adds	r3, r7, r1
 80007f6:	2210      	movs	r2, #16
 80007f8:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007fa:	187b      	adds	r3, r7, r1
 80007fc:	2202      	movs	r2, #2
 80007fe:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000800:	187b      	adds	r3, r7, r1
 8000802:	2280      	movs	r2, #128	; 0x80
 8000804:	0252      	lsls	r2, r2, #9
 8000806:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000808:	187b      	adds	r3, r7, r1
 800080a:	22a0      	movs	r2, #160	; 0xa0
 800080c:	0392      	lsls	r2, r2, #14
 800080e:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV2;
 8000810:	187b      	adds	r3, r7, r1
 8000812:	2201      	movs	r2, #1
 8000814:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000816:	187b      	adds	r3, r7, r1
 8000818:	0018      	movs	r0, r3
 800081a:	f001 ffef 	bl	80027fc <HAL_RCC_OscConfig>
 800081e:	1e03      	subs	r3, r0, #0
 8000820:	d001      	beq.n	8000826 <SystemClock_Config+0x86>
  {
    Error_Handler();
 8000822:	f000 fae9 	bl	8000df8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000826:	211c      	movs	r1, #28
 8000828:	187b      	adds	r3, r7, r1
 800082a:	2207      	movs	r2, #7
 800082c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800082e:	187b      	adds	r3, r7, r1
 8000830:	2202      	movs	r2, #2
 8000832:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000834:	187b      	adds	r3, r7, r1
 8000836:	2200      	movs	r2, #0
 8000838:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800083a:	187b      	adds	r3, r7, r1
 800083c:	2200      	movs	r2, #0
 800083e:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000840:	187b      	adds	r3, r7, r1
 8000842:	2101      	movs	r1, #1
 8000844:	0018      	movs	r0, r3
 8000846:	f002 fb5f 	bl	8002f08 <HAL_RCC_ClockConfig>
 800084a:	1e03      	subs	r3, r0, #0
 800084c:	d001      	beq.n	8000852 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800084e:	f000 fad3 	bl	8000df8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000852:	1d3b      	adds	r3, r7, #4
 8000854:	2220      	movs	r2, #32
 8000856:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000858:	1d3b      	adds	r3, r7, #4
 800085a:	2200      	movs	r2, #0
 800085c:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800085e:	1d3b      	adds	r3, r7, #4
 8000860:	0018      	movs	r0, r3
 8000862:	f002 fcd3 	bl	800320c <HAL_RCCEx_PeriphCLKConfig>
 8000866:	1e03      	subs	r3, r0, #0
 8000868:	d001      	beq.n	800086e <SystemClock_Config+0xce>
  {
    Error_Handler();
 800086a:	f000 fac5 	bl	8000df8 <Error_Handler>
  }
  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 800086e:	f002 fc25 	bl	80030bc <HAL_RCC_EnableCSS>
}
 8000872:	46c0      	nop			; (mov r8, r8)
 8000874:	46bd      	mov	sp, r7
 8000876:	b019      	add	sp, #100	; 0x64
 8000878:	bd90      	pop	{r4, r7, pc}
	...

0800087c <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b084      	sub	sp, #16
 8000880:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000882:	1d3b      	adds	r3, r7, #4
 8000884:	0018      	movs	r0, r3
 8000886:	230c      	movs	r3, #12
 8000888:	001a      	movs	r2, r3
 800088a:	2100      	movs	r1, #0
 800088c:	f003 fe6f 	bl	800456e <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000890:	4b25      	ldr	r3, [pc, #148]	; (8000928 <MX_ADC_Init+0xac>)
 8000892:	4a26      	ldr	r2, [pc, #152]	; (800092c <MX_ADC_Init+0xb0>)
 8000894:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000896:	4b24      	ldr	r3, [pc, #144]	; (8000928 <MX_ADC_Init+0xac>)
 8000898:	2200      	movs	r2, #0
 800089a:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 800089c:	4b22      	ldr	r3, [pc, #136]	; (8000928 <MX_ADC_Init+0xac>)
 800089e:	2200      	movs	r2, #0
 80008a0:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008a2:	4b21      	ldr	r3, [pc, #132]	; (8000928 <MX_ADC_Init+0xac>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80008a8:	4b1f      	ldr	r3, [pc, #124]	; (8000928 <MX_ADC_Init+0xac>)
 80008aa:	2201      	movs	r2, #1
 80008ac:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008ae:	4b1e      	ldr	r3, [pc, #120]	; (8000928 <MX_ADC_Init+0xac>)
 80008b0:	2204      	movs	r2, #4
 80008b2:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 80008b4:	4b1c      	ldr	r3, [pc, #112]	; (8000928 <MX_ADC_Init+0xac>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80008ba:	4b1b      	ldr	r3, [pc, #108]	; (8000928 <MX_ADC_Init+0xac>)
 80008bc:	2200      	movs	r2, #0
 80008be:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = ENABLE;
 80008c0:	4b19      	ldr	r3, [pc, #100]	; (8000928 <MX_ADC_Init+0xac>)
 80008c2:	2201      	movs	r2, #1
 80008c4:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80008c6:	4b18      	ldr	r3, [pc, #96]	; (8000928 <MX_ADC_Init+0xac>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008cc:	4b16      	ldr	r3, [pc, #88]	; (8000928 <MX_ADC_Init+0xac>)
 80008ce:	22c2      	movs	r2, #194	; 0xc2
 80008d0:	32ff      	adds	r2, #255	; 0xff
 80008d2:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008d4:	4b14      	ldr	r3, [pc, #80]	; (8000928 <MX_ADC_Init+0xac>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = ENABLE;
 80008da:	4b13      	ldr	r3, [pc, #76]	; (8000928 <MX_ADC_Init+0xac>)
 80008dc:	2224      	movs	r2, #36	; 0x24
 80008de:	2101      	movs	r1, #1
 80008e0:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80008e2:	4b11      	ldr	r3, [pc, #68]	; (8000928 <MX_ADC_Init+0xac>)
 80008e4:	2201      	movs	r2, #1
 80008e6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80008e8:	4b0f      	ldr	r3, [pc, #60]	; (8000928 <MX_ADC_Init+0xac>)
 80008ea:	0018      	movs	r0, r3
 80008ec:	f000 fd58 	bl	80013a0 <HAL_ADC_Init>
 80008f0:	1e03      	subs	r3, r0, #0
 80008f2:	d001      	beq.n	80008f8 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 80008f4:	f000 fa80 	bl	8000df8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80008f8:	1d3b      	adds	r3, r7, #4
 80008fa:	2208      	movs	r2, #8
 80008fc:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80008fe:	1d3b      	adds	r3, r7, #4
 8000900:	2280      	movs	r2, #128	; 0x80
 8000902:	0152      	lsls	r2, r2, #5
 8000904:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 8000906:	1d3b      	adds	r3, r7, #4
 8000908:	2202      	movs	r2, #2
 800090a:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800090c:	1d3a      	adds	r2, r7, #4
 800090e:	4b06      	ldr	r3, [pc, #24]	; (8000928 <MX_ADC_Init+0xac>)
 8000910:	0011      	movs	r1, r2
 8000912:	0018      	movs	r0, r3
 8000914:	f000 fe84 	bl	8001620 <HAL_ADC_ConfigChannel>
 8000918:	1e03      	subs	r3, r0, #0
 800091a:	d001      	beq.n	8000920 <MX_ADC_Init+0xa4>
  {
    Error_Handler();
 800091c:	f000 fa6c 	bl	8000df8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000920:	46c0      	nop			; (mov r8, r8)
 8000922:	46bd      	mov	sp, r7
 8000924:	b004      	add	sp, #16
 8000926:	bd80      	pop	{r7, pc}
 8000928:	20000178 	.word	0x20000178
 800092c:	40012400 	.word	0x40012400

08000930 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000934:	4b1b      	ldr	r3, [pc, #108]	; (80009a4 <MX_I2C1_Init+0x74>)
 8000936:	4a1c      	ldr	r2, [pc, #112]	; (80009a8 <MX_I2C1_Init+0x78>)
 8000938:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 800093a:	4b1a      	ldr	r3, [pc, #104]	; (80009a4 <MX_I2C1_Init+0x74>)
 800093c:	4a1b      	ldr	r2, [pc, #108]	; (80009ac <MX_I2C1_Init+0x7c>)
 800093e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000940:	4b18      	ldr	r3, [pc, #96]	; (80009a4 <MX_I2C1_Init+0x74>)
 8000942:	2200      	movs	r2, #0
 8000944:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000946:	4b17      	ldr	r3, [pc, #92]	; (80009a4 <MX_I2C1_Init+0x74>)
 8000948:	2201      	movs	r2, #1
 800094a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800094c:	4b15      	ldr	r3, [pc, #84]	; (80009a4 <MX_I2C1_Init+0x74>)
 800094e:	2200      	movs	r2, #0
 8000950:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000952:	4b14      	ldr	r3, [pc, #80]	; (80009a4 <MX_I2C1_Init+0x74>)
 8000954:	2200      	movs	r2, #0
 8000956:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000958:	4b12      	ldr	r3, [pc, #72]	; (80009a4 <MX_I2C1_Init+0x74>)
 800095a:	2200      	movs	r2, #0
 800095c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800095e:	4b11      	ldr	r3, [pc, #68]	; (80009a4 <MX_I2C1_Init+0x74>)
 8000960:	2200      	movs	r2, #0
 8000962:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000964:	4b0f      	ldr	r3, [pc, #60]	; (80009a4 <MX_I2C1_Init+0x74>)
 8000966:	2200      	movs	r2, #0
 8000968:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800096a:	4b0e      	ldr	r3, [pc, #56]	; (80009a4 <MX_I2C1_Init+0x74>)
 800096c:	0018      	movs	r0, r3
 800096e:	f001 faeb 	bl	8001f48 <HAL_I2C_Init>
 8000972:	1e03      	subs	r3, r0, #0
 8000974:	d001      	beq.n	800097a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000976:	f000 fa3f 	bl	8000df8 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800097a:	4b0a      	ldr	r3, [pc, #40]	; (80009a4 <MX_I2C1_Init+0x74>)
 800097c:	2100      	movs	r1, #0
 800097e:	0018      	movs	r0, r3
 8000980:	f001 fea4 	bl	80026cc <HAL_I2CEx_ConfigAnalogFilter>
 8000984:	1e03      	subs	r3, r0, #0
 8000986:	d001      	beq.n	800098c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000988:	f000 fa36 	bl	8000df8 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800098c:	4b05      	ldr	r3, [pc, #20]	; (80009a4 <MX_I2C1_Init+0x74>)
 800098e:	2100      	movs	r1, #0
 8000990:	0018      	movs	r0, r3
 8000992:	f001 fee7 	bl	8002764 <HAL_I2CEx_ConfigDigitalFilter>
 8000996:	1e03      	subs	r3, r0, #0
 8000998:	d001      	beq.n	800099e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800099a:	f000 fa2d 	bl	8000df8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800099e:	46c0      	nop			; (mov r8, r8)
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	20000058 	.word	0x20000058
 80009a8:	40005400 	.word	0x40005400
 80009ac:	2000090e 	.word	0x2000090e

080009b0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b096      	sub	sp, #88	; 0x58
 80009b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009b6:	2348      	movs	r3, #72	; 0x48
 80009b8:	18fb      	adds	r3, r7, r3
 80009ba:	0018      	movs	r0, r3
 80009bc:	2310      	movs	r3, #16
 80009be:	001a      	movs	r2, r3
 80009c0:	2100      	movs	r1, #0
 80009c2:	f003 fdd4 	bl	800456e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009c6:	2340      	movs	r3, #64	; 0x40
 80009c8:	18fb      	adds	r3, r7, r3
 80009ca:	0018      	movs	r0, r3
 80009cc:	2308      	movs	r3, #8
 80009ce:	001a      	movs	r2, r3
 80009d0:	2100      	movs	r1, #0
 80009d2:	f003 fdcc 	bl	800456e <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009d6:	2324      	movs	r3, #36	; 0x24
 80009d8:	18fb      	adds	r3, r7, r3
 80009da:	0018      	movs	r0, r3
 80009dc:	231c      	movs	r3, #28
 80009de:	001a      	movs	r2, r3
 80009e0:	2100      	movs	r1, #0
 80009e2:	f003 fdc4 	bl	800456e <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80009e6:	1d3b      	adds	r3, r7, #4
 80009e8:	0018      	movs	r0, r3
 80009ea:	2320      	movs	r3, #32
 80009ec:	001a      	movs	r2, r3
 80009ee:	2100      	movs	r1, #0
 80009f0:	f003 fdbd 	bl	800456e <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80009f4:	4b51      	ldr	r3, [pc, #324]	; (8000b3c <MX_TIM1_Init+0x18c>)
 80009f6:	4a52      	ldr	r2, [pc, #328]	; (8000b40 <MX_TIM1_Init+0x190>)
 80009f8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80009fa:	4b50      	ldr	r3, [pc, #320]	; (8000b3c <MX_TIM1_Init+0x18c>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8000a00:	4b4e      	ldr	r3, [pc, #312]	; (8000b3c <MX_TIM1_Init+0x18c>)
 8000a02:	2220      	movs	r2, #32
 8000a04:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2400-1;
 8000a06:	4b4d      	ldr	r3, [pc, #308]	; (8000b3c <MX_TIM1_Init+0x18c>)
 8000a08:	4a4e      	ldr	r2, [pc, #312]	; (8000b44 <MX_TIM1_Init+0x194>)
 8000a0a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a0c:	4b4b      	ldr	r3, [pc, #300]	; (8000b3c <MX_TIM1_Init+0x18c>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000a12:	4b4a      	ldr	r3, [pc, #296]	; (8000b3c <MX_TIM1_Init+0x18c>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a18:	4b48      	ldr	r3, [pc, #288]	; (8000b3c <MX_TIM1_Init+0x18c>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000a1e:	4b47      	ldr	r3, [pc, #284]	; (8000b3c <MX_TIM1_Init+0x18c>)
 8000a20:	0018      	movs	r0, r3
 8000a22:	f002 fce1 	bl	80033e8 <HAL_TIM_Base_Init>
 8000a26:	1e03      	subs	r3, r0, #0
 8000a28:	d001      	beq.n	8000a2e <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 8000a2a:	f000 f9e5 	bl	8000df8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a2e:	2148      	movs	r1, #72	; 0x48
 8000a30:	187b      	adds	r3, r7, r1
 8000a32:	2280      	movs	r2, #128	; 0x80
 8000a34:	0152      	lsls	r2, r2, #5
 8000a36:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000a38:	187a      	adds	r2, r7, r1
 8000a3a:	4b40      	ldr	r3, [pc, #256]	; (8000b3c <MX_TIM1_Init+0x18c>)
 8000a3c:	0011      	movs	r1, r2
 8000a3e:	0018      	movs	r0, r3
 8000a40:	f003 f892 	bl	8003b68 <HAL_TIM_ConfigClockSource>
 8000a44:	1e03      	subs	r3, r0, #0
 8000a46:	d001      	beq.n	8000a4c <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8000a48:	f000 f9d6 	bl	8000df8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000a4c:	4b3b      	ldr	r3, [pc, #236]	; (8000b3c <MX_TIM1_Init+0x18c>)
 8000a4e:	0018      	movs	r0, r3
 8000a50:	f002 fdaa 	bl	80035a8 <HAL_TIM_PWM_Init>
 8000a54:	1e03      	subs	r3, r0, #0
 8000a56:	d001      	beq.n	8000a5c <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 8000a58:	f000 f9ce 	bl	8000df8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a5c:	2140      	movs	r1, #64	; 0x40
 8000a5e:	187b      	adds	r3, r7, r1
 8000a60:	2200      	movs	r2, #0
 8000a62:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a64:	187b      	adds	r3, r7, r1
 8000a66:	2200      	movs	r2, #0
 8000a68:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a6a:	187a      	adds	r2, r7, r1
 8000a6c:	4b33      	ldr	r3, [pc, #204]	; (8000b3c <MX_TIM1_Init+0x18c>)
 8000a6e:	0011      	movs	r1, r2
 8000a70:	0018      	movs	r0, r3
 8000a72:	f003 fc89 	bl	8004388 <HAL_TIMEx_MasterConfigSynchronization>
 8000a76:	1e03      	subs	r3, r0, #0
 8000a78:	d001      	beq.n	8000a7e <MX_TIM1_Init+0xce>
  {
    Error_Handler();
 8000a7a:	f000 f9bd 	bl	8000df8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a7e:	2124      	movs	r1, #36	; 0x24
 8000a80:	187b      	adds	r3, r7, r1
 8000a82:	2260      	movs	r2, #96	; 0x60
 8000a84:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000a86:	187b      	adds	r3, r7, r1
 8000a88:	2200      	movs	r2, #0
 8000a8a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a8c:	187b      	adds	r3, r7, r1
 8000a8e:	2200      	movs	r2, #0
 8000a90:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000a92:	187b      	adds	r3, r7, r1
 8000a94:	2200      	movs	r2, #0
 8000a96:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a98:	187b      	adds	r3, r7, r1
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000a9e:	187b      	adds	r3, r7, r1
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000aa4:	187b      	adds	r3, r7, r1
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000aaa:	1879      	adds	r1, r7, r1
 8000aac:	4b23      	ldr	r3, [pc, #140]	; (8000b3c <MX_TIM1_Init+0x18c>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	0018      	movs	r0, r3
 8000ab2:	f002 ff93 	bl	80039dc <HAL_TIM_PWM_ConfigChannel>
 8000ab6:	1e03      	subs	r3, r0, #0
 8000ab8:	d001      	beq.n	8000abe <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 8000aba:	f000 f99d 	bl	8000df8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000abe:	2324      	movs	r3, #36	; 0x24
 8000ac0:	18f9      	adds	r1, r7, r3
 8000ac2:	4b1e      	ldr	r3, [pc, #120]	; (8000b3c <MX_TIM1_Init+0x18c>)
 8000ac4:	2204      	movs	r2, #4
 8000ac6:	0018      	movs	r0, r3
 8000ac8:	f002 ff88 	bl	80039dc <HAL_TIM_PWM_ConfigChannel>
 8000acc:	1e03      	subs	r3, r0, #0
 8000ace:	d001      	beq.n	8000ad4 <MX_TIM1_Init+0x124>
  {
    Error_Handler();
 8000ad0:	f000 f992 	bl	8000df8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000ad4:	2324      	movs	r3, #36	; 0x24
 8000ad6:	18f9      	adds	r1, r7, r3
 8000ad8:	4b18      	ldr	r3, [pc, #96]	; (8000b3c <MX_TIM1_Init+0x18c>)
 8000ada:	2208      	movs	r2, #8
 8000adc:	0018      	movs	r0, r3
 8000ade:	f002 ff7d 	bl	80039dc <HAL_TIM_PWM_ConfigChannel>
 8000ae2:	1e03      	subs	r3, r0, #0
 8000ae4:	d001      	beq.n	8000aea <MX_TIM1_Init+0x13a>
  {
    Error_Handler();
 8000ae6:	f000 f987 	bl	8000df8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000aea:	1d3b      	adds	r3, r7, #4
 8000aec:	2200      	movs	r2, #0
 8000aee:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000af0:	1d3b      	adds	r3, r7, #4
 8000af2:	2200      	movs	r2, #0
 8000af4:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000af6:	1d3b      	adds	r3, r7, #4
 8000af8:	2200      	movs	r2, #0
 8000afa:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000afc:	1d3b      	adds	r3, r7, #4
 8000afe:	2200      	movs	r2, #0
 8000b00:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000b02:	1d3b      	adds	r3, r7, #4
 8000b04:	2200      	movs	r2, #0
 8000b06:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000b08:	1d3b      	adds	r3, r7, #4
 8000b0a:	2280      	movs	r2, #128	; 0x80
 8000b0c:	0192      	lsls	r2, r2, #6
 8000b0e:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000b10:	1d3b      	adds	r3, r7, #4
 8000b12:	2200      	movs	r2, #0
 8000b14:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000b16:	1d3a      	adds	r2, r7, #4
 8000b18:	4b08      	ldr	r3, [pc, #32]	; (8000b3c <MX_TIM1_Init+0x18c>)
 8000b1a:	0011      	movs	r1, r2
 8000b1c:	0018      	movs	r0, r3
 8000b1e:	f003 fc8b 	bl	8004438 <HAL_TIMEx_ConfigBreakDeadTime>
 8000b22:	1e03      	subs	r3, r0, #0
 8000b24:	d001      	beq.n	8000b2a <MX_TIM1_Init+0x17a>
  {
    Error_Handler();
 8000b26:	f000 f967 	bl	8000df8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000b2a:	4b04      	ldr	r3, [pc, #16]	; (8000b3c <MX_TIM1_Init+0x18c>)
 8000b2c:	0018      	movs	r0, r3
 8000b2e:	f000 faab 	bl	8001088 <HAL_TIM_MspPostInit>

}
 8000b32:	46c0      	nop			; (mov r8, r8)
 8000b34:	46bd      	mov	sp, r7
 8000b36:	b016      	add	sp, #88	; 0x58
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	46c0      	nop			; (mov r8, r8)
 8000b3c:	200000a4 	.word	0x200000a4
 8000b40:	40012c00 	.word	0x40012c00
 8000b44:	0000095f 	.word	0x0000095f

08000b48 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000b4c:	4b0e      	ldr	r3, [pc, #56]	; (8000b88 <MX_TIM14_Init+0x40>)
 8000b4e:	4a0f      	ldr	r2, [pc, #60]	; (8000b8c <MX_TIM14_Init+0x44>)
 8000b50:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 47;
 8000b52:	4b0d      	ldr	r3, [pc, #52]	; (8000b88 <MX_TIM14_Init+0x40>)
 8000b54:	222f      	movs	r2, #47	; 0x2f
 8000b56:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b58:	4b0b      	ldr	r3, [pc, #44]	; (8000b88 <MX_TIM14_Init+0x40>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 99;
 8000b5e:	4b0a      	ldr	r3, [pc, #40]	; (8000b88 <MX_TIM14_Init+0x40>)
 8000b60:	2263      	movs	r2, #99	; 0x63
 8000b62:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b64:	4b08      	ldr	r3, [pc, #32]	; (8000b88 <MX_TIM14_Init+0x40>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b6a:	4b07      	ldr	r3, [pc, #28]	; (8000b88 <MX_TIM14_Init+0x40>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000b70:	4b05      	ldr	r3, [pc, #20]	; (8000b88 <MX_TIM14_Init+0x40>)
 8000b72:	0018      	movs	r0, r3
 8000b74:	f002 fc38 	bl	80033e8 <HAL_TIM_Base_Init>
 8000b78:	1e03      	subs	r3, r0, #0
 8000b7a:	d001      	beq.n	8000b80 <MX_TIM14_Init+0x38>
  {
    Error_Handler();
 8000b7c:	f000 f93c 	bl	8000df8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8000b80:	46c0      	nop			; (mov r8, r8)
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	46c0      	nop			; (mov r8, r8)
 8000b88:	200000ec 	.word	0x200000ec
 8000b8c:	40002000 	.word	0x40002000

08000b90 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b090      	sub	sp, #64	; 0x40
 8000b94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b96:	2324      	movs	r3, #36	; 0x24
 8000b98:	18fb      	adds	r3, r7, r3
 8000b9a:	0018      	movs	r0, r3
 8000b9c:	231c      	movs	r3, #28
 8000b9e:	001a      	movs	r2, r3
 8000ba0:	2100      	movs	r1, #0
 8000ba2:	f003 fce4 	bl	800456e <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000ba6:	1d3b      	adds	r3, r7, #4
 8000ba8:	0018      	movs	r0, r3
 8000baa:	2320      	movs	r3, #32
 8000bac:	001a      	movs	r2, r3
 8000bae:	2100      	movs	r1, #0
 8000bb0:	f003 fcdd 	bl	800456e <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000bb4:	4b36      	ldr	r3, [pc, #216]	; (8000c90 <MX_TIM16_Init+0x100>)
 8000bb6:	4a37      	ldr	r2, [pc, #220]	; (8000c94 <MX_TIM16_Init+0x104>)
 8000bb8:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8000bba:	4b35      	ldr	r3, [pc, #212]	; (8000c90 <MX_TIM16_Init+0x100>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bc0:	4b33      	ldr	r3, [pc, #204]	; (8000c90 <MX_TIM16_Init+0x100>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8000bc6:	4b32      	ldr	r3, [pc, #200]	; (8000c90 <MX_TIM16_Init+0x100>)
 8000bc8:	4a33      	ldr	r2, [pc, #204]	; (8000c98 <MX_TIM16_Init+0x108>)
 8000bca:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bcc:	4b30      	ldr	r3, [pc, #192]	; (8000c90 <MX_TIM16_Init+0x100>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000bd2:	4b2f      	ldr	r3, [pc, #188]	; (8000c90 <MX_TIM16_Init+0x100>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bd8:	4b2d      	ldr	r3, [pc, #180]	; (8000c90 <MX_TIM16_Init+0x100>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000bde:	4b2c      	ldr	r3, [pc, #176]	; (8000c90 <MX_TIM16_Init+0x100>)
 8000be0:	0018      	movs	r0, r3
 8000be2:	f002 fc01 	bl	80033e8 <HAL_TIM_Base_Init>
 8000be6:	1e03      	subs	r3, r0, #0
 8000be8:	d001      	beq.n	8000bee <MX_TIM16_Init+0x5e>
  {
    Error_Handler();
 8000bea:	f000 f905 	bl	8000df8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8000bee:	4b28      	ldr	r3, [pc, #160]	; (8000c90 <MX_TIM16_Init+0x100>)
 8000bf0:	0018      	movs	r0, r3
 8000bf2:	f002 fcd9 	bl	80035a8 <HAL_TIM_PWM_Init>
 8000bf6:	1e03      	subs	r3, r0, #0
 8000bf8:	d001      	beq.n	8000bfe <MX_TIM16_Init+0x6e>
  {
    Error_Handler();
 8000bfa:	f000 f8fd 	bl	8000df8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000bfe:	2124      	movs	r1, #36	; 0x24
 8000c00:	187b      	adds	r3, r7, r1
 8000c02:	2260      	movs	r2, #96	; 0x60
 8000c04:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000c06:	187b      	adds	r3, r7, r1
 8000c08:	2200      	movs	r2, #0
 8000c0a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c0c:	187b      	adds	r3, r7, r1
 8000c0e:	2200      	movs	r2, #0
 8000c10:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000c12:	187b      	adds	r3, r7, r1
 8000c14:	2200      	movs	r2, #0
 8000c16:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c18:	187b      	adds	r3, r7, r1
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000c1e:	187b      	adds	r3, r7, r1
 8000c20:	2200      	movs	r2, #0
 8000c22:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000c24:	187b      	adds	r3, r7, r1
 8000c26:	2200      	movs	r2, #0
 8000c28:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c2a:	1879      	adds	r1, r7, r1
 8000c2c:	4b18      	ldr	r3, [pc, #96]	; (8000c90 <MX_TIM16_Init+0x100>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	0018      	movs	r0, r3
 8000c32:	f002 fed3 	bl	80039dc <HAL_TIM_PWM_ConfigChannel>
 8000c36:	1e03      	subs	r3, r0, #0
 8000c38:	d001      	beq.n	8000c3e <MX_TIM16_Init+0xae>
  {
    Error_Handler();
 8000c3a:	f000 f8dd 	bl	8000df8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000c3e:	1d3b      	adds	r3, r7, #4
 8000c40:	2200      	movs	r2, #0
 8000c42:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000c44:	1d3b      	adds	r3, r7, #4
 8000c46:	2200      	movs	r2, #0
 8000c48:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000c4a:	1d3b      	adds	r3, r7, #4
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000c50:	1d3b      	adds	r3, r7, #4
 8000c52:	2200      	movs	r2, #0
 8000c54:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000c56:	1d3b      	adds	r3, r7, #4
 8000c58:	2200      	movs	r2, #0
 8000c5a:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000c5c:	1d3b      	adds	r3, r7, #4
 8000c5e:	2280      	movs	r2, #128	; 0x80
 8000c60:	0192      	lsls	r2, r2, #6
 8000c62:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000c64:	1d3b      	adds	r3, r7, #4
 8000c66:	2200      	movs	r2, #0
 8000c68:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8000c6a:	1d3a      	adds	r2, r7, #4
 8000c6c:	4b08      	ldr	r3, [pc, #32]	; (8000c90 <MX_TIM16_Init+0x100>)
 8000c6e:	0011      	movs	r1, r2
 8000c70:	0018      	movs	r0, r3
 8000c72:	f003 fbe1 	bl	8004438 <HAL_TIMEx_ConfigBreakDeadTime>
 8000c76:	1e03      	subs	r3, r0, #0
 8000c78:	d001      	beq.n	8000c7e <MX_TIM16_Init+0xee>
  {
    Error_Handler();
 8000c7a:	f000 f8bd 	bl	8000df8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8000c7e:	4b04      	ldr	r3, [pc, #16]	; (8000c90 <MX_TIM16_Init+0x100>)
 8000c80:	0018      	movs	r0, r3
 8000c82:	f000 fa01 	bl	8001088 <HAL_TIM_MspPostInit>

}
 8000c86:	46c0      	nop			; (mov r8, r8)
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	b010      	add	sp, #64	; 0x40
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	46c0      	nop			; (mov r8, r8)
 8000c90:	200001b8 	.word	0x200001b8
 8000c94:	40014400 	.word	0x40014400
 8000c98:	0000ffff 	.word	0x0000ffff

08000c9c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b082      	sub	sp, #8
 8000ca0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ca2:	4b0c      	ldr	r3, [pc, #48]	; (8000cd4 <MX_DMA_Init+0x38>)
 8000ca4:	695a      	ldr	r2, [r3, #20]
 8000ca6:	4b0b      	ldr	r3, [pc, #44]	; (8000cd4 <MX_DMA_Init+0x38>)
 8000ca8:	2101      	movs	r1, #1
 8000caa:	430a      	orrs	r2, r1
 8000cac:	615a      	str	r2, [r3, #20]
 8000cae:	4b09      	ldr	r3, [pc, #36]	; (8000cd4 <MX_DMA_Init+0x38>)
 8000cb0:	695b      	ldr	r3, [r3, #20]
 8000cb2:	2201      	movs	r2, #1
 8000cb4:	4013      	ands	r3, r2
 8000cb6:	607b      	str	r3, [r7, #4]
 8000cb8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	2009      	movs	r0, #9
 8000cc0:	f000 fe68 	bl	8001994 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000cc4:	2009      	movs	r0, #9
 8000cc6:	f000 fe7a 	bl	80019be <HAL_NVIC_EnableIRQ>

}
 8000cca:	46c0      	nop			; (mov r8, r8)
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	b002      	add	sp, #8
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	46c0      	nop			; (mov r8, r8)
 8000cd4:	40021000 	.word	0x40021000

08000cd8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cd8:	b590      	push	{r4, r7, lr}
 8000cda:	b089      	sub	sp, #36	; 0x24
 8000cdc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cde:	240c      	movs	r4, #12
 8000ce0:	193b      	adds	r3, r7, r4
 8000ce2:	0018      	movs	r0, r3
 8000ce4:	2314      	movs	r3, #20
 8000ce6:	001a      	movs	r2, r3
 8000ce8:	2100      	movs	r1, #0
 8000cea:	f003 fc40 	bl	800456e <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000cee:	4b40      	ldr	r3, [pc, #256]	; (8000df0 <MX_GPIO_Init+0x118>)
 8000cf0:	695a      	ldr	r2, [r3, #20]
 8000cf2:	4b3f      	ldr	r3, [pc, #252]	; (8000df0 <MX_GPIO_Init+0x118>)
 8000cf4:	2180      	movs	r1, #128	; 0x80
 8000cf6:	03c9      	lsls	r1, r1, #15
 8000cf8:	430a      	orrs	r2, r1
 8000cfa:	615a      	str	r2, [r3, #20]
 8000cfc:	4b3c      	ldr	r3, [pc, #240]	; (8000df0 <MX_GPIO_Init+0x118>)
 8000cfe:	695a      	ldr	r2, [r3, #20]
 8000d00:	2380      	movs	r3, #128	; 0x80
 8000d02:	03db      	lsls	r3, r3, #15
 8000d04:	4013      	ands	r3, r2
 8000d06:	60bb      	str	r3, [r7, #8]
 8000d08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d0a:	4b39      	ldr	r3, [pc, #228]	; (8000df0 <MX_GPIO_Init+0x118>)
 8000d0c:	695a      	ldr	r2, [r3, #20]
 8000d0e:	4b38      	ldr	r3, [pc, #224]	; (8000df0 <MX_GPIO_Init+0x118>)
 8000d10:	2180      	movs	r1, #128	; 0x80
 8000d12:	0289      	lsls	r1, r1, #10
 8000d14:	430a      	orrs	r2, r1
 8000d16:	615a      	str	r2, [r3, #20]
 8000d18:	4b35      	ldr	r3, [pc, #212]	; (8000df0 <MX_GPIO_Init+0x118>)
 8000d1a:	695a      	ldr	r2, [r3, #20]
 8000d1c:	2380      	movs	r3, #128	; 0x80
 8000d1e:	029b      	lsls	r3, r3, #10
 8000d20:	4013      	ands	r3, r2
 8000d22:	607b      	str	r3, [r7, #4]
 8000d24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d26:	4b32      	ldr	r3, [pc, #200]	; (8000df0 <MX_GPIO_Init+0x118>)
 8000d28:	695a      	ldr	r2, [r3, #20]
 8000d2a:	4b31      	ldr	r3, [pc, #196]	; (8000df0 <MX_GPIO_Init+0x118>)
 8000d2c:	2180      	movs	r1, #128	; 0x80
 8000d2e:	02c9      	lsls	r1, r1, #11
 8000d30:	430a      	orrs	r2, r1
 8000d32:	615a      	str	r2, [r3, #20]
 8000d34:	4b2e      	ldr	r3, [pc, #184]	; (8000df0 <MX_GPIO_Init+0x118>)
 8000d36:	695a      	ldr	r2, [r3, #20]
 8000d38:	2380      	movs	r3, #128	; 0x80
 8000d3a:	02db      	lsls	r3, r3, #11
 8000d3c:	4013      	ands	r3, r2
 8000d3e:	603b      	str	r3, [r7, #0]
 8000d40:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MD_EN_GPIO_Port, MD_EN_Pin, GPIO_PIN_RESET);
 8000d42:	2390      	movs	r3, #144	; 0x90
 8000d44:	05db      	lsls	r3, r3, #23
 8000d46:	2200      	movs	r2, #0
 8000d48:	2120      	movs	r1, #32
 8000d4a:	0018      	movs	r0, r3
 8000d4c:	f001 f8df 	bl	8001f0e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : MD_EN_Pin */
  GPIO_InitStruct.Pin = MD_EN_Pin;
 8000d50:	193b      	adds	r3, r7, r4
 8000d52:	2220      	movs	r2, #32
 8000d54:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d56:	193b      	adds	r3, r7, r4
 8000d58:	2201      	movs	r2, #1
 8000d5a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000d5c:	193b      	adds	r3, r7, r4
 8000d5e:	2202      	movs	r2, #2
 8000d60:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d62:	193b      	adds	r3, r7, r4
 8000d64:	2200      	movs	r2, #0
 8000d66:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(MD_EN_GPIO_Port, &GPIO_InitStruct);
 8000d68:	193a      	adds	r2, r7, r4
 8000d6a:	2390      	movs	r3, #144	; 0x90
 8000d6c:	05db      	lsls	r3, r3, #23
 8000d6e:	0011      	movs	r1, r2
 8000d70:	0018      	movs	r0, r3
 8000d72:	f000 ff47 	bl	8001c04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000d76:	0021      	movs	r1, r4
 8000d78:	187b      	adds	r3, r7, r1
 8000d7a:	22c0      	movs	r2, #192	; 0xc0
 8000d7c:	0152      	lsls	r2, r2, #5
 8000d7e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d80:	000c      	movs	r4, r1
 8000d82:	193b      	adds	r3, r7, r4
 8000d84:	2202      	movs	r2, #2
 8000d86:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d88:	193b      	adds	r3, r7, r4
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d8e:	193b      	adds	r3, r7, r4
 8000d90:	2203      	movs	r2, #3
 8000d92:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF4_CAN;
 8000d94:	193b      	adds	r3, r7, r4
 8000d96:	2204      	movs	r2, #4
 8000d98:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d9a:	193a      	adds	r2, r7, r4
 8000d9c:	2390      	movs	r3, #144	; 0x90
 8000d9e:	05db      	lsls	r3, r3, #23
 8000da0:	0011      	movs	r1, r2
 8000da2:	0018      	movs	r0, r3
 8000da4:	f000 ff2e 	bl	8001c04 <HAL_GPIO_Init>

  /*Configure GPIO pin : dSW4_Pin */
  GPIO_InitStruct.Pin = dSW4_Pin;
 8000da8:	193b      	adds	r3, r7, r4
 8000daa:	2280      	movs	r2, #128	; 0x80
 8000dac:	0212      	lsls	r2, r2, #8
 8000dae:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000db0:	193b      	adds	r3, r7, r4
 8000db2:	2200      	movs	r2, #0
 8000db4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000db6:	193b      	adds	r3, r7, r4
 8000db8:	2201      	movs	r2, #1
 8000dba:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(dSW4_GPIO_Port, &GPIO_InitStruct);
 8000dbc:	193a      	adds	r2, r7, r4
 8000dbe:	2390      	movs	r3, #144	; 0x90
 8000dc0:	05db      	lsls	r3, r3, #23
 8000dc2:	0011      	movs	r1, r2
 8000dc4:	0018      	movs	r0, r3
 8000dc6:	f000 ff1d 	bl	8001c04 <HAL_GPIO_Init>

  /*Configure GPIO pins : dSW3_Pin dSW2_Pin dSW1_Pin */
  GPIO_InitStruct.Pin = dSW3_Pin|dSW2_Pin|dSW1_Pin;
 8000dca:	193b      	adds	r3, r7, r4
 8000dcc:	2238      	movs	r2, #56	; 0x38
 8000dce:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dd0:	193b      	adds	r3, r7, r4
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000dd6:	193b      	adds	r3, r7, r4
 8000dd8:	2201      	movs	r2, #1
 8000dda:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ddc:	193b      	adds	r3, r7, r4
 8000dde:	4a05      	ldr	r2, [pc, #20]	; (8000df4 <MX_GPIO_Init+0x11c>)
 8000de0:	0019      	movs	r1, r3
 8000de2:	0010      	movs	r0, r2
 8000de4:	f000 ff0e 	bl	8001c04 <HAL_GPIO_Init>

}
 8000de8:	46c0      	nop			; (mov r8, r8)
 8000dea:	46bd      	mov	sp, r7
 8000dec:	b009      	add	sp, #36	; 0x24
 8000dee:	bd90      	pop	{r4, r7, pc}
 8000df0:	40021000 	.word	0x40021000
 8000df4:	48000400 	.word	0x48000400

08000df8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000dfc:	46c0      	nop			; (mov r8, r8)
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
	...

08000e04 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e0a:	4b0f      	ldr	r3, [pc, #60]	; (8000e48 <HAL_MspInit+0x44>)
 8000e0c:	699a      	ldr	r2, [r3, #24]
 8000e0e:	4b0e      	ldr	r3, [pc, #56]	; (8000e48 <HAL_MspInit+0x44>)
 8000e10:	2101      	movs	r1, #1
 8000e12:	430a      	orrs	r2, r1
 8000e14:	619a      	str	r2, [r3, #24]
 8000e16:	4b0c      	ldr	r3, [pc, #48]	; (8000e48 <HAL_MspInit+0x44>)
 8000e18:	699b      	ldr	r3, [r3, #24]
 8000e1a:	2201      	movs	r2, #1
 8000e1c:	4013      	ands	r3, r2
 8000e1e:	607b      	str	r3, [r7, #4]
 8000e20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e22:	4b09      	ldr	r3, [pc, #36]	; (8000e48 <HAL_MspInit+0x44>)
 8000e24:	69da      	ldr	r2, [r3, #28]
 8000e26:	4b08      	ldr	r3, [pc, #32]	; (8000e48 <HAL_MspInit+0x44>)
 8000e28:	2180      	movs	r1, #128	; 0x80
 8000e2a:	0549      	lsls	r1, r1, #21
 8000e2c:	430a      	orrs	r2, r1
 8000e2e:	61da      	str	r2, [r3, #28]
 8000e30:	4b05      	ldr	r3, [pc, #20]	; (8000e48 <HAL_MspInit+0x44>)
 8000e32:	69da      	ldr	r2, [r3, #28]
 8000e34:	2380      	movs	r3, #128	; 0x80
 8000e36:	055b      	lsls	r3, r3, #21
 8000e38:	4013      	ands	r3, r2
 8000e3a:	603b      	str	r3, [r7, #0]
 8000e3c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e3e:	46c0      	nop			; (mov r8, r8)
 8000e40:	46bd      	mov	sp, r7
 8000e42:	b002      	add	sp, #8
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	46c0      	nop			; (mov r8, r8)
 8000e48:	40021000 	.word	0x40021000

08000e4c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000e4c:	b590      	push	{r4, r7, lr}
 8000e4e:	b08b      	sub	sp, #44	; 0x2c
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e54:	2414      	movs	r4, #20
 8000e56:	193b      	adds	r3, r7, r4
 8000e58:	0018      	movs	r0, r3
 8000e5a:	2314      	movs	r3, #20
 8000e5c:	001a      	movs	r2, r3
 8000e5e:	2100      	movs	r1, #0
 8000e60:	f003 fb85 	bl	800456e <memset>
  if(hadc->Instance==ADC1)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4a2d      	ldr	r2, [pc, #180]	; (8000f20 <HAL_ADC_MspInit+0xd4>)
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d153      	bne.n	8000f16 <HAL_ADC_MspInit+0xca>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000e6e:	4b2d      	ldr	r3, [pc, #180]	; (8000f24 <HAL_ADC_MspInit+0xd8>)
 8000e70:	699a      	ldr	r2, [r3, #24]
 8000e72:	4b2c      	ldr	r3, [pc, #176]	; (8000f24 <HAL_ADC_MspInit+0xd8>)
 8000e74:	2180      	movs	r1, #128	; 0x80
 8000e76:	0089      	lsls	r1, r1, #2
 8000e78:	430a      	orrs	r2, r1
 8000e7a:	619a      	str	r2, [r3, #24]
 8000e7c:	4b29      	ldr	r3, [pc, #164]	; (8000f24 <HAL_ADC_MspInit+0xd8>)
 8000e7e:	699a      	ldr	r2, [r3, #24]
 8000e80:	2380      	movs	r3, #128	; 0x80
 8000e82:	009b      	lsls	r3, r3, #2
 8000e84:	4013      	ands	r3, r2
 8000e86:	613b      	str	r3, [r7, #16]
 8000e88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e8a:	4b26      	ldr	r3, [pc, #152]	; (8000f24 <HAL_ADC_MspInit+0xd8>)
 8000e8c:	695a      	ldr	r2, [r3, #20]
 8000e8e:	4b25      	ldr	r3, [pc, #148]	; (8000f24 <HAL_ADC_MspInit+0xd8>)
 8000e90:	2180      	movs	r1, #128	; 0x80
 8000e92:	02c9      	lsls	r1, r1, #11
 8000e94:	430a      	orrs	r2, r1
 8000e96:	615a      	str	r2, [r3, #20]
 8000e98:	4b22      	ldr	r3, [pc, #136]	; (8000f24 <HAL_ADC_MspInit+0xd8>)
 8000e9a:	695a      	ldr	r2, [r3, #20]
 8000e9c:	2380      	movs	r3, #128	; 0x80
 8000e9e:	02db      	lsls	r3, r3, #11
 8000ea0:	4013      	ands	r3, r2
 8000ea2:	60fb      	str	r3, [r7, #12]
 8000ea4:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PB0     ------> ADC_IN8
    */
    GPIO_InitStruct.Pin = ADC_VM_Pin;
 8000ea6:	193b      	adds	r3, r7, r4
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000eac:	193b      	adds	r3, r7, r4
 8000eae:	2203      	movs	r2, #3
 8000eb0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb2:	193b      	adds	r3, r7, r4
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(ADC_VM_GPIO_Port, &GPIO_InitStruct);
 8000eb8:	193b      	adds	r3, r7, r4
 8000eba:	4a1b      	ldr	r2, [pc, #108]	; (8000f28 <HAL_ADC_MspInit+0xdc>)
 8000ebc:	0019      	movs	r1, r3
 8000ebe:	0010      	movs	r0, r2
 8000ec0:	f000 fea0 	bl	8001c04 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 8000ec4:	4b19      	ldr	r3, [pc, #100]	; (8000f2c <HAL_ADC_MspInit+0xe0>)
 8000ec6:	4a1a      	ldr	r2, [pc, #104]	; (8000f30 <HAL_ADC_MspInit+0xe4>)
 8000ec8:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000eca:	4b18      	ldr	r3, [pc, #96]	; (8000f2c <HAL_ADC_MspInit+0xe0>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ed0:	4b16      	ldr	r3, [pc, #88]	; (8000f2c <HAL_ADC_MspInit+0xe0>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8000ed6:	4b15      	ldr	r3, [pc, #84]	; (8000f2c <HAL_ADC_MspInit+0xe0>)
 8000ed8:	2280      	movs	r2, #128	; 0x80
 8000eda:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000edc:	4b13      	ldr	r3, [pc, #76]	; (8000f2c <HAL_ADC_MspInit+0xe0>)
 8000ede:	2280      	movs	r2, #128	; 0x80
 8000ee0:	0052      	lsls	r2, r2, #1
 8000ee2:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000ee4:	4b11      	ldr	r3, [pc, #68]	; (8000f2c <HAL_ADC_MspInit+0xe0>)
 8000ee6:	2280      	movs	r2, #128	; 0x80
 8000ee8:	00d2      	lsls	r2, r2, #3
 8000eea:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_NORMAL;
 8000eec:	4b0f      	ldr	r3, [pc, #60]	; (8000f2c <HAL_ADC_MspInit+0xe0>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_HIGH;
 8000ef2:	4b0e      	ldr	r3, [pc, #56]	; (8000f2c <HAL_ADC_MspInit+0xe0>)
 8000ef4:	2280      	movs	r2, #128	; 0x80
 8000ef6:	0192      	lsls	r2, r2, #6
 8000ef8:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8000efa:	4b0c      	ldr	r3, [pc, #48]	; (8000f2c <HAL_ADC_MspInit+0xe0>)
 8000efc:	0018      	movs	r0, r3
 8000efe:	f000 fd7b 	bl	80019f8 <HAL_DMA_Init>
 8000f02:	1e03      	subs	r3, r0, #0
 8000f04:	d001      	beq.n	8000f0a <HAL_ADC_MspInit+0xbe>
    {
      Error_Handler();
 8000f06:	f7ff ff77 	bl	8000df8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	4a07      	ldr	r2, [pc, #28]	; (8000f2c <HAL_ADC_MspInit+0xe0>)
 8000f0e:	631a      	str	r2, [r3, #48]	; 0x30
 8000f10:	4b06      	ldr	r3, [pc, #24]	; (8000f2c <HAL_ADC_MspInit+0xe0>)
 8000f12:	687a      	ldr	r2, [r7, #4]
 8000f14:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000f16:	46c0      	nop			; (mov r8, r8)
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	b00b      	add	sp, #44	; 0x2c
 8000f1c:	bd90      	pop	{r4, r7, pc}
 8000f1e:	46c0      	nop			; (mov r8, r8)
 8000f20:	40012400 	.word	0x40012400
 8000f24:	40021000 	.word	0x40021000
 8000f28:	48000400 	.word	0x48000400
 8000f2c:	20000134 	.word	0x20000134
 8000f30:	40020008 	.word	0x40020008

08000f34 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f34:	b590      	push	{r4, r7, lr}
 8000f36:	b08b      	sub	sp, #44	; 0x2c
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f3c:	2414      	movs	r4, #20
 8000f3e:	193b      	adds	r3, r7, r4
 8000f40:	0018      	movs	r0, r3
 8000f42:	2314      	movs	r3, #20
 8000f44:	001a      	movs	r2, r3
 8000f46:	2100      	movs	r1, #0
 8000f48:	f003 fb11 	bl	800456e <memset>
  if(hi2c->Instance==I2C1)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	4a1c      	ldr	r2, [pc, #112]	; (8000fc4 <HAL_I2C_MspInit+0x90>)
 8000f52:	4293      	cmp	r3, r2
 8000f54:	d131      	bne.n	8000fba <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f56:	4b1c      	ldr	r3, [pc, #112]	; (8000fc8 <HAL_I2C_MspInit+0x94>)
 8000f58:	695a      	ldr	r2, [r3, #20]
 8000f5a:	4b1b      	ldr	r3, [pc, #108]	; (8000fc8 <HAL_I2C_MspInit+0x94>)
 8000f5c:	2180      	movs	r1, #128	; 0x80
 8000f5e:	02c9      	lsls	r1, r1, #11
 8000f60:	430a      	orrs	r2, r1
 8000f62:	615a      	str	r2, [r3, #20]
 8000f64:	4b18      	ldr	r3, [pc, #96]	; (8000fc8 <HAL_I2C_MspInit+0x94>)
 8000f66:	695a      	ldr	r2, [r3, #20]
 8000f68:	2380      	movs	r3, #128	; 0x80
 8000f6a:	02db      	lsls	r3, r3, #11
 8000f6c:	4013      	ands	r3, r2
 8000f6e:	613b      	str	r3, [r7, #16]
 8000f70:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000f72:	0021      	movs	r1, r4
 8000f74:	187b      	adds	r3, r7, r1
 8000f76:	22c0      	movs	r2, #192	; 0xc0
 8000f78:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f7a:	187b      	adds	r3, r7, r1
 8000f7c:	2212      	movs	r2, #18
 8000f7e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f80:	187b      	adds	r3, r7, r1
 8000f82:	2201      	movs	r2, #1
 8000f84:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f86:	187b      	adds	r3, r7, r1
 8000f88:	2203      	movs	r2, #3
 8000f8a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8000f8c:	187b      	adds	r3, r7, r1
 8000f8e:	2201      	movs	r2, #1
 8000f90:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f92:	187b      	adds	r3, r7, r1
 8000f94:	4a0d      	ldr	r2, [pc, #52]	; (8000fcc <HAL_I2C_MspInit+0x98>)
 8000f96:	0019      	movs	r1, r3
 8000f98:	0010      	movs	r0, r2
 8000f9a:	f000 fe33 	bl	8001c04 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f9e:	4b0a      	ldr	r3, [pc, #40]	; (8000fc8 <HAL_I2C_MspInit+0x94>)
 8000fa0:	69da      	ldr	r2, [r3, #28]
 8000fa2:	4b09      	ldr	r3, [pc, #36]	; (8000fc8 <HAL_I2C_MspInit+0x94>)
 8000fa4:	2180      	movs	r1, #128	; 0x80
 8000fa6:	0389      	lsls	r1, r1, #14
 8000fa8:	430a      	orrs	r2, r1
 8000faa:	61da      	str	r2, [r3, #28]
 8000fac:	4b06      	ldr	r3, [pc, #24]	; (8000fc8 <HAL_I2C_MspInit+0x94>)
 8000fae:	69da      	ldr	r2, [r3, #28]
 8000fb0:	2380      	movs	r3, #128	; 0x80
 8000fb2:	039b      	lsls	r3, r3, #14
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	60fb      	str	r3, [r7, #12]
 8000fb8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000fba:	46c0      	nop			; (mov r8, r8)
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	b00b      	add	sp, #44	; 0x2c
 8000fc0:	bd90      	pop	{r4, r7, pc}
 8000fc2:	46c0      	nop			; (mov r8, r8)
 8000fc4:	40005400 	.word	0x40005400
 8000fc8:	40021000 	.word	0x40021000
 8000fcc:	48000400 	.word	0x48000400

08000fd0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b086      	sub	sp, #24
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4a26      	ldr	r2, [pc, #152]	; (8001078 <HAL_TIM_Base_MspInit+0xa8>)
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d116      	bne.n	8001010 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000fe2:	4b26      	ldr	r3, [pc, #152]	; (800107c <HAL_TIM_Base_MspInit+0xac>)
 8000fe4:	699a      	ldr	r2, [r3, #24]
 8000fe6:	4b25      	ldr	r3, [pc, #148]	; (800107c <HAL_TIM_Base_MspInit+0xac>)
 8000fe8:	2180      	movs	r1, #128	; 0x80
 8000fea:	0109      	lsls	r1, r1, #4
 8000fec:	430a      	orrs	r2, r1
 8000fee:	619a      	str	r2, [r3, #24]
 8000ff0:	4b22      	ldr	r3, [pc, #136]	; (800107c <HAL_TIM_Base_MspInit+0xac>)
 8000ff2:	699a      	ldr	r2, [r3, #24]
 8000ff4:	2380      	movs	r3, #128	; 0x80
 8000ff6:	011b      	lsls	r3, r3, #4
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	617b      	str	r3, [r7, #20]
 8000ffc:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 8000ffe:	2200      	movs	r2, #0
 8001000:	2100      	movs	r1, #0
 8001002:	200d      	movs	r0, #13
 8001004:	f000 fcc6 	bl	8001994 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 8001008:	200d      	movs	r0, #13
 800100a:	f000 fcd8 	bl	80019be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 800100e:	e02e      	b.n	800106e <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM14)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a1a      	ldr	r2, [pc, #104]	; (8001080 <HAL_TIM_Base_MspInit+0xb0>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d116      	bne.n	8001048 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM14_CLK_ENABLE();
 800101a:	4b18      	ldr	r3, [pc, #96]	; (800107c <HAL_TIM_Base_MspInit+0xac>)
 800101c:	69da      	ldr	r2, [r3, #28]
 800101e:	4b17      	ldr	r3, [pc, #92]	; (800107c <HAL_TIM_Base_MspInit+0xac>)
 8001020:	2180      	movs	r1, #128	; 0x80
 8001022:	0049      	lsls	r1, r1, #1
 8001024:	430a      	orrs	r2, r1
 8001026:	61da      	str	r2, [r3, #28]
 8001028:	4b14      	ldr	r3, [pc, #80]	; (800107c <HAL_TIM_Base_MspInit+0xac>)
 800102a:	69da      	ldr	r2, [r3, #28]
 800102c:	2380      	movs	r3, #128	; 0x80
 800102e:	005b      	lsls	r3, r3, #1
 8001030:	4013      	ands	r3, r2
 8001032:	613b      	str	r3, [r7, #16]
 8001034:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 8001036:	2200      	movs	r2, #0
 8001038:	2100      	movs	r1, #0
 800103a:	2013      	movs	r0, #19
 800103c:	f000 fcaa 	bl	8001994 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8001040:	2013      	movs	r0, #19
 8001042:	f000 fcbc 	bl	80019be <HAL_NVIC_EnableIRQ>
}
 8001046:	e012      	b.n	800106e <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM16)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a0d      	ldr	r2, [pc, #52]	; (8001084 <HAL_TIM_Base_MspInit+0xb4>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d10d      	bne.n	800106e <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001052:	4b0a      	ldr	r3, [pc, #40]	; (800107c <HAL_TIM_Base_MspInit+0xac>)
 8001054:	699a      	ldr	r2, [r3, #24]
 8001056:	4b09      	ldr	r3, [pc, #36]	; (800107c <HAL_TIM_Base_MspInit+0xac>)
 8001058:	2180      	movs	r1, #128	; 0x80
 800105a:	0289      	lsls	r1, r1, #10
 800105c:	430a      	orrs	r2, r1
 800105e:	619a      	str	r2, [r3, #24]
 8001060:	4b06      	ldr	r3, [pc, #24]	; (800107c <HAL_TIM_Base_MspInit+0xac>)
 8001062:	699a      	ldr	r2, [r3, #24]
 8001064:	2380      	movs	r3, #128	; 0x80
 8001066:	029b      	lsls	r3, r3, #10
 8001068:	4013      	ands	r3, r2
 800106a:	60fb      	str	r3, [r7, #12]
 800106c:	68fb      	ldr	r3, [r7, #12]
}
 800106e:	46c0      	nop			; (mov r8, r8)
 8001070:	46bd      	mov	sp, r7
 8001072:	b006      	add	sp, #24
 8001074:	bd80      	pop	{r7, pc}
 8001076:	46c0      	nop			; (mov r8, r8)
 8001078:	40012c00 	.word	0x40012c00
 800107c:	40021000 	.word	0x40021000
 8001080:	40002000 	.word	0x40002000
 8001084:	40014400 	.word	0x40014400

08001088 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001088:	b590      	push	{r4, r7, lr}
 800108a:	b08b      	sub	sp, #44	; 0x2c
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001090:	2414      	movs	r4, #20
 8001092:	193b      	adds	r3, r7, r4
 8001094:	0018      	movs	r0, r3
 8001096:	2314      	movs	r3, #20
 8001098:	001a      	movs	r2, r3
 800109a:	2100      	movs	r1, #0
 800109c:	f003 fa67 	bl	800456e <memset>
  if(htim->Instance==TIM1)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4a2b      	ldr	r2, [pc, #172]	; (8001154 <HAL_TIM_MspPostInit+0xcc>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d126      	bne.n	80010f8 <HAL_TIM_MspPostInit+0x70>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010aa:	4b2b      	ldr	r3, [pc, #172]	; (8001158 <HAL_TIM_MspPostInit+0xd0>)
 80010ac:	695a      	ldr	r2, [r3, #20]
 80010ae:	4b2a      	ldr	r3, [pc, #168]	; (8001158 <HAL_TIM_MspPostInit+0xd0>)
 80010b0:	2180      	movs	r1, #128	; 0x80
 80010b2:	0289      	lsls	r1, r1, #10
 80010b4:	430a      	orrs	r2, r1
 80010b6:	615a      	str	r2, [r3, #20]
 80010b8:	4b27      	ldr	r3, [pc, #156]	; (8001158 <HAL_TIM_MspPostInit+0xd0>)
 80010ba:	695a      	ldr	r2, [r3, #20]
 80010bc:	2380      	movs	r3, #128	; 0x80
 80010be:	029b      	lsls	r3, r3, #10
 80010c0:	4013      	ands	r3, r2
 80010c2:	613b      	str	r3, [r7, #16]
 80010c4:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 80010c6:	193b      	adds	r3, r7, r4
 80010c8:	22e0      	movs	r2, #224	; 0xe0
 80010ca:	00d2      	lsls	r2, r2, #3
 80010cc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ce:	0021      	movs	r1, r4
 80010d0:	187b      	adds	r3, r7, r1
 80010d2:	2202      	movs	r2, #2
 80010d4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d6:	187b      	adds	r3, r7, r1
 80010d8:	2200      	movs	r2, #0
 80010da:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010dc:	187b      	adds	r3, r7, r1
 80010de:	2200      	movs	r2, #0
 80010e0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80010e2:	187b      	adds	r3, r7, r1
 80010e4:	2202      	movs	r2, #2
 80010e6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010e8:	187a      	adds	r2, r7, r1
 80010ea:	2390      	movs	r3, #144	; 0x90
 80010ec:	05db      	lsls	r3, r3, #23
 80010ee:	0011      	movs	r1, r2
 80010f0:	0018      	movs	r0, r3
 80010f2:	f000 fd87 	bl	8001c04 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 80010f6:	e029      	b.n	800114c <HAL_TIM_MspPostInit+0xc4>
  else if(htim->Instance==TIM16)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	4a17      	ldr	r2, [pc, #92]	; (800115c <HAL_TIM_MspPostInit+0xd4>)
 80010fe:	4293      	cmp	r3, r2
 8001100:	d124      	bne.n	800114c <HAL_TIM_MspPostInit+0xc4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001102:	4b15      	ldr	r3, [pc, #84]	; (8001158 <HAL_TIM_MspPostInit+0xd0>)
 8001104:	695a      	ldr	r2, [r3, #20]
 8001106:	4b14      	ldr	r3, [pc, #80]	; (8001158 <HAL_TIM_MspPostInit+0xd0>)
 8001108:	2180      	movs	r1, #128	; 0x80
 800110a:	02c9      	lsls	r1, r1, #11
 800110c:	430a      	orrs	r2, r1
 800110e:	615a      	str	r2, [r3, #20]
 8001110:	4b11      	ldr	r3, [pc, #68]	; (8001158 <HAL_TIM_MspPostInit+0xd0>)
 8001112:	695a      	ldr	r2, [r3, #20]
 8001114:	2380      	movs	r3, #128	; 0x80
 8001116:	02db      	lsls	r3, r3, #11
 8001118:	4013      	ands	r3, r2
 800111a:	60fb      	str	r3, [r7, #12]
 800111c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800111e:	2114      	movs	r1, #20
 8001120:	187b      	adds	r3, r7, r1
 8001122:	2280      	movs	r2, #128	; 0x80
 8001124:	0052      	lsls	r2, r2, #1
 8001126:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001128:	187b      	adds	r3, r7, r1
 800112a:	2202      	movs	r2, #2
 800112c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112e:	187b      	adds	r3, r7, r1
 8001130:	2200      	movs	r2, #0
 8001132:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001134:	187b      	adds	r3, r7, r1
 8001136:	2200      	movs	r2, #0
 8001138:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM16;
 800113a:	187b      	adds	r3, r7, r1
 800113c:	2202      	movs	r2, #2
 800113e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001140:	187b      	adds	r3, r7, r1
 8001142:	4a07      	ldr	r2, [pc, #28]	; (8001160 <HAL_TIM_MspPostInit+0xd8>)
 8001144:	0019      	movs	r1, r3
 8001146:	0010      	movs	r0, r2
 8001148:	f000 fd5c 	bl	8001c04 <HAL_GPIO_Init>
}
 800114c:	46c0      	nop			; (mov r8, r8)
 800114e:	46bd      	mov	sp, r7
 8001150:	b00b      	add	sp, #44	; 0x2c
 8001152:	bd90      	pop	{r4, r7, pc}
 8001154:	40012c00 	.word	0x40012c00
 8001158:	40021000 	.word	0x40021000
 800115c:	40014400 	.word	0x40014400
 8001160:	48000400 	.word	0x48000400

08001164 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8001168:	f002 f836 	bl	80031d8 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800116c:	46c0      	nop			; (mov r8, r8)
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}

08001172 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001172:	b580      	push	{r7, lr}
 8001174:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001176:	e7fe      	b.n	8001176 <HardFault_Handler+0x4>

08001178 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800117c:	46c0      	nop			; (mov r8, r8)
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}

08001182 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001182:	b580      	push	{r7, lr}
 8001184:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001186:	46c0      	nop			; (mov r8, r8)
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}

0800118c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001190:	f000 f8c6 	bl	8001320 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001194:	46c0      	nop			; (mov r8, r8)
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
	...

0800119c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 80011a0:	4b03      	ldr	r3, [pc, #12]	; (80011b0 <DMA1_Channel1_IRQHandler+0x14>)
 80011a2:	0018      	movs	r0, r3
 80011a4:	f000 fc70 	bl	8001a88 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80011a8:	46c0      	nop			; (mov r8, r8)
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	46c0      	nop			; (mov r8, r8)
 80011b0:	20000134 	.word	0x20000134

080011b4 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	af00      	add	r7, sp, #0
	//g_value.Vq = pi_control(&g_pi_val, g_posi_arr[0]);
	//g_value.Vd = 0;
	//dq2uvw(&g_value, g_posi_arr[0]);
	//Set_inverter(g_value, htim1.Init.Period);
  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80011b8:	4b03      	ldr	r3, [pc, #12]	; (80011c8 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 80011ba:	0018      	movs	r0, r3
 80011bc:	f002 faf8 	bl	80037b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 80011c0:	46c0      	nop			; (mov r8, r8)
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	46c0      	nop			; (mov r8, r8)
 80011c8:	200000a4 	.word	0x200000a4

080011cc <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */
	g_tim14_cnt++;
 80011d0:	4b08      	ldr	r3, [pc, #32]	; (80011f4 <TIM14_IRQHandler+0x28>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	1c5a      	adds	r2, r3, #1
 80011d6:	4b07      	ldr	r3, [pc, #28]	; (80011f4 <TIM14_IRQHandler+0x28>)
 80011d8:	601a      	str	r2, [r3, #0]
	g_dSW_cnt++;
 80011da:	4b07      	ldr	r3, [pc, #28]	; (80011f8 <TIM14_IRQHandler+0x2c>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	1c5a      	adds	r2, r3, #1
 80011e0:	4b05      	ldr	r3, [pc, #20]	; (80011f8 <TIM14_IRQHandler+0x2c>)
 80011e2:	601a      	str	r2, [r3, #0]
  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 80011e4:	4b05      	ldr	r3, [pc, #20]	; (80011fc <TIM14_IRQHandler+0x30>)
 80011e6:	0018      	movs	r0, r3
 80011e8:	f002 fae2 	bl	80037b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 80011ec:	46c0      	nop			; (mov r8, r8)
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	46c0      	nop			; (mov r8, r8)
 80011f4:	2000002c 	.word	0x2000002c
 80011f8:	20000056 	.word	0x20000056
 80011fc:	200000ec 	.word	0x200000ec

08001200 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001204:	46c0      	nop			; (mov r8, r8)
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
	...

0800120c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800120c:	4813      	ldr	r0, [pc, #76]	; (800125c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800120e:	4685      	mov	sp, r0

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 8001210:	4813      	ldr	r0, [pc, #76]	; (8001260 <LoopForever+0x6>)
    LDR R1, [R0]
 8001212:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8001214:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8001216:	4a13      	ldr	r2, [pc, #76]	; (8001264 <LoopForever+0xa>)
    CMP R1, R2
 8001218:	4291      	cmp	r1, r2
    BNE ApplicationStart
 800121a:	d105      	bne.n	8001228 <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 800121c:	4812      	ldr	r0, [pc, #72]	; (8001268 <LoopForever+0xe>)
    LDR R1,=0x00000001
 800121e:	4913      	ldr	r1, [pc, #76]	; (800126c <LoopForever+0x12>)
    STR R1, [R0]
 8001220:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8001222:	4813      	ldr	r0, [pc, #76]	; (8001270 <LoopForever+0x16>)
    LDR R1,=0x00000000
 8001224:	4913      	ldr	r1, [pc, #76]	; (8001274 <LoopForever+0x1a>)
    STR R1, [R0]
 8001226:	6001      	str	r1, [r0, #0]

08001228 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001228:	4813      	ldr	r0, [pc, #76]	; (8001278 <LoopForever+0x1e>)
  ldr r1, =_edata
 800122a:	4914      	ldr	r1, [pc, #80]	; (800127c <LoopForever+0x22>)
  ldr r2, =_sidata
 800122c:	4a14      	ldr	r2, [pc, #80]	; (8001280 <LoopForever+0x26>)
  movs r3, #0
 800122e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001230:	e002      	b.n	8001238 <LoopCopyDataInit>

08001232 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001232:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001234:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001236:	3304      	adds	r3, #4

08001238 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001238:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800123a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800123c:	d3f9      	bcc.n	8001232 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800123e:	4a11      	ldr	r2, [pc, #68]	; (8001284 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8001240:	4c11      	ldr	r4, [pc, #68]	; (8001288 <LoopForever+0x2e>)
  movs r3, #0
 8001242:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001244:	e001      	b.n	800124a <LoopFillZerobss>

08001246 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001246:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001248:	3204      	adds	r2, #4

0800124a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800124a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800124c:	d3fb      	bcc.n	8001246 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800124e:	f7ff ffd7 	bl	8001200 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8001252:	f003 f95f 	bl	8004514 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001256:	f7ff fa15 	bl	8000684 <main>

0800125a <LoopForever>:

LoopForever:
    b LoopForever
 800125a:	e7fe      	b.n	800125a <LoopForever>
  ldr   r0, =_estack
 800125c:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 8001260:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8001264:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 8001268:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 800126c:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8001270:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8001274:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8001278:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800127c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001280:	080045d0 	.word	0x080045d0
  ldr r2, =_sbss
 8001284:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001288:	20000204 	.word	0x20000204

0800128c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800128c:	e7fe      	b.n	800128c <ADC1_IRQHandler>
	...

08001290 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001294:	4b07      	ldr	r3, [pc, #28]	; (80012b4 <HAL_Init+0x24>)
 8001296:	681a      	ldr	r2, [r3, #0]
 8001298:	4b06      	ldr	r3, [pc, #24]	; (80012b4 <HAL_Init+0x24>)
 800129a:	2110      	movs	r1, #16
 800129c:	430a      	orrs	r2, r1
 800129e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80012a0:	2000      	movs	r0, #0
 80012a2:	f000 f809 	bl	80012b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012a6:	f7ff fdad 	bl	8000e04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012aa:	2300      	movs	r3, #0
}
 80012ac:	0018      	movs	r0, r3
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	46c0      	nop			; (mov r8, r8)
 80012b4:	40022000 	.word	0x40022000

080012b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012b8:	b590      	push	{r4, r7, lr}
 80012ba:	b083      	sub	sp, #12
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012c0:	4b14      	ldr	r3, [pc, #80]	; (8001314 <HAL_InitTick+0x5c>)
 80012c2:	681c      	ldr	r4, [r3, #0]
 80012c4:	4b14      	ldr	r3, [pc, #80]	; (8001318 <HAL_InitTick+0x60>)
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	0019      	movs	r1, r3
 80012ca:	23fa      	movs	r3, #250	; 0xfa
 80012cc:	0098      	lsls	r0, r3, #2
 80012ce:	f7fe ff1b 	bl	8000108 <__udivsi3>
 80012d2:	0003      	movs	r3, r0
 80012d4:	0019      	movs	r1, r3
 80012d6:	0020      	movs	r0, r4
 80012d8:	f7fe ff16 	bl	8000108 <__udivsi3>
 80012dc:	0003      	movs	r3, r0
 80012de:	0018      	movs	r0, r3
 80012e0:	f000 fb7d 	bl	80019de <HAL_SYSTICK_Config>
 80012e4:	1e03      	subs	r3, r0, #0
 80012e6:	d001      	beq.n	80012ec <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80012e8:	2301      	movs	r3, #1
 80012ea:	e00f      	b.n	800130c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	2b03      	cmp	r3, #3
 80012f0:	d80b      	bhi.n	800130a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012f2:	6879      	ldr	r1, [r7, #4]
 80012f4:	2301      	movs	r3, #1
 80012f6:	425b      	negs	r3, r3
 80012f8:	2200      	movs	r2, #0
 80012fa:	0018      	movs	r0, r3
 80012fc:	f000 fb4a 	bl	8001994 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001300:	4b06      	ldr	r3, [pc, #24]	; (800131c <HAL_InitTick+0x64>)
 8001302:	687a      	ldr	r2, [r7, #4]
 8001304:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8001306:	2300      	movs	r3, #0
 8001308:	e000      	b.n	800130c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800130a:	2301      	movs	r3, #1
}
 800130c:	0018      	movs	r0, r3
 800130e:	46bd      	mov	sp, r7
 8001310:	b003      	add	sp, #12
 8001312:	bd90      	pop	{r4, r7, pc}
 8001314:	20000004 	.word	0x20000004
 8001318:	2000000c 	.word	0x2000000c
 800131c:	20000008 	.word	0x20000008

08001320 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001324:	4b05      	ldr	r3, [pc, #20]	; (800133c <HAL_IncTick+0x1c>)
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	001a      	movs	r2, r3
 800132a:	4b05      	ldr	r3, [pc, #20]	; (8001340 <HAL_IncTick+0x20>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	18d2      	adds	r2, r2, r3
 8001330:	4b03      	ldr	r3, [pc, #12]	; (8001340 <HAL_IncTick+0x20>)
 8001332:	601a      	str	r2, [r3, #0]
}
 8001334:	46c0      	nop			; (mov r8, r8)
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	46c0      	nop			; (mov r8, r8)
 800133c:	2000000c 	.word	0x2000000c
 8001340:	20000200 	.word	0x20000200

08001344 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0
  return uwTick;
 8001348:	4b02      	ldr	r3, [pc, #8]	; (8001354 <HAL_GetTick+0x10>)
 800134a:	681b      	ldr	r3, [r3, #0]
}
 800134c:	0018      	movs	r0, r3
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	46c0      	nop			; (mov r8, r8)
 8001354:	20000200 	.word	0x20000200

08001358 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b084      	sub	sp, #16
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001360:	f7ff fff0 	bl	8001344 <HAL_GetTick>
 8001364:	0003      	movs	r3, r0
 8001366:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	3301      	adds	r3, #1
 8001370:	d005      	beq.n	800137e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001372:	4b0a      	ldr	r3, [pc, #40]	; (800139c <HAL_Delay+0x44>)
 8001374:	781b      	ldrb	r3, [r3, #0]
 8001376:	001a      	movs	r2, r3
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	189b      	adds	r3, r3, r2
 800137c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800137e:	46c0      	nop			; (mov r8, r8)
 8001380:	f7ff ffe0 	bl	8001344 <HAL_GetTick>
 8001384:	0002      	movs	r2, r0
 8001386:	68bb      	ldr	r3, [r7, #8]
 8001388:	1ad3      	subs	r3, r2, r3
 800138a:	68fa      	ldr	r2, [r7, #12]
 800138c:	429a      	cmp	r2, r3
 800138e:	d8f7      	bhi.n	8001380 <HAL_Delay+0x28>
  {
  }
}
 8001390:	46c0      	nop			; (mov r8, r8)
 8001392:	46c0      	nop			; (mov r8, r8)
 8001394:	46bd      	mov	sp, r7
 8001396:	b004      	add	sp, #16
 8001398:	bd80      	pop	{r7, pc}
 800139a:	46c0      	nop			; (mov r8, r8)
 800139c:	2000000c 	.word	0x2000000c

080013a0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b084      	sub	sp, #16
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013a8:	230f      	movs	r3, #15
 80013aa:	18fb      	adds	r3, r7, r3
 80013ac:	2200      	movs	r2, #0
 80013ae:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 80013b0:	2300      	movs	r3, #0
 80013b2:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d101      	bne.n	80013be <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 80013ba:	2301      	movs	r3, #1
 80013bc:	e125      	b.n	800160a <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d10a      	bne.n	80013dc <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	2200      	movs	r2, #0
 80013ca:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2234      	movs	r2, #52	; 0x34
 80013d0:	2100      	movs	r1, #0
 80013d2:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	0018      	movs	r0, r3
 80013d8:	f7ff fd38 	bl	8000e4c <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013e0:	2210      	movs	r2, #16
 80013e2:	4013      	ands	r3, r2
 80013e4:	d000      	beq.n	80013e8 <HAL_ADC_Init+0x48>
 80013e6:	e103      	b.n	80015f0 <HAL_ADC_Init+0x250>
 80013e8:	230f      	movs	r3, #15
 80013ea:	18fb      	adds	r3, r7, r3
 80013ec:	781b      	ldrb	r3, [r3, #0]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d000      	beq.n	80013f4 <HAL_ADC_Init+0x54>
 80013f2:	e0fd      	b.n	80015f0 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	689b      	ldr	r3, [r3, #8]
 80013fa:	2204      	movs	r2, #4
 80013fc:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 80013fe:	d000      	beq.n	8001402 <HAL_ADC_Init+0x62>
 8001400:	e0f6      	b.n	80015f0 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001406:	4a83      	ldr	r2, [pc, #524]	; (8001614 <HAL_ADC_Init+0x274>)
 8001408:	4013      	ands	r3, r2
 800140a:	2202      	movs	r2, #2
 800140c:	431a      	orrs	r2, r3
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	689b      	ldr	r3, [r3, #8]
 8001418:	2203      	movs	r2, #3
 800141a:	4013      	ands	r3, r2
 800141c:	2b01      	cmp	r3, #1
 800141e:	d112      	bne.n	8001446 <HAL_ADC_Init+0xa6>
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	2201      	movs	r2, #1
 8001428:	4013      	ands	r3, r2
 800142a:	2b01      	cmp	r3, #1
 800142c:	d009      	beq.n	8001442 <HAL_ADC_Init+0xa2>
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	68da      	ldr	r2, [r3, #12]
 8001434:	2380      	movs	r3, #128	; 0x80
 8001436:	021b      	lsls	r3, r3, #8
 8001438:	401a      	ands	r2, r3
 800143a:	2380      	movs	r3, #128	; 0x80
 800143c:	021b      	lsls	r3, r3, #8
 800143e:	429a      	cmp	r2, r3
 8001440:	d101      	bne.n	8001446 <HAL_ADC_Init+0xa6>
 8001442:	2301      	movs	r3, #1
 8001444:	e000      	b.n	8001448 <HAL_ADC_Init+0xa8>
 8001446:	2300      	movs	r3, #0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d116      	bne.n	800147a <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	68db      	ldr	r3, [r3, #12]
 8001452:	2218      	movs	r2, #24
 8001454:	4393      	bics	r3, r2
 8001456:	0019      	movs	r1, r3
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	689a      	ldr	r2, [r3, #8]
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	430a      	orrs	r2, r1
 8001462:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	691b      	ldr	r3, [r3, #16]
 800146a:	009b      	lsls	r3, r3, #2
 800146c:	0899      	lsrs	r1, r3, #2
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	685a      	ldr	r2, [r3, #4]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	430a      	orrs	r2, r1
 8001478:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	68da      	ldr	r2, [r3, #12]
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4964      	ldr	r1, [pc, #400]	; (8001618 <HAL_ADC_Init+0x278>)
 8001486:	400a      	ands	r2, r1
 8001488:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	7e1b      	ldrb	r3, [r3, #24]
 800148e:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	7e5b      	ldrb	r3, [r3, #25]
 8001494:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001496:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	7e9b      	ldrb	r3, [r3, #26]
 800149c:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 800149e:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014a4:	2b01      	cmp	r3, #1
 80014a6:	d002      	beq.n	80014ae <HAL_ADC_Init+0x10e>
 80014a8:	2380      	movs	r3, #128	; 0x80
 80014aa:	015b      	lsls	r3, r3, #5
 80014ac:	e000      	b.n	80014b0 <HAL_ADC_Init+0x110>
 80014ae:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80014b0:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80014b6:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	691b      	ldr	r3, [r3, #16]
 80014bc:	2b02      	cmp	r3, #2
 80014be:	d101      	bne.n	80014c4 <HAL_ADC_Init+0x124>
 80014c0:	2304      	movs	r3, #4
 80014c2:	e000      	b.n	80014c6 <HAL_ADC_Init+0x126>
 80014c4:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 80014c6:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2124      	movs	r1, #36	; 0x24
 80014cc:	5c5b      	ldrb	r3, [r3, r1]
 80014ce:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80014d0:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80014d2:	68ba      	ldr	r2, [r7, #8]
 80014d4:	4313      	orrs	r3, r2
 80014d6:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	7edb      	ldrb	r3, [r3, #27]
 80014dc:	2b01      	cmp	r3, #1
 80014de:	d115      	bne.n	800150c <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	7e9b      	ldrb	r3, [r3, #26]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d105      	bne.n	80014f4 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80014e8:	68bb      	ldr	r3, [r7, #8]
 80014ea:	2280      	movs	r2, #128	; 0x80
 80014ec:	0252      	lsls	r2, r2, #9
 80014ee:	4313      	orrs	r3, r2
 80014f0:	60bb      	str	r3, [r7, #8]
 80014f2:	e00b      	b.n	800150c <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014f8:	2220      	movs	r2, #32
 80014fa:	431a      	orrs	r2, r3
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001504:	2201      	movs	r2, #1
 8001506:	431a      	orrs	r2, r3
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	69da      	ldr	r2, [r3, #28]
 8001510:	23c2      	movs	r3, #194	; 0xc2
 8001512:	33ff      	adds	r3, #255	; 0xff
 8001514:	429a      	cmp	r2, r3
 8001516:	d007      	beq.n	8001528 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8001520:	4313      	orrs	r3, r2
 8001522:	68ba      	ldr	r2, [r7, #8]
 8001524:	4313      	orrs	r3, r2
 8001526:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	68d9      	ldr	r1, [r3, #12]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	68ba      	ldr	r2, [r7, #8]
 8001534:	430a      	orrs	r2, r1
 8001536:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800153c:	2380      	movs	r3, #128	; 0x80
 800153e:	055b      	lsls	r3, r3, #21
 8001540:	429a      	cmp	r2, r3
 8001542:	d01b      	beq.n	800157c <HAL_ADC_Init+0x1dc>
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001548:	2b01      	cmp	r3, #1
 800154a:	d017      	beq.n	800157c <HAL_ADC_Init+0x1dc>
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001550:	2b02      	cmp	r3, #2
 8001552:	d013      	beq.n	800157c <HAL_ADC_Init+0x1dc>
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001558:	2b03      	cmp	r3, #3
 800155a:	d00f      	beq.n	800157c <HAL_ADC_Init+0x1dc>
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001560:	2b04      	cmp	r3, #4
 8001562:	d00b      	beq.n	800157c <HAL_ADC_Init+0x1dc>
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001568:	2b05      	cmp	r3, #5
 800156a:	d007      	beq.n	800157c <HAL_ADC_Init+0x1dc>
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001570:	2b06      	cmp	r3, #6
 8001572:	d003      	beq.n	800157c <HAL_ADC_Init+0x1dc>
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001578:	2b07      	cmp	r3, #7
 800157a:	d112      	bne.n	80015a2 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	695a      	ldr	r2, [r3, #20]
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	2107      	movs	r1, #7
 8001588:	438a      	bics	r2, r1
 800158a:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	6959      	ldr	r1, [r3, #20]
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001596:	2207      	movs	r2, #7
 8001598:	401a      	ands	r2, r3
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	430a      	orrs	r2, r1
 80015a0:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	68db      	ldr	r3, [r3, #12]
 80015a8:	4a1c      	ldr	r2, [pc, #112]	; (800161c <HAL_ADC_Init+0x27c>)
 80015aa:	4013      	ands	r3, r2
 80015ac:	68ba      	ldr	r2, [r7, #8]
 80015ae:	429a      	cmp	r2, r3
 80015b0:	d10b      	bne.n	80015ca <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2200      	movs	r2, #0
 80015b6:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015bc:	2203      	movs	r2, #3
 80015be:	4393      	bics	r3, r2
 80015c0:	2201      	movs	r2, #1
 80015c2:	431a      	orrs	r2, r3
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80015c8:	e01c      	b.n	8001604 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015ce:	2212      	movs	r2, #18
 80015d0:	4393      	bics	r3, r2
 80015d2:	2210      	movs	r2, #16
 80015d4:	431a      	orrs	r2, r3
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015de:	2201      	movs	r2, #1
 80015e0:	431a      	orrs	r2, r3
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 80015e6:	230f      	movs	r3, #15
 80015e8:	18fb      	adds	r3, r7, r3
 80015ea:	2201      	movs	r2, #1
 80015ec:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80015ee:	e009      	b.n	8001604 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015f4:	2210      	movs	r2, #16
 80015f6:	431a      	orrs	r2, r3
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 80015fc:	230f      	movs	r3, #15
 80015fe:	18fb      	adds	r3, r7, r3
 8001600:	2201      	movs	r2, #1
 8001602:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001604:	230f      	movs	r3, #15
 8001606:	18fb      	adds	r3, r7, r3
 8001608:	781b      	ldrb	r3, [r3, #0]
}
 800160a:	0018      	movs	r0, r3
 800160c:	46bd      	mov	sp, r7
 800160e:	b004      	add	sp, #16
 8001610:	bd80      	pop	{r7, pc}
 8001612:	46c0      	nop			; (mov r8, r8)
 8001614:	fffffefd 	.word	0xfffffefd
 8001618:	fffe0219 	.word	0xfffe0219
 800161c:	833fffe7 	.word	0x833fffe7

08001620 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b084      	sub	sp, #16
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
 8001628:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800162a:	230f      	movs	r3, #15
 800162c:	18fb      	adds	r3, r7, r3
 800162e:	2200      	movs	r2, #0
 8001630:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8001632:	2300      	movs	r3, #0
 8001634:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800163a:	2380      	movs	r3, #128	; 0x80
 800163c:	055b      	lsls	r3, r3, #21
 800163e:	429a      	cmp	r2, r3
 8001640:	d011      	beq.n	8001666 <HAL_ADC_ConfigChannel+0x46>
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001646:	2b01      	cmp	r3, #1
 8001648:	d00d      	beq.n	8001666 <HAL_ADC_ConfigChannel+0x46>
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800164e:	2b02      	cmp	r3, #2
 8001650:	d009      	beq.n	8001666 <HAL_ADC_ConfigChannel+0x46>
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001656:	2b03      	cmp	r3, #3
 8001658:	d005      	beq.n	8001666 <HAL_ADC_ConfigChannel+0x46>
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800165e:	2b04      	cmp	r3, #4
 8001660:	d001      	beq.n	8001666 <HAL_ADC_ConfigChannel+0x46>
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2234      	movs	r2, #52	; 0x34
 800166a:	5c9b      	ldrb	r3, [r3, r2]
 800166c:	2b01      	cmp	r3, #1
 800166e:	d101      	bne.n	8001674 <HAL_ADC_ConfigChannel+0x54>
 8001670:	2302      	movs	r3, #2
 8001672:	e0d0      	b.n	8001816 <HAL_ADC_ConfigChannel+0x1f6>
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2234      	movs	r2, #52	; 0x34
 8001678:	2101      	movs	r1, #1
 800167a:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	689b      	ldr	r3, [r3, #8]
 8001682:	2204      	movs	r2, #4
 8001684:	4013      	ands	r3, r2
 8001686:	d000      	beq.n	800168a <HAL_ADC_ConfigChannel+0x6a>
 8001688:	e0b4      	b.n	80017f4 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	4a64      	ldr	r2, [pc, #400]	; (8001820 <HAL_ADC_ConfigChannel+0x200>)
 8001690:	4293      	cmp	r3, r2
 8001692:	d100      	bne.n	8001696 <HAL_ADC_ConfigChannel+0x76>
 8001694:	e082      	b.n	800179c <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	2201      	movs	r2, #1
 80016a2:	409a      	lsls	r2, r3
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	430a      	orrs	r2, r1
 80016aa:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016b0:	2380      	movs	r3, #128	; 0x80
 80016b2:	055b      	lsls	r3, r3, #21
 80016b4:	429a      	cmp	r2, r3
 80016b6:	d037      	beq.n	8001728 <HAL_ADC_ConfigChannel+0x108>
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016bc:	2b01      	cmp	r3, #1
 80016be:	d033      	beq.n	8001728 <HAL_ADC_ConfigChannel+0x108>
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016c4:	2b02      	cmp	r3, #2
 80016c6:	d02f      	beq.n	8001728 <HAL_ADC_ConfigChannel+0x108>
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016cc:	2b03      	cmp	r3, #3
 80016ce:	d02b      	beq.n	8001728 <HAL_ADC_ConfigChannel+0x108>
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016d4:	2b04      	cmp	r3, #4
 80016d6:	d027      	beq.n	8001728 <HAL_ADC_ConfigChannel+0x108>
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016dc:	2b05      	cmp	r3, #5
 80016de:	d023      	beq.n	8001728 <HAL_ADC_ConfigChannel+0x108>
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016e4:	2b06      	cmp	r3, #6
 80016e6:	d01f      	beq.n	8001728 <HAL_ADC_ConfigChannel+0x108>
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016ec:	2b07      	cmp	r3, #7
 80016ee:	d01b      	beq.n	8001728 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	689a      	ldr	r2, [r3, #8]
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	695b      	ldr	r3, [r3, #20]
 80016fa:	2107      	movs	r1, #7
 80016fc:	400b      	ands	r3, r1
 80016fe:	429a      	cmp	r2, r3
 8001700:	d012      	beq.n	8001728 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	695a      	ldr	r2, [r3, #20]
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	2107      	movs	r1, #7
 800170e:	438a      	bics	r2, r1
 8001710:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	6959      	ldr	r1, [r3, #20]
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	689b      	ldr	r3, [r3, #8]
 800171c:	2207      	movs	r2, #7
 800171e:	401a      	ands	r2, r3
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	430a      	orrs	r2, r1
 8001726:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	2b10      	cmp	r3, #16
 800172e:	d007      	beq.n	8001740 <HAL_ADC_ConfigChannel+0x120>
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	2b11      	cmp	r3, #17
 8001736:	d003      	beq.n	8001740 <HAL_ADC_ConfigChannel+0x120>
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	2b12      	cmp	r3, #18
 800173e:	d163      	bne.n	8001808 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001740:	4b38      	ldr	r3, [pc, #224]	; (8001824 <HAL_ADC_ConfigChannel+0x204>)
 8001742:	6819      	ldr	r1, [r3, #0]
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	2b10      	cmp	r3, #16
 800174a:	d009      	beq.n	8001760 <HAL_ADC_ConfigChannel+0x140>
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	2b11      	cmp	r3, #17
 8001752:	d102      	bne.n	800175a <HAL_ADC_ConfigChannel+0x13a>
 8001754:	2380      	movs	r3, #128	; 0x80
 8001756:	03db      	lsls	r3, r3, #15
 8001758:	e004      	b.n	8001764 <HAL_ADC_ConfigChannel+0x144>
 800175a:	2380      	movs	r3, #128	; 0x80
 800175c:	045b      	lsls	r3, r3, #17
 800175e:	e001      	b.n	8001764 <HAL_ADC_ConfigChannel+0x144>
 8001760:	2380      	movs	r3, #128	; 0x80
 8001762:	041b      	lsls	r3, r3, #16
 8001764:	4a2f      	ldr	r2, [pc, #188]	; (8001824 <HAL_ADC_ConfigChannel+0x204>)
 8001766:	430b      	orrs	r3, r1
 8001768:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	2b10      	cmp	r3, #16
 8001770:	d14a      	bne.n	8001808 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001772:	4b2d      	ldr	r3, [pc, #180]	; (8001828 <HAL_ADC_ConfigChannel+0x208>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	492d      	ldr	r1, [pc, #180]	; (800182c <HAL_ADC_ConfigChannel+0x20c>)
 8001778:	0018      	movs	r0, r3
 800177a:	f7fe fcc5 	bl	8000108 <__udivsi3>
 800177e:	0003      	movs	r3, r0
 8001780:	001a      	movs	r2, r3
 8001782:	0013      	movs	r3, r2
 8001784:	009b      	lsls	r3, r3, #2
 8001786:	189b      	adds	r3, r3, r2
 8001788:	005b      	lsls	r3, r3, #1
 800178a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800178c:	e002      	b.n	8001794 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 800178e:	68bb      	ldr	r3, [r7, #8]
 8001790:	3b01      	subs	r3, #1
 8001792:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001794:	68bb      	ldr	r3, [r7, #8]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d1f9      	bne.n	800178e <HAL_ADC_ConfigChannel+0x16e>
 800179a:	e035      	b.n	8001808 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	2101      	movs	r1, #1
 80017a8:	4099      	lsls	r1, r3
 80017aa:	000b      	movs	r3, r1
 80017ac:	43d9      	mvns	r1, r3
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	400a      	ands	r2, r1
 80017b4:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	2b10      	cmp	r3, #16
 80017bc:	d007      	beq.n	80017ce <HAL_ADC_ConfigChannel+0x1ae>
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	2b11      	cmp	r3, #17
 80017c4:	d003      	beq.n	80017ce <HAL_ADC_ConfigChannel+0x1ae>
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	2b12      	cmp	r3, #18
 80017cc:	d11c      	bne.n	8001808 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80017ce:	4b15      	ldr	r3, [pc, #84]	; (8001824 <HAL_ADC_ConfigChannel+0x204>)
 80017d0:	6819      	ldr	r1, [r3, #0]
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	2b10      	cmp	r3, #16
 80017d8:	d007      	beq.n	80017ea <HAL_ADC_ConfigChannel+0x1ca>
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	2b11      	cmp	r3, #17
 80017e0:	d101      	bne.n	80017e6 <HAL_ADC_ConfigChannel+0x1c6>
 80017e2:	4b13      	ldr	r3, [pc, #76]	; (8001830 <HAL_ADC_ConfigChannel+0x210>)
 80017e4:	e002      	b.n	80017ec <HAL_ADC_ConfigChannel+0x1cc>
 80017e6:	4b13      	ldr	r3, [pc, #76]	; (8001834 <HAL_ADC_ConfigChannel+0x214>)
 80017e8:	e000      	b.n	80017ec <HAL_ADC_ConfigChannel+0x1cc>
 80017ea:	4b13      	ldr	r3, [pc, #76]	; (8001838 <HAL_ADC_ConfigChannel+0x218>)
 80017ec:	4a0d      	ldr	r2, [pc, #52]	; (8001824 <HAL_ADC_ConfigChannel+0x204>)
 80017ee:	400b      	ands	r3, r1
 80017f0:	6013      	str	r3, [r2, #0]
 80017f2:	e009      	b.n	8001808 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017f8:	2220      	movs	r2, #32
 80017fa:	431a      	orrs	r2, r3
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8001800:	230f      	movs	r3, #15
 8001802:	18fb      	adds	r3, r7, r3
 8001804:	2201      	movs	r2, #1
 8001806:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2234      	movs	r2, #52	; 0x34
 800180c:	2100      	movs	r1, #0
 800180e:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8001810:	230f      	movs	r3, #15
 8001812:	18fb      	adds	r3, r7, r3
 8001814:	781b      	ldrb	r3, [r3, #0]
}
 8001816:	0018      	movs	r0, r3
 8001818:	46bd      	mov	sp, r7
 800181a:	b004      	add	sp, #16
 800181c:	bd80      	pop	{r7, pc}
 800181e:	46c0      	nop			; (mov r8, r8)
 8001820:	00001001 	.word	0x00001001
 8001824:	40012708 	.word	0x40012708
 8001828:	20000004 	.word	0x20000004
 800182c:	000f4240 	.word	0x000f4240
 8001830:	ffbfffff 	.word	0xffbfffff
 8001834:	feffffff 	.word	0xfeffffff
 8001838:	ff7fffff 	.word	0xff7fffff

0800183c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b082      	sub	sp, #8
 8001840:	af00      	add	r7, sp, #0
 8001842:	0002      	movs	r2, r0
 8001844:	1dfb      	adds	r3, r7, #7
 8001846:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001848:	1dfb      	adds	r3, r7, #7
 800184a:	781b      	ldrb	r3, [r3, #0]
 800184c:	2b7f      	cmp	r3, #127	; 0x7f
 800184e:	d809      	bhi.n	8001864 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001850:	1dfb      	adds	r3, r7, #7
 8001852:	781b      	ldrb	r3, [r3, #0]
 8001854:	001a      	movs	r2, r3
 8001856:	231f      	movs	r3, #31
 8001858:	401a      	ands	r2, r3
 800185a:	4b04      	ldr	r3, [pc, #16]	; (800186c <__NVIC_EnableIRQ+0x30>)
 800185c:	2101      	movs	r1, #1
 800185e:	4091      	lsls	r1, r2
 8001860:	000a      	movs	r2, r1
 8001862:	601a      	str	r2, [r3, #0]
  }
}
 8001864:	46c0      	nop			; (mov r8, r8)
 8001866:	46bd      	mov	sp, r7
 8001868:	b002      	add	sp, #8
 800186a:	bd80      	pop	{r7, pc}
 800186c:	e000e100 	.word	0xe000e100

08001870 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001870:	b590      	push	{r4, r7, lr}
 8001872:	b083      	sub	sp, #12
 8001874:	af00      	add	r7, sp, #0
 8001876:	0002      	movs	r2, r0
 8001878:	6039      	str	r1, [r7, #0]
 800187a:	1dfb      	adds	r3, r7, #7
 800187c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800187e:	1dfb      	adds	r3, r7, #7
 8001880:	781b      	ldrb	r3, [r3, #0]
 8001882:	2b7f      	cmp	r3, #127	; 0x7f
 8001884:	d828      	bhi.n	80018d8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001886:	4a2f      	ldr	r2, [pc, #188]	; (8001944 <__NVIC_SetPriority+0xd4>)
 8001888:	1dfb      	adds	r3, r7, #7
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	b25b      	sxtb	r3, r3
 800188e:	089b      	lsrs	r3, r3, #2
 8001890:	33c0      	adds	r3, #192	; 0xc0
 8001892:	009b      	lsls	r3, r3, #2
 8001894:	589b      	ldr	r3, [r3, r2]
 8001896:	1dfa      	adds	r2, r7, #7
 8001898:	7812      	ldrb	r2, [r2, #0]
 800189a:	0011      	movs	r1, r2
 800189c:	2203      	movs	r2, #3
 800189e:	400a      	ands	r2, r1
 80018a0:	00d2      	lsls	r2, r2, #3
 80018a2:	21ff      	movs	r1, #255	; 0xff
 80018a4:	4091      	lsls	r1, r2
 80018a6:	000a      	movs	r2, r1
 80018a8:	43d2      	mvns	r2, r2
 80018aa:	401a      	ands	r2, r3
 80018ac:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	019b      	lsls	r3, r3, #6
 80018b2:	22ff      	movs	r2, #255	; 0xff
 80018b4:	401a      	ands	r2, r3
 80018b6:	1dfb      	adds	r3, r7, #7
 80018b8:	781b      	ldrb	r3, [r3, #0]
 80018ba:	0018      	movs	r0, r3
 80018bc:	2303      	movs	r3, #3
 80018be:	4003      	ands	r3, r0
 80018c0:	00db      	lsls	r3, r3, #3
 80018c2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80018c4:	481f      	ldr	r0, [pc, #124]	; (8001944 <__NVIC_SetPriority+0xd4>)
 80018c6:	1dfb      	adds	r3, r7, #7
 80018c8:	781b      	ldrb	r3, [r3, #0]
 80018ca:	b25b      	sxtb	r3, r3
 80018cc:	089b      	lsrs	r3, r3, #2
 80018ce:	430a      	orrs	r2, r1
 80018d0:	33c0      	adds	r3, #192	; 0xc0
 80018d2:	009b      	lsls	r3, r3, #2
 80018d4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80018d6:	e031      	b.n	800193c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80018d8:	4a1b      	ldr	r2, [pc, #108]	; (8001948 <__NVIC_SetPriority+0xd8>)
 80018da:	1dfb      	adds	r3, r7, #7
 80018dc:	781b      	ldrb	r3, [r3, #0]
 80018de:	0019      	movs	r1, r3
 80018e0:	230f      	movs	r3, #15
 80018e2:	400b      	ands	r3, r1
 80018e4:	3b08      	subs	r3, #8
 80018e6:	089b      	lsrs	r3, r3, #2
 80018e8:	3306      	adds	r3, #6
 80018ea:	009b      	lsls	r3, r3, #2
 80018ec:	18d3      	adds	r3, r2, r3
 80018ee:	3304      	adds	r3, #4
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	1dfa      	adds	r2, r7, #7
 80018f4:	7812      	ldrb	r2, [r2, #0]
 80018f6:	0011      	movs	r1, r2
 80018f8:	2203      	movs	r2, #3
 80018fa:	400a      	ands	r2, r1
 80018fc:	00d2      	lsls	r2, r2, #3
 80018fe:	21ff      	movs	r1, #255	; 0xff
 8001900:	4091      	lsls	r1, r2
 8001902:	000a      	movs	r2, r1
 8001904:	43d2      	mvns	r2, r2
 8001906:	401a      	ands	r2, r3
 8001908:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	019b      	lsls	r3, r3, #6
 800190e:	22ff      	movs	r2, #255	; 0xff
 8001910:	401a      	ands	r2, r3
 8001912:	1dfb      	adds	r3, r7, #7
 8001914:	781b      	ldrb	r3, [r3, #0]
 8001916:	0018      	movs	r0, r3
 8001918:	2303      	movs	r3, #3
 800191a:	4003      	ands	r3, r0
 800191c:	00db      	lsls	r3, r3, #3
 800191e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001920:	4809      	ldr	r0, [pc, #36]	; (8001948 <__NVIC_SetPriority+0xd8>)
 8001922:	1dfb      	adds	r3, r7, #7
 8001924:	781b      	ldrb	r3, [r3, #0]
 8001926:	001c      	movs	r4, r3
 8001928:	230f      	movs	r3, #15
 800192a:	4023      	ands	r3, r4
 800192c:	3b08      	subs	r3, #8
 800192e:	089b      	lsrs	r3, r3, #2
 8001930:	430a      	orrs	r2, r1
 8001932:	3306      	adds	r3, #6
 8001934:	009b      	lsls	r3, r3, #2
 8001936:	18c3      	adds	r3, r0, r3
 8001938:	3304      	adds	r3, #4
 800193a:	601a      	str	r2, [r3, #0]
}
 800193c:	46c0      	nop			; (mov r8, r8)
 800193e:	46bd      	mov	sp, r7
 8001940:	b003      	add	sp, #12
 8001942:	bd90      	pop	{r4, r7, pc}
 8001944:	e000e100 	.word	0xe000e100
 8001948:	e000ed00 	.word	0xe000ed00

0800194c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b082      	sub	sp, #8
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	1e5a      	subs	r2, r3, #1
 8001958:	2380      	movs	r3, #128	; 0x80
 800195a:	045b      	lsls	r3, r3, #17
 800195c:	429a      	cmp	r2, r3
 800195e:	d301      	bcc.n	8001964 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001960:	2301      	movs	r3, #1
 8001962:	e010      	b.n	8001986 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001964:	4b0a      	ldr	r3, [pc, #40]	; (8001990 <SysTick_Config+0x44>)
 8001966:	687a      	ldr	r2, [r7, #4]
 8001968:	3a01      	subs	r2, #1
 800196a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800196c:	2301      	movs	r3, #1
 800196e:	425b      	negs	r3, r3
 8001970:	2103      	movs	r1, #3
 8001972:	0018      	movs	r0, r3
 8001974:	f7ff ff7c 	bl	8001870 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001978:	4b05      	ldr	r3, [pc, #20]	; (8001990 <SysTick_Config+0x44>)
 800197a:	2200      	movs	r2, #0
 800197c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800197e:	4b04      	ldr	r3, [pc, #16]	; (8001990 <SysTick_Config+0x44>)
 8001980:	2207      	movs	r2, #7
 8001982:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001984:	2300      	movs	r3, #0
}
 8001986:	0018      	movs	r0, r3
 8001988:	46bd      	mov	sp, r7
 800198a:	b002      	add	sp, #8
 800198c:	bd80      	pop	{r7, pc}
 800198e:	46c0      	nop			; (mov r8, r8)
 8001990:	e000e010 	.word	0xe000e010

08001994 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001994:	b580      	push	{r7, lr}
 8001996:	b084      	sub	sp, #16
 8001998:	af00      	add	r7, sp, #0
 800199a:	60b9      	str	r1, [r7, #8]
 800199c:	607a      	str	r2, [r7, #4]
 800199e:	210f      	movs	r1, #15
 80019a0:	187b      	adds	r3, r7, r1
 80019a2:	1c02      	adds	r2, r0, #0
 80019a4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80019a6:	68ba      	ldr	r2, [r7, #8]
 80019a8:	187b      	adds	r3, r7, r1
 80019aa:	781b      	ldrb	r3, [r3, #0]
 80019ac:	b25b      	sxtb	r3, r3
 80019ae:	0011      	movs	r1, r2
 80019b0:	0018      	movs	r0, r3
 80019b2:	f7ff ff5d 	bl	8001870 <__NVIC_SetPriority>
}
 80019b6:	46c0      	nop			; (mov r8, r8)
 80019b8:	46bd      	mov	sp, r7
 80019ba:	b004      	add	sp, #16
 80019bc:	bd80      	pop	{r7, pc}

080019be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019be:	b580      	push	{r7, lr}
 80019c0:	b082      	sub	sp, #8
 80019c2:	af00      	add	r7, sp, #0
 80019c4:	0002      	movs	r2, r0
 80019c6:	1dfb      	adds	r3, r7, #7
 80019c8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019ca:	1dfb      	adds	r3, r7, #7
 80019cc:	781b      	ldrb	r3, [r3, #0]
 80019ce:	b25b      	sxtb	r3, r3
 80019d0:	0018      	movs	r0, r3
 80019d2:	f7ff ff33 	bl	800183c <__NVIC_EnableIRQ>
}
 80019d6:	46c0      	nop			; (mov r8, r8)
 80019d8:	46bd      	mov	sp, r7
 80019da:	b002      	add	sp, #8
 80019dc:	bd80      	pop	{r7, pc}

080019de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019de:	b580      	push	{r7, lr}
 80019e0:	b082      	sub	sp, #8
 80019e2:	af00      	add	r7, sp, #0
 80019e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	0018      	movs	r0, r3
 80019ea:	f7ff ffaf 	bl	800194c <SysTick_Config>
 80019ee:	0003      	movs	r3, r0
}
 80019f0:	0018      	movs	r0, r3
 80019f2:	46bd      	mov	sp, r7
 80019f4:	b002      	add	sp, #8
 80019f6:	bd80      	pop	{r7, pc}

080019f8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b084      	sub	sp, #16
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001a00:	2300      	movs	r3, #0
 8001a02:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d101      	bne.n	8001a0e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e036      	b.n	8001a7c <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	2221      	movs	r2, #33	; 0x21
 8001a12:	2102      	movs	r1, #2
 8001a14:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	4a18      	ldr	r2, [pc, #96]	; (8001a84 <HAL_DMA_Init+0x8c>)
 8001a22:	4013      	ands	r3, r2
 8001a24:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001a2e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	68db      	ldr	r3, [r3, #12]
 8001a34:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a3a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	695b      	ldr	r3, [r3, #20]
 8001a40:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a46:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	69db      	ldr	r3, [r3, #28]
 8001a4c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001a4e:	68fa      	ldr	r2, [r7, #12]
 8001a50:	4313      	orrs	r3, r2
 8001a52:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	68fa      	ldr	r2, [r7, #12]
 8001a5a:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	0018      	movs	r0, r3
 8001a60:	f000 f8b4 	bl	8001bcc <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2200      	movs	r2, #0
 8001a68:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2221      	movs	r2, #33	; 0x21
 8001a6e:	2101      	movs	r1, #1
 8001a70:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2220      	movs	r2, #32
 8001a76:	2100      	movs	r1, #0
 8001a78:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8001a7a:	2300      	movs	r3, #0
}  
 8001a7c:	0018      	movs	r0, r3
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	b004      	add	sp, #16
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	ffffc00f 	.word	0xffffc00f

08001a88 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b084      	sub	sp, #16
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa4:	2204      	movs	r2, #4
 8001aa6:	409a      	lsls	r2, r3
 8001aa8:	0013      	movs	r3, r2
 8001aaa:	68fa      	ldr	r2, [r7, #12]
 8001aac:	4013      	ands	r3, r2
 8001aae:	d024      	beq.n	8001afa <HAL_DMA_IRQHandler+0x72>
 8001ab0:	68bb      	ldr	r3, [r7, #8]
 8001ab2:	2204      	movs	r2, #4
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	d020      	beq.n	8001afa <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	2220      	movs	r2, #32
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	d107      	bne.n	8001ad4 <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	681a      	ldr	r2, [r3, #0]
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	2104      	movs	r1, #4
 8001ad0:	438a      	bics	r2, r1
 8001ad2:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001adc:	2104      	movs	r1, #4
 8001ade:	4091      	lsls	r1, r2
 8001ae0:	000a      	movs	r2, r1
 8001ae2:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d100      	bne.n	8001aee <HAL_DMA_IRQHandler+0x66>
 8001aec:	e06a      	b.n	8001bc4 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001af2:	687a      	ldr	r2, [r7, #4]
 8001af4:	0010      	movs	r0, r2
 8001af6:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8001af8:	e064      	b.n	8001bc4 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001afe:	2202      	movs	r2, #2
 8001b00:	409a      	lsls	r2, r3
 8001b02:	0013      	movs	r3, r2
 8001b04:	68fa      	ldr	r2, [r7, #12]
 8001b06:	4013      	ands	r3, r2
 8001b08:	d02b      	beq.n	8001b62 <HAL_DMA_IRQHandler+0xda>
 8001b0a:	68bb      	ldr	r3, [r7, #8]
 8001b0c:	2202      	movs	r2, #2
 8001b0e:	4013      	ands	r3, r2
 8001b10:	d027      	beq.n	8001b62 <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	2220      	movs	r2, #32
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	d10b      	bne.n	8001b36 <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	681a      	ldr	r2, [r3, #0]
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	210a      	movs	r1, #10
 8001b2a:	438a      	bics	r2, r1
 8001b2c:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2221      	movs	r2, #33	; 0x21
 8001b32:	2101      	movs	r1, #1
 8001b34:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b3e:	2102      	movs	r1, #2
 8001b40:	4091      	lsls	r1, r2
 8001b42:	000a      	movs	r2, r1
 8001b44:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2220      	movs	r2, #32
 8001b4a:	2100      	movs	r1, #0
 8001b4c:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d036      	beq.n	8001bc4 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b5a:	687a      	ldr	r2, [r7, #4]
 8001b5c:	0010      	movs	r0, r2
 8001b5e:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8001b60:	e030      	b.n	8001bc4 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b66:	2208      	movs	r2, #8
 8001b68:	409a      	lsls	r2, r3
 8001b6a:	0013      	movs	r3, r2
 8001b6c:	68fa      	ldr	r2, [r7, #12]
 8001b6e:	4013      	ands	r3, r2
 8001b70:	d028      	beq.n	8001bc4 <HAL_DMA_IRQHandler+0x13c>
 8001b72:	68bb      	ldr	r3, [r7, #8]
 8001b74:	2208      	movs	r2, #8
 8001b76:	4013      	ands	r3, r2
 8001b78:	d024      	beq.n	8001bc4 <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	681a      	ldr	r2, [r3, #0]
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	210e      	movs	r1, #14
 8001b86:	438a      	bics	r2, r1
 8001b88:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b92:	2101      	movs	r1, #1
 8001b94:	4091      	lsls	r1, r2
 8001b96:	000a      	movs	r2, r1
 8001b98:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2221      	movs	r2, #33	; 0x21
 8001ba4:	2101      	movs	r1, #1
 8001ba6:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2220      	movs	r2, #32
 8001bac:	2100      	movs	r1, #0
 8001bae:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d005      	beq.n	8001bc4 <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bbc:	687a      	ldr	r2, [r7, #4]
 8001bbe:	0010      	movs	r0, r2
 8001bc0:	4798      	blx	r3
    }
   }
}  
 8001bc2:	e7ff      	b.n	8001bc4 <HAL_DMA_IRQHandler+0x13c>
 8001bc4:	46c0      	nop			; (mov r8, r8)
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	b004      	add	sp, #16
 8001bca:	bd80      	pop	{r7, pc}

08001bcc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b082      	sub	sp, #8
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a08      	ldr	r2, [pc, #32]	; (8001bfc <DMA_CalcBaseAndBitshift+0x30>)
 8001bda:	4694      	mov	ip, r2
 8001bdc:	4463      	add	r3, ip
 8001bde:	2114      	movs	r1, #20
 8001be0:	0018      	movs	r0, r3
 8001be2:	f7fe fa91 	bl	8000108 <__udivsi3>
 8001be6:	0003      	movs	r3, r0
 8001be8:	009a      	lsls	r2, r3, #2
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	4a03      	ldr	r2, [pc, #12]	; (8001c00 <DMA_CalcBaseAndBitshift+0x34>)
 8001bf2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8001bf4:	46c0      	nop			; (mov r8, r8)
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	b002      	add	sp, #8
 8001bfa:	bd80      	pop	{r7, pc}
 8001bfc:	bffdfff8 	.word	0xbffdfff8
 8001c00:	40020000 	.word	0x40020000

08001c04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b086      	sub	sp, #24
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
 8001c0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c12:	e149      	b.n	8001ea8 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	2101      	movs	r1, #1
 8001c1a:	697a      	ldr	r2, [r7, #20]
 8001c1c:	4091      	lsls	r1, r2
 8001c1e:	000a      	movs	r2, r1
 8001c20:	4013      	ands	r3, r2
 8001c22:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d100      	bne.n	8001c2c <HAL_GPIO_Init+0x28>
 8001c2a:	e13a      	b.n	8001ea2 <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	2203      	movs	r2, #3
 8001c32:	4013      	ands	r3, r2
 8001c34:	2b01      	cmp	r3, #1
 8001c36:	d005      	beq.n	8001c44 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	2203      	movs	r2, #3
 8001c3e:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001c40:	2b02      	cmp	r3, #2
 8001c42:	d130      	bne.n	8001ca6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	689b      	ldr	r3, [r3, #8]
 8001c48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001c4a:	697b      	ldr	r3, [r7, #20]
 8001c4c:	005b      	lsls	r3, r3, #1
 8001c4e:	2203      	movs	r2, #3
 8001c50:	409a      	lsls	r2, r3
 8001c52:	0013      	movs	r3, r2
 8001c54:	43da      	mvns	r2, r3
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	4013      	ands	r3, r2
 8001c5a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	68da      	ldr	r2, [r3, #12]
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	005b      	lsls	r3, r3, #1
 8001c64:	409a      	lsls	r2, r3
 8001c66:	0013      	movs	r3, r2
 8001c68:	693a      	ldr	r2, [r7, #16]
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	693a      	ldr	r2, [r7, #16]
 8001c72:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	697b      	ldr	r3, [r7, #20]
 8001c7e:	409a      	lsls	r2, r3
 8001c80:	0013      	movs	r3, r2
 8001c82:	43da      	mvns	r2, r3
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	4013      	ands	r3, r2
 8001c88:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	091b      	lsrs	r3, r3, #4
 8001c90:	2201      	movs	r2, #1
 8001c92:	401a      	ands	r2, r3
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	409a      	lsls	r2, r3
 8001c98:	0013      	movs	r3, r2
 8001c9a:	693a      	ldr	r2, [r7, #16]
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	693a      	ldr	r2, [r7, #16]
 8001ca4:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	2203      	movs	r2, #3
 8001cac:	4013      	ands	r3, r2
 8001cae:	2b03      	cmp	r3, #3
 8001cb0:	d017      	beq.n	8001ce2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	68db      	ldr	r3, [r3, #12]
 8001cb6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	005b      	lsls	r3, r3, #1
 8001cbc:	2203      	movs	r2, #3
 8001cbe:	409a      	lsls	r2, r3
 8001cc0:	0013      	movs	r3, r2
 8001cc2:	43da      	mvns	r2, r3
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	4013      	ands	r3, r2
 8001cc8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	689a      	ldr	r2, [r3, #8]
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	005b      	lsls	r3, r3, #1
 8001cd2:	409a      	lsls	r2, r3
 8001cd4:	0013      	movs	r3, r2
 8001cd6:	693a      	ldr	r2, [r7, #16]
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	693a      	ldr	r2, [r7, #16]
 8001ce0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	2203      	movs	r2, #3
 8001ce8:	4013      	ands	r3, r2
 8001cea:	2b02      	cmp	r3, #2
 8001cec:	d123      	bne.n	8001d36 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001cee:	697b      	ldr	r3, [r7, #20]
 8001cf0:	08da      	lsrs	r2, r3, #3
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	3208      	adds	r2, #8
 8001cf6:	0092      	lsls	r2, r2, #2
 8001cf8:	58d3      	ldr	r3, [r2, r3]
 8001cfa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	2207      	movs	r2, #7
 8001d00:	4013      	ands	r3, r2
 8001d02:	009b      	lsls	r3, r3, #2
 8001d04:	220f      	movs	r2, #15
 8001d06:	409a      	lsls	r2, r3
 8001d08:	0013      	movs	r3, r2
 8001d0a:	43da      	mvns	r2, r3
 8001d0c:	693b      	ldr	r3, [r7, #16]
 8001d0e:	4013      	ands	r3, r2
 8001d10:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	691a      	ldr	r2, [r3, #16]
 8001d16:	697b      	ldr	r3, [r7, #20]
 8001d18:	2107      	movs	r1, #7
 8001d1a:	400b      	ands	r3, r1
 8001d1c:	009b      	lsls	r3, r3, #2
 8001d1e:	409a      	lsls	r2, r3
 8001d20:	0013      	movs	r3, r2
 8001d22:	693a      	ldr	r2, [r7, #16]
 8001d24:	4313      	orrs	r3, r2
 8001d26:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	08da      	lsrs	r2, r3, #3
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	3208      	adds	r2, #8
 8001d30:	0092      	lsls	r2, r2, #2
 8001d32:	6939      	ldr	r1, [r7, #16]
 8001d34:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	005b      	lsls	r3, r3, #1
 8001d40:	2203      	movs	r2, #3
 8001d42:	409a      	lsls	r2, r3
 8001d44:	0013      	movs	r3, r2
 8001d46:	43da      	mvns	r2, r3
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	4013      	ands	r3, r2
 8001d4c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	2203      	movs	r2, #3
 8001d54:	401a      	ands	r2, r3
 8001d56:	697b      	ldr	r3, [r7, #20]
 8001d58:	005b      	lsls	r3, r3, #1
 8001d5a:	409a      	lsls	r2, r3
 8001d5c:	0013      	movs	r3, r2
 8001d5e:	693a      	ldr	r2, [r7, #16]
 8001d60:	4313      	orrs	r3, r2
 8001d62:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	693a      	ldr	r2, [r7, #16]
 8001d68:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	685a      	ldr	r2, [r3, #4]
 8001d6e:	23c0      	movs	r3, #192	; 0xc0
 8001d70:	029b      	lsls	r3, r3, #10
 8001d72:	4013      	ands	r3, r2
 8001d74:	d100      	bne.n	8001d78 <HAL_GPIO_Init+0x174>
 8001d76:	e094      	b.n	8001ea2 <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d78:	4b51      	ldr	r3, [pc, #324]	; (8001ec0 <HAL_GPIO_Init+0x2bc>)
 8001d7a:	699a      	ldr	r2, [r3, #24]
 8001d7c:	4b50      	ldr	r3, [pc, #320]	; (8001ec0 <HAL_GPIO_Init+0x2bc>)
 8001d7e:	2101      	movs	r1, #1
 8001d80:	430a      	orrs	r2, r1
 8001d82:	619a      	str	r2, [r3, #24]
 8001d84:	4b4e      	ldr	r3, [pc, #312]	; (8001ec0 <HAL_GPIO_Init+0x2bc>)
 8001d86:	699b      	ldr	r3, [r3, #24]
 8001d88:	2201      	movs	r2, #1
 8001d8a:	4013      	ands	r3, r2
 8001d8c:	60bb      	str	r3, [r7, #8]
 8001d8e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001d90:	4a4c      	ldr	r2, [pc, #304]	; (8001ec4 <HAL_GPIO_Init+0x2c0>)
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	089b      	lsrs	r3, r3, #2
 8001d96:	3302      	adds	r3, #2
 8001d98:	009b      	lsls	r3, r3, #2
 8001d9a:	589b      	ldr	r3, [r3, r2]
 8001d9c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001d9e:	697b      	ldr	r3, [r7, #20]
 8001da0:	2203      	movs	r2, #3
 8001da2:	4013      	ands	r3, r2
 8001da4:	009b      	lsls	r3, r3, #2
 8001da6:	220f      	movs	r2, #15
 8001da8:	409a      	lsls	r2, r3
 8001daa:	0013      	movs	r3, r2
 8001dac:	43da      	mvns	r2, r3
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	4013      	ands	r3, r2
 8001db2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001db4:	687a      	ldr	r2, [r7, #4]
 8001db6:	2390      	movs	r3, #144	; 0x90
 8001db8:	05db      	lsls	r3, r3, #23
 8001dba:	429a      	cmp	r2, r3
 8001dbc:	d00d      	beq.n	8001dda <HAL_GPIO_Init+0x1d6>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	4a41      	ldr	r2, [pc, #260]	; (8001ec8 <HAL_GPIO_Init+0x2c4>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d007      	beq.n	8001dd6 <HAL_GPIO_Init+0x1d2>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	4a40      	ldr	r2, [pc, #256]	; (8001ecc <HAL_GPIO_Init+0x2c8>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d101      	bne.n	8001dd2 <HAL_GPIO_Init+0x1ce>
 8001dce:	2302      	movs	r3, #2
 8001dd0:	e004      	b.n	8001ddc <HAL_GPIO_Init+0x1d8>
 8001dd2:	2305      	movs	r3, #5
 8001dd4:	e002      	b.n	8001ddc <HAL_GPIO_Init+0x1d8>
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	e000      	b.n	8001ddc <HAL_GPIO_Init+0x1d8>
 8001dda:	2300      	movs	r3, #0
 8001ddc:	697a      	ldr	r2, [r7, #20]
 8001dde:	2103      	movs	r1, #3
 8001de0:	400a      	ands	r2, r1
 8001de2:	0092      	lsls	r2, r2, #2
 8001de4:	4093      	lsls	r3, r2
 8001de6:	693a      	ldr	r2, [r7, #16]
 8001de8:	4313      	orrs	r3, r2
 8001dea:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001dec:	4935      	ldr	r1, [pc, #212]	; (8001ec4 <HAL_GPIO_Init+0x2c0>)
 8001dee:	697b      	ldr	r3, [r7, #20]
 8001df0:	089b      	lsrs	r3, r3, #2
 8001df2:	3302      	adds	r3, #2
 8001df4:	009b      	lsls	r3, r3, #2
 8001df6:	693a      	ldr	r2, [r7, #16]
 8001df8:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001dfa:	4b35      	ldr	r3, [pc, #212]	; (8001ed0 <HAL_GPIO_Init+0x2cc>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	43da      	mvns	r2, r3
 8001e04:	693b      	ldr	r3, [r7, #16]
 8001e06:	4013      	ands	r3, r2
 8001e08:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	685a      	ldr	r2, [r3, #4]
 8001e0e:	2380      	movs	r3, #128	; 0x80
 8001e10:	025b      	lsls	r3, r3, #9
 8001e12:	4013      	ands	r3, r2
 8001e14:	d003      	beq.n	8001e1e <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8001e16:	693a      	ldr	r2, [r7, #16]
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001e1e:	4b2c      	ldr	r3, [pc, #176]	; (8001ed0 <HAL_GPIO_Init+0x2cc>)
 8001e20:	693a      	ldr	r2, [r7, #16]
 8001e22:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001e24:	4b2a      	ldr	r3, [pc, #168]	; (8001ed0 <HAL_GPIO_Init+0x2cc>)
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	43da      	mvns	r2, r3
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	4013      	ands	r3, r2
 8001e32:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	685a      	ldr	r2, [r3, #4]
 8001e38:	2380      	movs	r3, #128	; 0x80
 8001e3a:	029b      	lsls	r3, r3, #10
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	d003      	beq.n	8001e48 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8001e40:	693a      	ldr	r2, [r7, #16]
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	4313      	orrs	r3, r2
 8001e46:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001e48:	4b21      	ldr	r3, [pc, #132]	; (8001ed0 <HAL_GPIO_Init+0x2cc>)
 8001e4a:	693a      	ldr	r2, [r7, #16]
 8001e4c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e4e:	4b20      	ldr	r3, [pc, #128]	; (8001ed0 <HAL_GPIO_Init+0x2cc>)
 8001e50:	689b      	ldr	r3, [r3, #8]
 8001e52:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	43da      	mvns	r2, r3
 8001e58:	693b      	ldr	r3, [r7, #16]
 8001e5a:	4013      	ands	r3, r2
 8001e5c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	685a      	ldr	r2, [r3, #4]
 8001e62:	2380      	movs	r3, #128	; 0x80
 8001e64:	035b      	lsls	r3, r3, #13
 8001e66:	4013      	ands	r3, r2
 8001e68:	d003      	beq.n	8001e72 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8001e6a:	693a      	ldr	r2, [r7, #16]
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001e72:	4b17      	ldr	r3, [pc, #92]	; (8001ed0 <HAL_GPIO_Init+0x2cc>)
 8001e74:	693a      	ldr	r2, [r7, #16]
 8001e76:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001e78:	4b15      	ldr	r3, [pc, #84]	; (8001ed0 <HAL_GPIO_Init+0x2cc>)
 8001e7a:	68db      	ldr	r3, [r3, #12]
 8001e7c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	43da      	mvns	r2, r3
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	4013      	ands	r3, r2
 8001e86:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	685a      	ldr	r2, [r3, #4]
 8001e8c:	2380      	movs	r3, #128	; 0x80
 8001e8e:	039b      	lsls	r3, r3, #14
 8001e90:	4013      	ands	r3, r2
 8001e92:	d003      	beq.n	8001e9c <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 8001e94:	693a      	ldr	r2, [r7, #16]
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001e9c:	4b0c      	ldr	r3, [pc, #48]	; (8001ed0 <HAL_GPIO_Init+0x2cc>)
 8001e9e:	693a      	ldr	r2, [r7, #16]
 8001ea0:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8001ea2:	697b      	ldr	r3, [r7, #20]
 8001ea4:	3301      	adds	r3, #1
 8001ea6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	40da      	lsrs	r2, r3
 8001eb0:	1e13      	subs	r3, r2, #0
 8001eb2:	d000      	beq.n	8001eb6 <HAL_GPIO_Init+0x2b2>
 8001eb4:	e6ae      	b.n	8001c14 <HAL_GPIO_Init+0x10>
  } 
}
 8001eb6:	46c0      	nop			; (mov r8, r8)
 8001eb8:	46c0      	nop			; (mov r8, r8)
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	b006      	add	sp, #24
 8001ebe:	bd80      	pop	{r7, pc}
 8001ec0:	40021000 	.word	0x40021000
 8001ec4:	40010000 	.word	0x40010000
 8001ec8:	48000400 	.word	0x48000400
 8001ecc:	48000800 	.word	0x48000800
 8001ed0:	40010400 	.word	0x40010400

08001ed4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b084      	sub	sp, #16
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
 8001edc:	000a      	movs	r2, r1
 8001ede:	1cbb      	adds	r3, r7, #2
 8001ee0:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	691b      	ldr	r3, [r3, #16]
 8001ee6:	1cba      	adds	r2, r7, #2
 8001ee8:	8812      	ldrh	r2, [r2, #0]
 8001eea:	4013      	ands	r3, r2
 8001eec:	d004      	beq.n	8001ef8 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001eee:	230f      	movs	r3, #15
 8001ef0:	18fb      	adds	r3, r7, r3
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	701a      	strb	r2, [r3, #0]
 8001ef6:	e003      	b.n	8001f00 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001ef8:	230f      	movs	r3, #15
 8001efa:	18fb      	adds	r3, r7, r3
 8001efc:	2200      	movs	r2, #0
 8001efe:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001f00:	230f      	movs	r3, #15
 8001f02:	18fb      	adds	r3, r7, r3
 8001f04:	781b      	ldrb	r3, [r3, #0]
  }
 8001f06:	0018      	movs	r0, r3
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	b004      	add	sp, #16
 8001f0c:	bd80      	pop	{r7, pc}

08001f0e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f0e:	b580      	push	{r7, lr}
 8001f10:	b082      	sub	sp, #8
 8001f12:	af00      	add	r7, sp, #0
 8001f14:	6078      	str	r0, [r7, #4]
 8001f16:	0008      	movs	r0, r1
 8001f18:	0011      	movs	r1, r2
 8001f1a:	1cbb      	adds	r3, r7, #2
 8001f1c:	1c02      	adds	r2, r0, #0
 8001f1e:	801a      	strh	r2, [r3, #0]
 8001f20:	1c7b      	adds	r3, r7, #1
 8001f22:	1c0a      	adds	r2, r1, #0
 8001f24:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f26:	1c7b      	adds	r3, r7, #1
 8001f28:	781b      	ldrb	r3, [r3, #0]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d004      	beq.n	8001f38 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001f2e:	1cbb      	adds	r3, r7, #2
 8001f30:	881a      	ldrh	r2, [r3, #0]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001f36:	e003      	b.n	8001f40 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001f38:	1cbb      	adds	r3, r7, #2
 8001f3a:	881a      	ldrh	r2, [r3, #0]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001f40:	46c0      	nop			; (mov r8, r8)
 8001f42:	46bd      	mov	sp, r7
 8001f44:	b002      	add	sp, #8
 8001f46:	bd80      	pop	{r7, pc}

08001f48 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b082      	sub	sp, #8
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d101      	bne.n	8001f5a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001f56:	2301      	movs	r3, #1
 8001f58:	e082      	b.n	8002060 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2241      	movs	r2, #65	; 0x41
 8001f5e:	5c9b      	ldrb	r3, [r3, r2]
 8001f60:	b2db      	uxtb	r3, r3
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d107      	bne.n	8001f76 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2240      	movs	r2, #64	; 0x40
 8001f6a:	2100      	movs	r1, #0
 8001f6c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	0018      	movs	r0, r3
 8001f72:	f7fe ffdf 	bl	8000f34 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2241      	movs	r2, #65	; 0x41
 8001f7a:	2124      	movs	r1, #36	; 0x24
 8001f7c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	681a      	ldr	r2, [r3, #0]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	2101      	movs	r1, #1
 8001f8a:	438a      	bics	r2, r1
 8001f8c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	685a      	ldr	r2, [r3, #4]
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4934      	ldr	r1, [pc, #208]	; (8002068 <HAL_I2C_Init+0x120>)
 8001f98:	400a      	ands	r2, r1
 8001f9a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	689a      	ldr	r2, [r3, #8]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4931      	ldr	r1, [pc, #196]	; (800206c <HAL_I2C_Init+0x124>)
 8001fa8:	400a      	ands	r2, r1
 8001faa:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	68db      	ldr	r3, [r3, #12]
 8001fb0:	2b01      	cmp	r3, #1
 8001fb2:	d108      	bne.n	8001fc6 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	689a      	ldr	r2, [r3, #8]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	2180      	movs	r1, #128	; 0x80
 8001fbe:	0209      	lsls	r1, r1, #8
 8001fc0:	430a      	orrs	r2, r1
 8001fc2:	609a      	str	r2, [r3, #8]
 8001fc4:	e007      	b.n	8001fd6 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	689a      	ldr	r2, [r3, #8]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	2184      	movs	r1, #132	; 0x84
 8001fd0:	0209      	lsls	r1, r1, #8
 8001fd2:	430a      	orrs	r2, r1
 8001fd4:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	68db      	ldr	r3, [r3, #12]
 8001fda:	2b02      	cmp	r3, #2
 8001fdc:	d104      	bne.n	8001fe8 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	2280      	movs	r2, #128	; 0x80
 8001fe4:	0112      	lsls	r2, r2, #4
 8001fe6:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	685a      	ldr	r2, [r3, #4]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	491f      	ldr	r1, [pc, #124]	; (8002070 <HAL_I2C_Init+0x128>)
 8001ff4:	430a      	orrs	r2, r1
 8001ff6:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	68da      	ldr	r2, [r3, #12]
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	491a      	ldr	r1, [pc, #104]	; (800206c <HAL_I2C_Init+0x124>)
 8002004:	400a      	ands	r2, r1
 8002006:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	691a      	ldr	r2, [r3, #16]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	695b      	ldr	r3, [r3, #20]
 8002010:	431a      	orrs	r2, r3
 8002012:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	699b      	ldr	r3, [r3, #24]
 8002018:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	430a      	orrs	r2, r1
 8002020:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	69d9      	ldr	r1, [r3, #28]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6a1a      	ldr	r2, [r3, #32]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	430a      	orrs	r2, r1
 8002030:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	681a      	ldr	r2, [r3, #0]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	2101      	movs	r1, #1
 800203e:	430a      	orrs	r2, r1
 8002040:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2200      	movs	r2, #0
 8002046:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2241      	movs	r2, #65	; 0x41
 800204c:	2120      	movs	r1, #32
 800204e:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2200      	movs	r2, #0
 8002054:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2242      	movs	r2, #66	; 0x42
 800205a:	2100      	movs	r1, #0
 800205c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800205e:	2300      	movs	r3, #0
}
 8002060:	0018      	movs	r0, r3
 8002062:	46bd      	mov	sp, r7
 8002064:	b002      	add	sp, #8
 8002066:	bd80      	pop	{r7, pc}
 8002068:	f0ffffff 	.word	0xf0ffffff
 800206c:	ffff7fff 	.word	0xffff7fff
 8002070:	02008000 	.word	0x02008000

08002074 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002074:	b590      	push	{r4, r7, lr}
 8002076:	b089      	sub	sp, #36	; 0x24
 8002078:	af02      	add	r7, sp, #8
 800207a:	60f8      	str	r0, [r7, #12]
 800207c:	000c      	movs	r4, r1
 800207e:	0010      	movs	r0, r2
 8002080:	0019      	movs	r1, r3
 8002082:	230a      	movs	r3, #10
 8002084:	18fb      	adds	r3, r7, r3
 8002086:	1c22      	adds	r2, r4, #0
 8002088:	801a      	strh	r2, [r3, #0]
 800208a:	2308      	movs	r3, #8
 800208c:	18fb      	adds	r3, r7, r3
 800208e:	1c02      	adds	r2, r0, #0
 8002090:	801a      	strh	r2, [r3, #0]
 8002092:	1dbb      	adds	r3, r7, #6
 8002094:	1c0a      	adds	r2, r1, #0
 8002096:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	2241      	movs	r2, #65	; 0x41
 800209c:	5c9b      	ldrb	r3, [r3, r2]
 800209e:	b2db      	uxtb	r3, r3
 80020a0:	2b20      	cmp	r3, #32
 80020a2:	d000      	beq.n	80020a6 <HAL_I2C_Mem_Read+0x32>
 80020a4:	e110      	b.n	80022c8 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 80020a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d004      	beq.n	80020b6 <HAL_I2C_Mem_Read+0x42>
 80020ac:	232c      	movs	r3, #44	; 0x2c
 80020ae:	18fb      	adds	r3, r7, r3
 80020b0:	881b      	ldrh	r3, [r3, #0]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d105      	bne.n	80020c2 <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	2280      	movs	r2, #128	; 0x80
 80020ba:	0092      	lsls	r2, r2, #2
 80020bc:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	e103      	b.n	80022ca <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	2240      	movs	r2, #64	; 0x40
 80020c6:	5c9b      	ldrb	r3, [r3, r2]
 80020c8:	2b01      	cmp	r3, #1
 80020ca:	d101      	bne.n	80020d0 <HAL_I2C_Mem_Read+0x5c>
 80020cc:	2302      	movs	r3, #2
 80020ce:	e0fc      	b.n	80022ca <HAL_I2C_Mem_Read+0x256>
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	2240      	movs	r2, #64	; 0x40
 80020d4:	2101      	movs	r1, #1
 80020d6:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80020d8:	f7ff f934 	bl	8001344 <HAL_GetTick>
 80020dc:	0003      	movs	r3, r0
 80020de:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80020e0:	2380      	movs	r3, #128	; 0x80
 80020e2:	0219      	lsls	r1, r3, #8
 80020e4:	68f8      	ldr	r0, [r7, #12]
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	9300      	str	r3, [sp, #0]
 80020ea:	2319      	movs	r3, #25
 80020ec:	2201      	movs	r2, #1
 80020ee:	f000 f983 	bl	80023f8 <I2C_WaitOnFlagUntilTimeout>
 80020f2:	1e03      	subs	r3, r0, #0
 80020f4:	d001      	beq.n	80020fa <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	e0e7      	b.n	80022ca <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	2241      	movs	r2, #65	; 0x41
 80020fe:	2122      	movs	r1, #34	; 0x22
 8002100:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	2242      	movs	r2, #66	; 0x42
 8002106:	2140      	movs	r1, #64	; 0x40
 8002108:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	2200      	movs	r2, #0
 800210e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002114:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	222c      	movs	r2, #44	; 0x2c
 800211a:	18ba      	adds	r2, r7, r2
 800211c:	8812      	ldrh	r2, [r2, #0]
 800211e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	2200      	movs	r2, #0
 8002124:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002126:	1dbb      	adds	r3, r7, #6
 8002128:	881c      	ldrh	r4, [r3, #0]
 800212a:	2308      	movs	r3, #8
 800212c:	18fb      	adds	r3, r7, r3
 800212e:	881a      	ldrh	r2, [r3, #0]
 8002130:	230a      	movs	r3, #10
 8002132:	18fb      	adds	r3, r7, r3
 8002134:	8819      	ldrh	r1, [r3, #0]
 8002136:	68f8      	ldr	r0, [r7, #12]
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	9301      	str	r3, [sp, #4]
 800213c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800213e:	9300      	str	r3, [sp, #0]
 8002140:	0023      	movs	r3, r4
 8002142:	f000 f8d5 	bl	80022f0 <I2C_RequestMemoryRead>
 8002146:	1e03      	subs	r3, r0, #0
 8002148:	d005      	beq.n	8002156 <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	2240      	movs	r2, #64	; 0x40
 800214e:	2100      	movs	r1, #0
 8002150:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8002152:	2301      	movs	r3, #1
 8002154:	e0b9      	b.n	80022ca <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800215a:	b29b      	uxth	r3, r3
 800215c:	2bff      	cmp	r3, #255	; 0xff
 800215e:	d911      	bls.n	8002184 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	22ff      	movs	r2, #255	; 0xff
 8002164:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800216a:	b2da      	uxtb	r2, r3
 800216c:	2380      	movs	r3, #128	; 0x80
 800216e:	045c      	lsls	r4, r3, #17
 8002170:	230a      	movs	r3, #10
 8002172:	18fb      	adds	r3, r7, r3
 8002174:	8819      	ldrh	r1, [r3, #0]
 8002176:	68f8      	ldr	r0, [r7, #12]
 8002178:	4b56      	ldr	r3, [pc, #344]	; (80022d4 <HAL_I2C_Mem_Read+0x260>)
 800217a:	9300      	str	r3, [sp, #0]
 800217c:	0023      	movs	r3, r4
 800217e:	f000 fa6f 	bl	8002660 <I2C_TransferConfig>
 8002182:	e012      	b.n	80021aa <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002188:	b29a      	uxth	r2, r3
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002192:	b2da      	uxtb	r2, r3
 8002194:	2380      	movs	r3, #128	; 0x80
 8002196:	049c      	lsls	r4, r3, #18
 8002198:	230a      	movs	r3, #10
 800219a:	18fb      	adds	r3, r7, r3
 800219c:	8819      	ldrh	r1, [r3, #0]
 800219e:	68f8      	ldr	r0, [r7, #12]
 80021a0:	4b4c      	ldr	r3, [pc, #304]	; (80022d4 <HAL_I2C_Mem_Read+0x260>)
 80021a2:	9300      	str	r3, [sp, #0]
 80021a4:	0023      	movs	r3, r4
 80021a6:	f000 fa5b 	bl	8002660 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80021aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80021ac:	68f8      	ldr	r0, [r7, #12]
 80021ae:	697b      	ldr	r3, [r7, #20]
 80021b0:	9300      	str	r3, [sp, #0]
 80021b2:	0013      	movs	r3, r2
 80021b4:	2200      	movs	r2, #0
 80021b6:	2104      	movs	r1, #4
 80021b8:	f000 f91e 	bl	80023f8 <I2C_WaitOnFlagUntilTimeout>
 80021bc:	1e03      	subs	r3, r0, #0
 80021be:	d001      	beq.n	80021c4 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 80021c0:	2301      	movs	r3, #1
 80021c2:	e082      	b.n	80022ca <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ce:	b2d2      	uxtb	r2, r2
 80021d0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d6:	1c5a      	adds	r2, r3, #1
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021e0:	3b01      	subs	r3, #1
 80021e2:	b29a      	uxth	r2, r3
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021ec:	b29b      	uxth	r3, r3
 80021ee:	3b01      	subs	r3, #1
 80021f0:	b29a      	uxth	r2, r3
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021fa:	b29b      	uxth	r3, r3
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d03a      	beq.n	8002276 <HAL_I2C_Mem_Read+0x202>
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002204:	2b00      	cmp	r3, #0
 8002206:	d136      	bne.n	8002276 <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002208:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800220a:	68f8      	ldr	r0, [r7, #12]
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	9300      	str	r3, [sp, #0]
 8002210:	0013      	movs	r3, r2
 8002212:	2200      	movs	r2, #0
 8002214:	2180      	movs	r1, #128	; 0x80
 8002216:	f000 f8ef 	bl	80023f8 <I2C_WaitOnFlagUntilTimeout>
 800221a:	1e03      	subs	r3, r0, #0
 800221c:	d001      	beq.n	8002222 <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 800221e:	2301      	movs	r3, #1
 8002220:	e053      	b.n	80022ca <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002226:	b29b      	uxth	r3, r3
 8002228:	2bff      	cmp	r3, #255	; 0xff
 800222a:	d911      	bls.n	8002250 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	22ff      	movs	r2, #255	; 0xff
 8002230:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002236:	b2da      	uxtb	r2, r3
 8002238:	2380      	movs	r3, #128	; 0x80
 800223a:	045c      	lsls	r4, r3, #17
 800223c:	230a      	movs	r3, #10
 800223e:	18fb      	adds	r3, r7, r3
 8002240:	8819      	ldrh	r1, [r3, #0]
 8002242:	68f8      	ldr	r0, [r7, #12]
 8002244:	2300      	movs	r3, #0
 8002246:	9300      	str	r3, [sp, #0]
 8002248:	0023      	movs	r3, r4
 800224a:	f000 fa09 	bl	8002660 <I2C_TransferConfig>
 800224e:	e012      	b.n	8002276 <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002254:	b29a      	uxth	r2, r3
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800225e:	b2da      	uxtb	r2, r3
 8002260:	2380      	movs	r3, #128	; 0x80
 8002262:	049c      	lsls	r4, r3, #18
 8002264:	230a      	movs	r3, #10
 8002266:	18fb      	adds	r3, r7, r3
 8002268:	8819      	ldrh	r1, [r3, #0]
 800226a:	68f8      	ldr	r0, [r7, #12]
 800226c:	2300      	movs	r3, #0
 800226e:	9300      	str	r3, [sp, #0]
 8002270:	0023      	movs	r3, r4
 8002272:	f000 f9f5 	bl	8002660 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800227a:	b29b      	uxth	r3, r3
 800227c:	2b00      	cmp	r3, #0
 800227e:	d194      	bne.n	80021aa <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002280:	697a      	ldr	r2, [r7, #20]
 8002282:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	0018      	movs	r0, r3
 8002288:	f000 f934 	bl	80024f4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800228c:	1e03      	subs	r3, r0, #0
 800228e:	d001      	beq.n	8002294 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8002290:	2301      	movs	r3, #1
 8002292:	e01a      	b.n	80022ca <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	2220      	movs	r2, #32
 800229a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	685a      	ldr	r2, [r3, #4]
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	490c      	ldr	r1, [pc, #48]	; (80022d8 <HAL_I2C_Mem_Read+0x264>)
 80022a8:	400a      	ands	r2, r1
 80022aa:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	2241      	movs	r2, #65	; 0x41
 80022b0:	2120      	movs	r1, #32
 80022b2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	2242      	movs	r2, #66	; 0x42
 80022b8:	2100      	movs	r1, #0
 80022ba:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	2240      	movs	r2, #64	; 0x40
 80022c0:	2100      	movs	r1, #0
 80022c2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80022c4:	2300      	movs	r3, #0
 80022c6:	e000      	b.n	80022ca <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 80022c8:	2302      	movs	r3, #2
  }
}
 80022ca:	0018      	movs	r0, r3
 80022cc:	46bd      	mov	sp, r7
 80022ce:	b007      	add	sp, #28
 80022d0:	bd90      	pop	{r4, r7, pc}
 80022d2:	46c0      	nop			; (mov r8, r8)
 80022d4:	80002400 	.word	0x80002400
 80022d8:	fe00e800 	.word	0xfe00e800

080022dc <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b082      	sub	sp, #8
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 80022e8:	0018      	movs	r0, r3
 80022ea:	46bd      	mov	sp, r7
 80022ec:	b002      	add	sp, #8
 80022ee:	bd80      	pop	{r7, pc}

080022f0 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80022f0:	b5b0      	push	{r4, r5, r7, lr}
 80022f2:	b086      	sub	sp, #24
 80022f4:	af02      	add	r7, sp, #8
 80022f6:	60f8      	str	r0, [r7, #12]
 80022f8:	000c      	movs	r4, r1
 80022fa:	0010      	movs	r0, r2
 80022fc:	0019      	movs	r1, r3
 80022fe:	250a      	movs	r5, #10
 8002300:	197b      	adds	r3, r7, r5
 8002302:	1c22      	adds	r2, r4, #0
 8002304:	801a      	strh	r2, [r3, #0]
 8002306:	2308      	movs	r3, #8
 8002308:	18fb      	adds	r3, r7, r3
 800230a:	1c02      	adds	r2, r0, #0
 800230c:	801a      	strh	r2, [r3, #0]
 800230e:	1dbb      	adds	r3, r7, #6
 8002310:	1c0a      	adds	r2, r1, #0
 8002312:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002314:	1dbb      	adds	r3, r7, #6
 8002316:	881b      	ldrh	r3, [r3, #0]
 8002318:	b2da      	uxtb	r2, r3
 800231a:	197b      	adds	r3, r7, r5
 800231c:	8819      	ldrh	r1, [r3, #0]
 800231e:	68f8      	ldr	r0, [r7, #12]
 8002320:	4b23      	ldr	r3, [pc, #140]	; (80023b0 <I2C_RequestMemoryRead+0xc0>)
 8002322:	9300      	str	r3, [sp, #0]
 8002324:	2300      	movs	r3, #0
 8002326:	f000 f99b 	bl	8002660 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800232a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800232c:	6a39      	ldr	r1, [r7, #32]
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	0018      	movs	r0, r3
 8002332:	f000 f8a0 	bl	8002476 <I2C_WaitOnTXISFlagUntilTimeout>
 8002336:	1e03      	subs	r3, r0, #0
 8002338:	d001      	beq.n	800233e <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	e033      	b.n	80023a6 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800233e:	1dbb      	adds	r3, r7, #6
 8002340:	881b      	ldrh	r3, [r3, #0]
 8002342:	2b01      	cmp	r3, #1
 8002344:	d107      	bne.n	8002356 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002346:	2308      	movs	r3, #8
 8002348:	18fb      	adds	r3, r7, r3
 800234a:	881b      	ldrh	r3, [r3, #0]
 800234c:	b2da      	uxtb	r2, r3
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	629a      	str	r2, [r3, #40]	; 0x28
 8002354:	e019      	b.n	800238a <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002356:	2308      	movs	r3, #8
 8002358:	18fb      	adds	r3, r7, r3
 800235a:	881b      	ldrh	r3, [r3, #0]
 800235c:	0a1b      	lsrs	r3, r3, #8
 800235e:	b29b      	uxth	r3, r3
 8002360:	b2da      	uxtb	r2, r3
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002368:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800236a:	6a39      	ldr	r1, [r7, #32]
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	0018      	movs	r0, r3
 8002370:	f000 f881 	bl	8002476 <I2C_WaitOnTXISFlagUntilTimeout>
 8002374:	1e03      	subs	r3, r0, #0
 8002376:	d001      	beq.n	800237c <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8002378:	2301      	movs	r3, #1
 800237a:	e014      	b.n	80023a6 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800237c:	2308      	movs	r3, #8
 800237e:	18fb      	adds	r3, r7, r3
 8002380:	881b      	ldrh	r3, [r3, #0]
 8002382:	b2da      	uxtb	r2, r3
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800238a:	6a3a      	ldr	r2, [r7, #32]
 800238c:	68f8      	ldr	r0, [r7, #12]
 800238e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002390:	9300      	str	r3, [sp, #0]
 8002392:	0013      	movs	r3, r2
 8002394:	2200      	movs	r2, #0
 8002396:	2140      	movs	r1, #64	; 0x40
 8002398:	f000 f82e 	bl	80023f8 <I2C_WaitOnFlagUntilTimeout>
 800239c:	1e03      	subs	r3, r0, #0
 800239e:	d001      	beq.n	80023a4 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 80023a0:	2301      	movs	r3, #1
 80023a2:	e000      	b.n	80023a6 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 80023a4:	2300      	movs	r3, #0
}
 80023a6:	0018      	movs	r0, r3
 80023a8:	46bd      	mov	sp, r7
 80023aa:	b004      	add	sp, #16
 80023ac:	bdb0      	pop	{r4, r5, r7, pc}
 80023ae:	46c0      	nop			; (mov r8, r8)
 80023b0:	80002000 	.word	0x80002000

080023b4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b082      	sub	sp, #8
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	699b      	ldr	r3, [r3, #24]
 80023c2:	2202      	movs	r2, #2
 80023c4:	4013      	ands	r3, r2
 80023c6:	2b02      	cmp	r3, #2
 80023c8:	d103      	bne.n	80023d2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	2200      	movs	r2, #0
 80023d0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	699b      	ldr	r3, [r3, #24]
 80023d8:	2201      	movs	r2, #1
 80023da:	4013      	ands	r3, r2
 80023dc:	2b01      	cmp	r3, #1
 80023de:	d007      	beq.n	80023f0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	699a      	ldr	r2, [r3, #24]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	2101      	movs	r1, #1
 80023ec:	430a      	orrs	r2, r1
 80023ee:	619a      	str	r2, [r3, #24]
  }
}
 80023f0:	46c0      	nop			; (mov r8, r8)
 80023f2:	46bd      	mov	sp, r7
 80023f4:	b002      	add	sp, #8
 80023f6:	bd80      	pop	{r7, pc}

080023f8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b084      	sub	sp, #16
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	60f8      	str	r0, [r7, #12]
 8002400:	60b9      	str	r1, [r7, #8]
 8002402:	603b      	str	r3, [r7, #0]
 8002404:	1dfb      	adds	r3, r7, #7
 8002406:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002408:	e021      	b.n	800244e <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	3301      	adds	r3, #1
 800240e:	d01e      	beq.n	800244e <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002410:	f7fe ff98 	bl	8001344 <HAL_GetTick>
 8002414:	0002      	movs	r2, r0
 8002416:	69bb      	ldr	r3, [r7, #24]
 8002418:	1ad3      	subs	r3, r2, r3
 800241a:	683a      	ldr	r2, [r7, #0]
 800241c:	429a      	cmp	r2, r3
 800241e:	d302      	bcc.n	8002426 <I2C_WaitOnFlagUntilTimeout+0x2e>
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d113      	bne.n	800244e <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800242a:	2220      	movs	r2, #32
 800242c:	431a      	orrs	r2, r3
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	2241      	movs	r2, #65	; 0x41
 8002436:	2120      	movs	r1, #32
 8002438:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	2242      	movs	r2, #66	; 0x42
 800243e:	2100      	movs	r1, #0
 8002440:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	2240      	movs	r2, #64	; 0x40
 8002446:	2100      	movs	r1, #0
 8002448:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	e00f      	b.n	800246e <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	699b      	ldr	r3, [r3, #24]
 8002454:	68ba      	ldr	r2, [r7, #8]
 8002456:	4013      	ands	r3, r2
 8002458:	68ba      	ldr	r2, [r7, #8]
 800245a:	1ad3      	subs	r3, r2, r3
 800245c:	425a      	negs	r2, r3
 800245e:	4153      	adcs	r3, r2
 8002460:	b2db      	uxtb	r3, r3
 8002462:	001a      	movs	r2, r3
 8002464:	1dfb      	adds	r3, r7, #7
 8002466:	781b      	ldrb	r3, [r3, #0]
 8002468:	429a      	cmp	r2, r3
 800246a:	d0ce      	beq.n	800240a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800246c:	2300      	movs	r3, #0
}
 800246e:	0018      	movs	r0, r3
 8002470:	46bd      	mov	sp, r7
 8002472:	b004      	add	sp, #16
 8002474:	bd80      	pop	{r7, pc}

08002476 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002476:	b580      	push	{r7, lr}
 8002478:	b084      	sub	sp, #16
 800247a:	af00      	add	r7, sp, #0
 800247c:	60f8      	str	r0, [r7, #12]
 800247e:	60b9      	str	r1, [r7, #8]
 8002480:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002482:	e02b      	b.n	80024dc <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002484:	687a      	ldr	r2, [r7, #4]
 8002486:	68b9      	ldr	r1, [r7, #8]
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	0018      	movs	r0, r3
 800248c:	f000 f86e 	bl	800256c <I2C_IsAcknowledgeFailed>
 8002490:	1e03      	subs	r3, r0, #0
 8002492:	d001      	beq.n	8002498 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002494:	2301      	movs	r3, #1
 8002496:	e029      	b.n	80024ec <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	3301      	adds	r3, #1
 800249c:	d01e      	beq.n	80024dc <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800249e:	f7fe ff51 	bl	8001344 <HAL_GetTick>
 80024a2:	0002      	movs	r2, r0
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	1ad3      	subs	r3, r2, r3
 80024a8:	68ba      	ldr	r2, [r7, #8]
 80024aa:	429a      	cmp	r2, r3
 80024ac:	d302      	bcc.n	80024b4 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80024ae:	68bb      	ldr	r3, [r7, #8]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d113      	bne.n	80024dc <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024b8:	2220      	movs	r2, #32
 80024ba:	431a      	orrs	r2, r3
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	2241      	movs	r2, #65	; 0x41
 80024c4:	2120      	movs	r1, #32
 80024c6:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	2242      	movs	r2, #66	; 0x42
 80024cc:	2100      	movs	r1, #0
 80024ce:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	2240      	movs	r2, #64	; 0x40
 80024d4:	2100      	movs	r1, #0
 80024d6:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80024d8:	2301      	movs	r3, #1
 80024da:	e007      	b.n	80024ec <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	699b      	ldr	r3, [r3, #24]
 80024e2:	2202      	movs	r2, #2
 80024e4:	4013      	ands	r3, r2
 80024e6:	2b02      	cmp	r3, #2
 80024e8:	d1cc      	bne.n	8002484 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80024ea:	2300      	movs	r3, #0
}
 80024ec:	0018      	movs	r0, r3
 80024ee:	46bd      	mov	sp, r7
 80024f0:	b004      	add	sp, #16
 80024f2:	bd80      	pop	{r7, pc}

080024f4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b084      	sub	sp, #16
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	60f8      	str	r0, [r7, #12]
 80024fc:	60b9      	str	r1, [r7, #8]
 80024fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002500:	e028      	b.n	8002554 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002502:	687a      	ldr	r2, [r7, #4]
 8002504:	68b9      	ldr	r1, [r7, #8]
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	0018      	movs	r0, r3
 800250a:	f000 f82f 	bl	800256c <I2C_IsAcknowledgeFailed>
 800250e:	1e03      	subs	r3, r0, #0
 8002510:	d001      	beq.n	8002516 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002512:	2301      	movs	r3, #1
 8002514:	e026      	b.n	8002564 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002516:	f7fe ff15 	bl	8001344 <HAL_GetTick>
 800251a:	0002      	movs	r2, r0
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	1ad3      	subs	r3, r2, r3
 8002520:	68ba      	ldr	r2, [r7, #8]
 8002522:	429a      	cmp	r2, r3
 8002524:	d302      	bcc.n	800252c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002526:	68bb      	ldr	r3, [r7, #8]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d113      	bne.n	8002554 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002530:	2220      	movs	r2, #32
 8002532:	431a      	orrs	r2, r3
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	2241      	movs	r2, #65	; 0x41
 800253c:	2120      	movs	r1, #32
 800253e:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	2242      	movs	r2, #66	; 0x42
 8002544:	2100      	movs	r1, #0
 8002546:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	2240      	movs	r2, #64	; 0x40
 800254c:	2100      	movs	r1, #0
 800254e:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8002550:	2301      	movs	r3, #1
 8002552:	e007      	b.n	8002564 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	699b      	ldr	r3, [r3, #24]
 800255a:	2220      	movs	r2, #32
 800255c:	4013      	ands	r3, r2
 800255e:	2b20      	cmp	r3, #32
 8002560:	d1cf      	bne.n	8002502 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002562:	2300      	movs	r3, #0
}
 8002564:	0018      	movs	r0, r3
 8002566:	46bd      	mov	sp, r7
 8002568:	b004      	add	sp, #16
 800256a:	bd80      	pop	{r7, pc}

0800256c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b084      	sub	sp, #16
 8002570:	af00      	add	r7, sp, #0
 8002572:	60f8      	str	r0, [r7, #12]
 8002574:	60b9      	str	r1, [r7, #8]
 8002576:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	699b      	ldr	r3, [r3, #24]
 800257e:	2210      	movs	r2, #16
 8002580:	4013      	ands	r3, r2
 8002582:	2b10      	cmp	r3, #16
 8002584:	d164      	bne.n	8002650 <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	685a      	ldr	r2, [r3, #4]
 800258c:	2380      	movs	r3, #128	; 0x80
 800258e:	049b      	lsls	r3, r3, #18
 8002590:	401a      	ands	r2, r3
 8002592:	2380      	movs	r3, #128	; 0x80
 8002594:	049b      	lsls	r3, r3, #18
 8002596:	429a      	cmp	r2, r3
 8002598:	d02b      	beq.n	80025f2 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	685a      	ldr	r2, [r3, #4]
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	2180      	movs	r1, #128	; 0x80
 80025a6:	01c9      	lsls	r1, r1, #7
 80025a8:	430a      	orrs	r2, r1
 80025aa:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80025ac:	e021      	b.n	80025f2 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80025ae:	68bb      	ldr	r3, [r7, #8]
 80025b0:	3301      	adds	r3, #1
 80025b2:	d01e      	beq.n	80025f2 <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025b4:	f7fe fec6 	bl	8001344 <HAL_GetTick>
 80025b8:	0002      	movs	r2, r0
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	1ad3      	subs	r3, r2, r3
 80025be:	68ba      	ldr	r2, [r7, #8]
 80025c0:	429a      	cmp	r2, r3
 80025c2:	d302      	bcc.n	80025ca <I2C_IsAcknowledgeFailed+0x5e>
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d113      	bne.n	80025f2 <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ce:	2220      	movs	r2, #32
 80025d0:	431a      	orrs	r2, r3
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	2241      	movs	r2, #65	; 0x41
 80025da:	2120      	movs	r1, #32
 80025dc:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	2242      	movs	r2, #66	; 0x42
 80025e2:	2100      	movs	r1, #0
 80025e4:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	2240      	movs	r2, #64	; 0x40
 80025ea:	2100      	movs	r1, #0
 80025ec:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	e02f      	b.n	8002652 <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	699b      	ldr	r3, [r3, #24]
 80025f8:	2220      	movs	r2, #32
 80025fa:	4013      	ands	r3, r2
 80025fc:	2b20      	cmp	r3, #32
 80025fe:	d1d6      	bne.n	80025ae <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	2210      	movs	r2, #16
 8002606:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	2220      	movs	r2, #32
 800260e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	0018      	movs	r0, r3
 8002614:	f7ff fece 	bl	80023b4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	685a      	ldr	r2, [r3, #4]
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	490e      	ldr	r1, [pc, #56]	; (800265c <I2C_IsAcknowledgeFailed+0xf0>)
 8002624:	400a      	ands	r2, r1
 8002626:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800262c:	2204      	movs	r2, #4
 800262e:	431a      	orrs	r2, r3
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	2241      	movs	r2, #65	; 0x41
 8002638:	2120      	movs	r1, #32
 800263a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	2242      	movs	r2, #66	; 0x42
 8002640:	2100      	movs	r1, #0
 8002642:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	2240      	movs	r2, #64	; 0x40
 8002648:	2100      	movs	r1, #0
 800264a:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800264c:	2301      	movs	r3, #1
 800264e:	e000      	b.n	8002652 <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 8002650:	2300      	movs	r3, #0
}
 8002652:	0018      	movs	r0, r3
 8002654:	46bd      	mov	sp, r7
 8002656:	b004      	add	sp, #16
 8002658:	bd80      	pop	{r7, pc}
 800265a:	46c0      	nop			; (mov r8, r8)
 800265c:	fe00e800 	.word	0xfe00e800

08002660 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002660:	b590      	push	{r4, r7, lr}
 8002662:	b085      	sub	sp, #20
 8002664:	af00      	add	r7, sp, #0
 8002666:	60f8      	str	r0, [r7, #12]
 8002668:	0008      	movs	r0, r1
 800266a:	0011      	movs	r1, r2
 800266c:	607b      	str	r3, [r7, #4]
 800266e:	240a      	movs	r4, #10
 8002670:	193b      	adds	r3, r7, r4
 8002672:	1c02      	adds	r2, r0, #0
 8002674:	801a      	strh	r2, [r3, #0]
 8002676:	2009      	movs	r0, #9
 8002678:	183b      	adds	r3, r7, r0
 800267a:	1c0a      	adds	r2, r1, #0
 800267c:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	6a3a      	ldr	r2, [r7, #32]
 8002686:	0d51      	lsrs	r1, r2, #21
 8002688:	2280      	movs	r2, #128	; 0x80
 800268a:	00d2      	lsls	r2, r2, #3
 800268c:	400a      	ands	r2, r1
 800268e:	490e      	ldr	r1, [pc, #56]	; (80026c8 <I2C_TransferConfig+0x68>)
 8002690:	430a      	orrs	r2, r1
 8002692:	43d2      	mvns	r2, r2
 8002694:	401a      	ands	r2, r3
 8002696:	0011      	movs	r1, r2
 8002698:	193b      	adds	r3, r7, r4
 800269a:	881b      	ldrh	r3, [r3, #0]
 800269c:	059b      	lsls	r3, r3, #22
 800269e:	0d9a      	lsrs	r2, r3, #22
 80026a0:	183b      	adds	r3, r7, r0
 80026a2:	781b      	ldrb	r3, [r3, #0]
 80026a4:	0418      	lsls	r0, r3, #16
 80026a6:	23ff      	movs	r3, #255	; 0xff
 80026a8:	041b      	lsls	r3, r3, #16
 80026aa:	4003      	ands	r3, r0
 80026ac:	431a      	orrs	r2, r3
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	431a      	orrs	r2, r3
 80026b2:	6a3b      	ldr	r3, [r7, #32]
 80026b4:	431a      	orrs	r2, r3
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	430a      	orrs	r2, r1
 80026bc:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 80026be:	46c0      	nop			; (mov r8, r8)
 80026c0:	46bd      	mov	sp, r7
 80026c2:	b005      	add	sp, #20
 80026c4:	bd90      	pop	{r4, r7, pc}
 80026c6:	46c0      	nop			; (mov r8, r8)
 80026c8:	03ff63ff 	.word	0x03ff63ff

080026cc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b082      	sub	sp, #8
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
 80026d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2241      	movs	r2, #65	; 0x41
 80026da:	5c9b      	ldrb	r3, [r3, r2]
 80026dc:	b2db      	uxtb	r3, r3
 80026de:	2b20      	cmp	r3, #32
 80026e0:	d138      	bne.n	8002754 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2240      	movs	r2, #64	; 0x40
 80026e6:	5c9b      	ldrb	r3, [r3, r2]
 80026e8:	2b01      	cmp	r3, #1
 80026ea:	d101      	bne.n	80026f0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80026ec:	2302      	movs	r3, #2
 80026ee:	e032      	b.n	8002756 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2240      	movs	r2, #64	; 0x40
 80026f4:	2101      	movs	r1, #1
 80026f6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2241      	movs	r2, #65	; 0x41
 80026fc:	2124      	movs	r1, #36	; 0x24
 80026fe:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	681a      	ldr	r2, [r3, #0]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	2101      	movs	r1, #1
 800270c:	438a      	bics	r2, r1
 800270e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	681a      	ldr	r2, [r3, #0]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4911      	ldr	r1, [pc, #68]	; (8002760 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 800271c:	400a      	ands	r2, r1
 800271e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	6819      	ldr	r1, [r3, #0]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	683a      	ldr	r2, [r7, #0]
 800272c:	430a      	orrs	r2, r1
 800272e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	681a      	ldr	r2, [r3, #0]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	2101      	movs	r1, #1
 800273c:	430a      	orrs	r2, r1
 800273e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2241      	movs	r2, #65	; 0x41
 8002744:	2120      	movs	r1, #32
 8002746:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2240      	movs	r2, #64	; 0x40
 800274c:	2100      	movs	r1, #0
 800274e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002750:	2300      	movs	r3, #0
 8002752:	e000      	b.n	8002756 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002754:	2302      	movs	r3, #2
  }
}
 8002756:	0018      	movs	r0, r3
 8002758:	46bd      	mov	sp, r7
 800275a:	b002      	add	sp, #8
 800275c:	bd80      	pop	{r7, pc}
 800275e:	46c0      	nop			; (mov r8, r8)
 8002760:	ffffefff 	.word	0xffffefff

08002764 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b084      	sub	sp, #16
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
 800276c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2241      	movs	r2, #65	; 0x41
 8002772:	5c9b      	ldrb	r3, [r3, r2]
 8002774:	b2db      	uxtb	r3, r3
 8002776:	2b20      	cmp	r3, #32
 8002778:	d139      	bne.n	80027ee <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2240      	movs	r2, #64	; 0x40
 800277e:	5c9b      	ldrb	r3, [r3, r2]
 8002780:	2b01      	cmp	r3, #1
 8002782:	d101      	bne.n	8002788 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002784:	2302      	movs	r3, #2
 8002786:	e033      	b.n	80027f0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2240      	movs	r2, #64	; 0x40
 800278c:	2101      	movs	r1, #1
 800278e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2241      	movs	r2, #65	; 0x41
 8002794:	2124      	movs	r1, #36	; 0x24
 8002796:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	681a      	ldr	r2, [r3, #0]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	2101      	movs	r1, #1
 80027a4:	438a      	bics	r2, r1
 80027a6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	4a11      	ldr	r2, [pc, #68]	; (80027f8 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80027b4:	4013      	ands	r3, r2
 80027b6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	021b      	lsls	r3, r3, #8
 80027bc:	68fa      	ldr	r2, [r7, #12]
 80027be:	4313      	orrs	r3, r2
 80027c0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	68fa      	ldr	r2, [r7, #12]
 80027c8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	681a      	ldr	r2, [r3, #0]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	2101      	movs	r1, #1
 80027d6:	430a      	orrs	r2, r1
 80027d8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2241      	movs	r2, #65	; 0x41
 80027de:	2120      	movs	r1, #32
 80027e0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2240      	movs	r2, #64	; 0x40
 80027e6:	2100      	movs	r1, #0
 80027e8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80027ea:	2300      	movs	r3, #0
 80027ec:	e000      	b.n	80027f0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80027ee:	2302      	movs	r3, #2
  }
}
 80027f0:	0018      	movs	r0, r3
 80027f2:	46bd      	mov	sp, r7
 80027f4:	b004      	add	sp, #16
 80027f6:	bd80      	pop	{r7, pc}
 80027f8:	fffff0ff 	.word	0xfffff0ff

080027fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b088      	sub	sp, #32
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d102      	bne.n	8002810 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800280a:	2301      	movs	r3, #1
 800280c:	f000 fb76 	bl	8002efc <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	2201      	movs	r2, #1
 8002816:	4013      	ands	r3, r2
 8002818:	d100      	bne.n	800281c <HAL_RCC_OscConfig+0x20>
 800281a:	e08e      	b.n	800293a <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800281c:	4bc5      	ldr	r3, [pc, #788]	; (8002b34 <HAL_RCC_OscConfig+0x338>)
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	220c      	movs	r2, #12
 8002822:	4013      	ands	r3, r2
 8002824:	2b04      	cmp	r3, #4
 8002826:	d00e      	beq.n	8002846 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002828:	4bc2      	ldr	r3, [pc, #776]	; (8002b34 <HAL_RCC_OscConfig+0x338>)
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	220c      	movs	r2, #12
 800282e:	4013      	ands	r3, r2
 8002830:	2b08      	cmp	r3, #8
 8002832:	d117      	bne.n	8002864 <HAL_RCC_OscConfig+0x68>
 8002834:	4bbf      	ldr	r3, [pc, #764]	; (8002b34 <HAL_RCC_OscConfig+0x338>)
 8002836:	685a      	ldr	r2, [r3, #4]
 8002838:	23c0      	movs	r3, #192	; 0xc0
 800283a:	025b      	lsls	r3, r3, #9
 800283c:	401a      	ands	r2, r3
 800283e:	2380      	movs	r3, #128	; 0x80
 8002840:	025b      	lsls	r3, r3, #9
 8002842:	429a      	cmp	r2, r3
 8002844:	d10e      	bne.n	8002864 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002846:	4bbb      	ldr	r3, [pc, #748]	; (8002b34 <HAL_RCC_OscConfig+0x338>)
 8002848:	681a      	ldr	r2, [r3, #0]
 800284a:	2380      	movs	r3, #128	; 0x80
 800284c:	029b      	lsls	r3, r3, #10
 800284e:	4013      	ands	r3, r2
 8002850:	d100      	bne.n	8002854 <HAL_RCC_OscConfig+0x58>
 8002852:	e071      	b.n	8002938 <HAL_RCC_OscConfig+0x13c>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d000      	beq.n	800285e <HAL_RCC_OscConfig+0x62>
 800285c:	e06c      	b.n	8002938 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	f000 fb4c 	bl	8002efc <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	2b01      	cmp	r3, #1
 800286a:	d107      	bne.n	800287c <HAL_RCC_OscConfig+0x80>
 800286c:	4bb1      	ldr	r3, [pc, #708]	; (8002b34 <HAL_RCC_OscConfig+0x338>)
 800286e:	681a      	ldr	r2, [r3, #0]
 8002870:	4bb0      	ldr	r3, [pc, #704]	; (8002b34 <HAL_RCC_OscConfig+0x338>)
 8002872:	2180      	movs	r1, #128	; 0x80
 8002874:	0249      	lsls	r1, r1, #9
 8002876:	430a      	orrs	r2, r1
 8002878:	601a      	str	r2, [r3, #0]
 800287a:	e02f      	b.n	80028dc <HAL_RCC_OscConfig+0xe0>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d10c      	bne.n	800289e <HAL_RCC_OscConfig+0xa2>
 8002884:	4bab      	ldr	r3, [pc, #684]	; (8002b34 <HAL_RCC_OscConfig+0x338>)
 8002886:	681a      	ldr	r2, [r3, #0]
 8002888:	4baa      	ldr	r3, [pc, #680]	; (8002b34 <HAL_RCC_OscConfig+0x338>)
 800288a:	49ab      	ldr	r1, [pc, #684]	; (8002b38 <HAL_RCC_OscConfig+0x33c>)
 800288c:	400a      	ands	r2, r1
 800288e:	601a      	str	r2, [r3, #0]
 8002890:	4ba8      	ldr	r3, [pc, #672]	; (8002b34 <HAL_RCC_OscConfig+0x338>)
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	4ba7      	ldr	r3, [pc, #668]	; (8002b34 <HAL_RCC_OscConfig+0x338>)
 8002896:	49a9      	ldr	r1, [pc, #676]	; (8002b3c <HAL_RCC_OscConfig+0x340>)
 8002898:	400a      	ands	r2, r1
 800289a:	601a      	str	r2, [r3, #0]
 800289c:	e01e      	b.n	80028dc <HAL_RCC_OscConfig+0xe0>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	2b05      	cmp	r3, #5
 80028a4:	d10e      	bne.n	80028c4 <HAL_RCC_OscConfig+0xc8>
 80028a6:	4ba3      	ldr	r3, [pc, #652]	; (8002b34 <HAL_RCC_OscConfig+0x338>)
 80028a8:	681a      	ldr	r2, [r3, #0]
 80028aa:	4ba2      	ldr	r3, [pc, #648]	; (8002b34 <HAL_RCC_OscConfig+0x338>)
 80028ac:	2180      	movs	r1, #128	; 0x80
 80028ae:	02c9      	lsls	r1, r1, #11
 80028b0:	430a      	orrs	r2, r1
 80028b2:	601a      	str	r2, [r3, #0]
 80028b4:	4b9f      	ldr	r3, [pc, #636]	; (8002b34 <HAL_RCC_OscConfig+0x338>)
 80028b6:	681a      	ldr	r2, [r3, #0]
 80028b8:	4b9e      	ldr	r3, [pc, #632]	; (8002b34 <HAL_RCC_OscConfig+0x338>)
 80028ba:	2180      	movs	r1, #128	; 0x80
 80028bc:	0249      	lsls	r1, r1, #9
 80028be:	430a      	orrs	r2, r1
 80028c0:	601a      	str	r2, [r3, #0]
 80028c2:	e00b      	b.n	80028dc <HAL_RCC_OscConfig+0xe0>
 80028c4:	4b9b      	ldr	r3, [pc, #620]	; (8002b34 <HAL_RCC_OscConfig+0x338>)
 80028c6:	681a      	ldr	r2, [r3, #0]
 80028c8:	4b9a      	ldr	r3, [pc, #616]	; (8002b34 <HAL_RCC_OscConfig+0x338>)
 80028ca:	499b      	ldr	r1, [pc, #620]	; (8002b38 <HAL_RCC_OscConfig+0x33c>)
 80028cc:	400a      	ands	r2, r1
 80028ce:	601a      	str	r2, [r3, #0]
 80028d0:	4b98      	ldr	r3, [pc, #608]	; (8002b34 <HAL_RCC_OscConfig+0x338>)
 80028d2:	681a      	ldr	r2, [r3, #0]
 80028d4:	4b97      	ldr	r3, [pc, #604]	; (8002b34 <HAL_RCC_OscConfig+0x338>)
 80028d6:	4999      	ldr	r1, [pc, #612]	; (8002b3c <HAL_RCC_OscConfig+0x340>)
 80028d8:	400a      	ands	r2, r1
 80028da:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d014      	beq.n	800290e <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028e4:	f7fe fd2e 	bl	8001344 <HAL_GetTick>
 80028e8:	0003      	movs	r3, r0
 80028ea:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028ec:	e008      	b.n	8002900 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028ee:	f7fe fd29 	bl	8001344 <HAL_GetTick>
 80028f2:	0002      	movs	r2, r0
 80028f4:	69bb      	ldr	r3, [r7, #24]
 80028f6:	1ad3      	subs	r3, r2, r3
 80028f8:	2b64      	cmp	r3, #100	; 0x64
 80028fa:	d901      	bls.n	8002900 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 80028fc:	2303      	movs	r3, #3
 80028fe:	e2fd      	b.n	8002efc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002900:	4b8c      	ldr	r3, [pc, #560]	; (8002b34 <HAL_RCC_OscConfig+0x338>)
 8002902:	681a      	ldr	r2, [r3, #0]
 8002904:	2380      	movs	r3, #128	; 0x80
 8002906:	029b      	lsls	r3, r3, #10
 8002908:	4013      	ands	r3, r2
 800290a:	d0f0      	beq.n	80028ee <HAL_RCC_OscConfig+0xf2>
 800290c:	e015      	b.n	800293a <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800290e:	f7fe fd19 	bl	8001344 <HAL_GetTick>
 8002912:	0003      	movs	r3, r0
 8002914:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002916:	e008      	b.n	800292a <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002918:	f7fe fd14 	bl	8001344 <HAL_GetTick>
 800291c:	0002      	movs	r2, r0
 800291e:	69bb      	ldr	r3, [r7, #24]
 8002920:	1ad3      	subs	r3, r2, r3
 8002922:	2b64      	cmp	r3, #100	; 0x64
 8002924:	d901      	bls.n	800292a <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8002926:	2303      	movs	r3, #3
 8002928:	e2e8      	b.n	8002efc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800292a:	4b82      	ldr	r3, [pc, #520]	; (8002b34 <HAL_RCC_OscConfig+0x338>)
 800292c:	681a      	ldr	r2, [r3, #0]
 800292e:	2380      	movs	r3, #128	; 0x80
 8002930:	029b      	lsls	r3, r3, #10
 8002932:	4013      	ands	r3, r2
 8002934:	d1f0      	bne.n	8002918 <HAL_RCC_OscConfig+0x11c>
 8002936:	e000      	b.n	800293a <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002938:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	2202      	movs	r2, #2
 8002940:	4013      	ands	r3, r2
 8002942:	d100      	bne.n	8002946 <HAL_RCC_OscConfig+0x14a>
 8002944:	e06c      	b.n	8002a20 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002946:	4b7b      	ldr	r3, [pc, #492]	; (8002b34 <HAL_RCC_OscConfig+0x338>)
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	220c      	movs	r2, #12
 800294c:	4013      	ands	r3, r2
 800294e:	d00e      	beq.n	800296e <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002950:	4b78      	ldr	r3, [pc, #480]	; (8002b34 <HAL_RCC_OscConfig+0x338>)
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	220c      	movs	r2, #12
 8002956:	4013      	ands	r3, r2
 8002958:	2b08      	cmp	r3, #8
 800295a:	d11f      	bne.n	800299c <HAL_RCC_OscConfig+0x1a0>
 800295c:	4b75      	ldr	r3, [pc, #468]	; (8002b34 <HAL_RCC_OscConfig+0x338>)
 800295e:	685a      	ldr	r2, [r3, #4]
 8002960:	23c0      	movs	r3, #192	; 0xc0
 8002962:	025b      	lsls	r3, r3, #9
 8002964:	401a      	ands	r2, r3
 8002966:	2380      	movs	r3, #128	; 0x80
 8002968:	021b      	lsls	r3, r3, #8
 800296a:	429a      	cmp	r2, r3
 800296c:	d116      	bne.n	800299c <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800296e:	4b71      	ldr	r3, [pc, #452]	; (8002b34 <HAL_RCC_OscConfig+0x338>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	2202      	movs	r2, #2
 8002974:	4013      	ands	r3, r2
 8002976:	d005      	beq.n	8002984 <HAL_RCC_OscConfig+0x188>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	68db      	ldr	r3, [r3, #12]
 800297c:	2b01      	cmp	r3, #1
 800297e:	d001      	beq.n	8002984 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8002980:	2301      	movs	r3, #1
 8002982:	e2bb      	b.n	8002efc <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002984:	4b6b      	ldr	r3, [pc, #428]	; (8002b34 <HAL_RCC_OscConfig+0x338>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	22f8      	movs	r2, #248	; 0xf8
 800298a:	4393      	bics	r3, r2
 800298c:	0019      	movs	r1, r3
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	691b      	ldr	r3, [r3, #16]
 8002992:	00da      	lsls	r2, r3, #3
 8002994:	4b67      	ldr	r3, [pc, #412]	; (8002b34 <HAL_RCC_OscConfig+0x338>)
 8002996:	430a      	orrs	r2, r1
 8002998:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800299a:	e041      	b.n	8002a20 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	68db      	ldr	r3, [r3, #12]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d024      	beq.n	80029ee <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029a4:	4b63      	ldr	r3, [pc, #396]	; (8002b34 <HAL_RCC_OscConfig+0x338>)
 80029a6:	681a      	ldr	r2, [r3, #0]
 80029a8:	4b62      	ldr	r3, [pc, #392]	; (8002b34 <HAL_RCC_OscConfig+0x338>)
 80029aa:	2101      	movs	r1, #1
 80029ac:	430a      	orrs	r2, r1
 80029ae:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029b0:	f7fe fcc8 	bl	8001344 <HAL_GetTick>
 80029b4:	0003      	movs	r3, r0
 80029b6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029b8:	e008      	b.n	80029cc <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029ba:	f7fe fcc3 	bl	8001344 <HAL_GetTick>
 80029be:	0002      	movs	r2, r0
 80029c0:	69bb      	ldr	r3, [r7, #24]
 80029c2:	1ad3      	subs	r3, r2, r3
 80029c4:	2b02      	cmp	r3, #2
 80029c6:	d901      	bls.n	80029cc <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80029c8:	2303      	movs	r3, #3
 80029ca:	e297      	b.n	8002efc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029cc:	4b59      	ldr	r3, [pc, #356]	; (8002b34 <HAL_RCC_OscConfig+0x338>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	2202      	movs	r2, #2
 80029d2:	4013      	ands	r3, r2
 80029d4:	d0f1      	beq.n	80029ba <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029d6:	4b57      	ldr	r3, [pc, #348]	; (8002b34 <HAL_RCC_OscConfig+0x338>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	22f8      	movs	r2, #248	; 0xf8
 80029dc:	4393      	bics	r3, r2
 80029de:	0019      	movs	r1, r3
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	691b      	ldr	r3, [r3, #16]
 80029e4:	00da      	lsls	r2, r3, #3
 80029e6:	4b53      	ldr	r3, [pc, #332]	; (8002b34 <HAL_RCC_OscConfig+0x338>)
 80029e8:	430a      	orrs	r2, r1
 80029ea:	601a      	str	r2, [r3, #0]
 80029ec:	e018      	b.n	8002a20 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029ee:	4b51      	ldr	r3, [pc, #324]	; (8002b34 <HAL_RCC_OscConfig+0x338>)
 80029f0:	681a      	ldr	r2, [r3, #0]
 80029f2:	4b50      	ldr	r3, [pc, #320]	; (8002b34 <HAL_RCC_OscConfig+0x338>)
 80029f4:	2101      	movs	r1, #1
 80029f6:	438a      	bics	r2, r1
 80029f8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029fa:	f7fe fca3 	bl	8001344 <HAL_GetTick>
 80029fe:	0003      	movs	r3, r0
 8002a00:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a02:	e008      	b.n	8002a16 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a04:	f7fe fc9e 	bl	8001344 <HAL_GetTick>
 8002a08:	0002      	movs	r2, r0
 8002a0a:	69bb      	ldr	r3, [r7, #24]
 8002a0c:	1ad3      	subs	r3, r2, r3
 8002a0e:	2b02      	cmp	r3, #2
 8002a10:	d901      	bls.n	8002a16 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8002a12:	2303      	movs	r3, #3
 8002a14:	e272      	b.n	8002efc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a16:	4b47      	ldr	r3, [pc, #284]	; (8002b34 <HAL_RCC_OscConfig+0x338>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	2202      	movs	r2, #2
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	d1f1      	bne.n	8002a04 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	2208      	movs	r2, #8
 8002a26:	4013      	ands	r3, r2
 8002a28:	d036      	beq.n	8002a98 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	69db      	ldr	r3, [r3, #28]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d019      	beq.n	8002a66 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a32:	4b40      	ldr	r3, [pc, #256]	; (8002b34 <HAL_RCC_OscConfig+0x338>)
 8002a34:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a36:	4b3f      	ldr	r3, [pc, #252]	; (8002b34 <HAL_RCC_OscConfig+0x338>)
 8002a38:	2101      	movs	r1, #1
 8002a3a:	430a      	orrs	r2, r1
 8002a3c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a3e:	f7fe fc81 	bl	8001344 <HAL_GetTick>
 8002a42:	0003      	movs	r3, r0
 8002a44:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a46:	e008      	b.n	8002a5a <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a48:	f7fe fc7c 	bl	8001344 <HAL_GetTick>
 8002a4c:	0002      	movs	r2, r0
 8002a4e:	69bb      	ldr	r3, [r7, #24]
 8002a50:	1ad3      	subs	r3, r2, r3
 8002a52:	2b02      	cmp	r3, #2
 8002a54:	d901      	bls.n	8002a5a <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8002a56:	2303      	movs	r3, #3
 8002a58:	e250      	b.n	8002efc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a5a:	4b36      	ldr	r3, [pc, #216]	; (8002b34 <HAL_RCC_OscConfig+0x338>)
 8002a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a5e:	2202      	movs	r2, #2
 8002a60:	4013      	ands	r3, r2
 8002a62:	d0f1      	beq.n	8002a48 <HAL_RCC_OscConfig+0x24c>
 8002a64:	e018      	b.n	8002a98 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a66:	4b33      	ldr	r3, [pc, #204]	; (8002b34 <HAL_RCC_OscConfig+0x338>)
 8002a68:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a6a:	4b32      	ldr	r3, [pc, #200]	; (8002b34 <HAL_RCC_OscConfig+0x338>)
 8002a6c:	2101      	movs	r1, #1
 8002a6e:	438a      	bics	r2, r1
 8002a70:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a72:	f7fe fc67 	bl	8001344 <HAL_GetTick>
 8002a76:	0003      	movs	r3, r0
 8002a78:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a7a:	e008      	b.n	8002a8e <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a7c:	f7fe fc62 	bl	8001344 <HAL_GetTick>
 8002a80:	0002      	movs	r2, r0
 8002a82:	69bb      	ldr	r3, [r7, #24]
 8002a84:	1ad3      	subs	r3, r2, r3
 8002a86:	2b02      	cmp	r3, #2
 8002a88:	d901      	bls.n	8002a8e <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8002a8a:	2303      	movs	r3, #3
 8002a8c:	e236      	b.n	8002efc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a8e:	4b29      	ldr	r3, [pc, #164]	; (8002b34 <HAL_RCC_OscConfig+0x338>)
 8002a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a92:	2202      	movs	r2, #2
 8002a94:	4013      	ands	r3, r2
 8002a96:	d1f1      	bne.n	8002a7c <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	2204      	movs	r2, #4
 8002a9e:	4013      	ands	r3, r2
 8002aa0:	d100      	bne.n	8002aa4 <HAL_RCC_OscConfig+0x2a8>
 8002aa2:	e0b5      	b.n	8002c10 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002aa4:	201f      	movs	r0, #31
 8002aa6:	183b      	adds	r3, r7, r0
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002aac:	4b21      	ldr	r3, [pc, #132]	; (8002b34 <HAL_RCC_OscConfig+0x338>)
 8002aae:	69da      	ldr	r2, [r3, #28]
 8002ab0:	2380      	movs	r3, #128	; 0x80
 8002ab2:	055b      	lsls	r3, r3, #21
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	d110      	bne.n	8002ada <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ab8:	4b1e      	ldr	r3, [pc, #120]	; (8002b34 <HAL_RCC_OscConfig+0x338>)
 8002aba:	69da      	ldr	r2, [r3, #28]
 8002abc:	4b1d      	ldr	r3, [pc, #116]	; (8002b34 <HAL_RCC_OscConfig+0x338>)
 8002abe:	2180      	movs	r1, #128	; 0x80
 8002ac0:	0549      	lsls	r1, r1, #21
 8002ac2:	430a      	orrs	r2, r1
 8002ac4:	61da      	str	r2, [r3, #28]
 8002ac6:	4b1b      	ldr	r3, [pc, #108]	; (8002b34 <HAL_RCC_OscConfig+0x338>)
 8002ac8:	69da      	ldr	r2, [r3, #28]
 8002aca:	2380      	movs	r3, #128	; 0x80
 8002acc:	055b      	lsls	r3, r3, #21
 8002ace:	4013      	ands	r3, r2
 8002ad0:	60fb      	str	r3, [r7, #12]
 8002ad2:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002ad4:	183b      	adds	r3, r7, r0
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ada:	4b19      	ldr	r3, [pc, #100]	; (8002b40 <HAL_RCC_OscConfig+0x344>)
 8002adc:	681a      	ldr	r2, [r3, #0]
 8002ade:	2380      	movs	r3, #128	; 0x80
 8002ae0:	005b      	lsls	r3, r3, #1
 8002ae2:	4013      	ands	r3, r2
 8002ae4:	d11a      	bne.n	8002b1c <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ae6:	4b16      	ldr	r3, [pc, #88]	; (8002b40 <HAL_RCC_OscConfig+0x344>)
 8002ae8:	681a      	ldr	r2, [r3, #0]
 8002aea:	4b15      	ldr	r3, [pc, #84]	; (8002b40 <HAL_RCC_OscConfig+0x344>)
 8002aec:	2180      	movs	r1, #128	; 0x80
 8002aee:	0049      	lsls	r1, r1, #1
 8002af0:	430a      	orrs	r2, r1
 8002af2:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002af4:	f7fe fc26 	bl	8001344 <HAL_GetTick>
 8002af8:	0003      	movs	r3, r0
 8002afa:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002afc:	e008      	b.n	8002b10 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002afe:	f7fe fc21 	bl	8001344 <HAL_GetTick>
 8002b02:	0002      	movs	r2, r0
 8002b04:	69bb      	ldr	r3, [r7, #24]
 8002b06:	1ad3      	subs	r3, r2, r3
 8002b08:	2b64      	cmp	r3, #100	; 0x64
 8002b0a:	d901      	bls.n	8002b10 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8002b0c:	2303      	movs	r3, #3
 8002b0e:	e1f5      	b.n	8002efc <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b10:	4b0b      	ldr	r3, [pc, #44]	; (8002b40 <HAL_RCC_OscConfig+0x344>)
 8002b12:	681a      	ldr	r2, [r3, #0]
 8002b14:	2380      	movs	r3, #128	; 0x80
 8002b16:	005b      	lsls	r3, r3, #1
 8002b18:	4013      	ands	r3, r2
 8002b1a:	d0f0      	beq.n	8002afe <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	2b01      	cmp	r3, #1
 8002b22:	d10f      	bne.n	8002b44 <HAL_RCC_OscConfig+0x348>
 8002b24:	4b03      	ldr	r3, [pc, #12]	; (8002b34 <HAL_RCC_OscConfig+0x338>)
 8002b26:	6a1a      	ldr	r2, [r3, #32]
 8002b28:	4b02      	ldr	r3, [pc, #8]	; (8002b34 <HAL_RCC_OscConfig+0x338>)
 8002b2a:	2101      	movs	r1, #1
 8002b2c:	430a      	orrs	r2, r1
 8002b2e:	621a      	str	r2, [r3, #32]
 8002b30:	e036      	b.n	8002ba0 <HAL_RCC_OscConfig+0x3a4>
 8002b32:	46c0      	nop			; (mov r8, r8)
 8002b34:	40021000 	.word	0x40021000
 8002b38:	fffeffff 	.word	0xfffeffff
 8002b3c:	fffbffff 	.word	0xfffbffff
 8002b40:	40007000 	.word	0x40007000
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d10c      	bne.n	8002b66 <HAL_RCC_OscConfig+0x36a>
 8002b4c:	4bca      	ldr	r3, [pc, #808]	; (8002e78 <HAL_RCC_OscConfig+0x67c>)
 8002b4e:	6a1a      	ldr	r2, [r3, #32]
 8002b50:	4bc9      	ldr	r3, [pc, #804]	; (8002e78 <HAL_RCC_OscConfig+0x67c>)
 8002b52:	2101      	movs	r1, #1
 8002b54:	438a      	bics	r2, r1
 8002b56:	621a      	str	r2, [r3, #32]
 8002b58:	4bc7      	ldr	r3, [pc, #796]	; (8002e78 <HAL_RCC_OscConfig+0x67c>)
 8002b5a:	6a1a      	ldr	r2, [r3, #32]
 8002b5c:	4bc6      	ldr	r3, [pc, #792]	; (8002e78 <HAL_RCC_OscConfig+0x67c>)
 8002b5e:	2104      	movs	r1, #4
 8002b60:	438a      	bics	r2, r1
 8002b62:	621a      	str	r2, [r3, #32]
 8002b64:	e01c      	b.n	8002ba0 <HAL_RCC_OscConfig+0x3a4>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	689b      	ldr	r3, [r3, #8]
 8002b6a:	2b05      	cmp	r3, #5
 8002b6c:	d10c      	bne.n	8002b88 <HAL_RCC_OscConfig+0x38c>
 8002b6e:	4bc2      	ldr	r3, [pc, #776]	; (8002e78 <HAL_RCC_OscConfig+0x67c>)
 8002b70:	6a1a      	ldr	r2, [r3, #32]
 8002b72:	4bc1      	ldr	r3, [pc, #772]	; (8002e78 <HAL_RCC_OscConfig+0x67c>)
 8002b74:	2104      	movs	r1, #4
 8002b76:	430a      	orrs	r2, r1
 8002b78:	621a      	str	r2, [r3, #32]
 8002b7a:	4bbf      	ldr	r3, [pc, #764]	; (8002e78 <HAL_RCC_OscConfig+0x67c>)
 8002b7c:	6a1a      	ldr	r2, [r3, #32]
 8002b7e:	4bbe      	ldr	r3, [pc, #760]	; (8002e78 <HAL_RCC_OscConfig+0x67c>)
 8002b80:	2101      	movs	r1, #1
 8002b82:	430a      	orrs	r2, r1
 8002b84:	621a      	str	r2, [r3, #32]
 8002b86:	e00b      	b.n	8002ba0 <HAL_RCC_OscConfig+0x3a4>
 8002b88:	4bbb      	ldr	r3, [pc, #748]	; (8002e78 <HAL_RCC_OscConfig+0x67c>)
 8002b8a:	6a1a      	ldr	r2, [r3, #32]
 8002b8c:	4bba      	ldr	r3, [pc, #744]	; (8002e78 <HAL_RCC_OscConfig+0x67c>)
 8002b8e:	2101      	movs	r1, #1
 8002b90:	438a      	bics	r2, r1
 8002b92:	621a      	str	r2, [r3, #32]
 8002b94:	4bb8      	ldr	r3, [pc, #736]	; (8002e78 <HAL_RCC_OscConfig+0x67c>)
 8002b96:	6a1a      	ldr	r2, [r3, #32]
 8002b98:	4bb7      	ldr	r3, [pc, #732]	; (8002e78 <HAL_RCC_OscConfig+0x67c>)
 8002b9a:	2104      	movs	r1, #4
 8002b9c:	438a      	bics	r2, r1
 8002b9e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d014      	beq.n	8002bd2 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ba8:	f7fe fbcc 	bl	8001344 <HAL_GetTick>
 8002bac:	0003      	movs	r3, r0
 8002bae:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bb0:	e009      	b.n	8002bc6 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bb2:	f7fe fbc7 	bl	8001344 <HAL_GetTick>
 8002bb6:	0002      	movs	r2, r0
 8002bb8:	69bb      	ldr	r3, [r7, #24]
 8002bba:	1ad3      	subs	r3, r2, r3
 8002bbc:	4aaf      	ldr	r2, [pc, #700]	; (8002e7c <HAL_RCC_OscConfig+0x680>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d901      	bls.n	8002bc6 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8002bc2:	2303      	movs	r3, #3
 8002bc4:	e19a      	b.n	8002efc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bc6:	4bac      	ldr	r3, [pc, #688]	; (8002e78 <HAL_RCC_OscConfig+0x67c>)
 8002bc8:	6a1b      	ldr	r3, [r3, #32]
 8002bca:	2202      	movs	r2, #2
 8002bcc:	4013      	ands	r3, r2
 8002bce:	d0f0      	beq.n	8002bb2 <HAL_RCC_OscConfig+0x3b6>
 8002bd0:	e013      	b.n	8002bfa <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bd2:	f7fe fbb7 	bl	8001344 <HAL_GetTick>
 8002bd6:	0003      	movs	r3, r0
 8002bd8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bda:	e009      	b.n	8002bf0 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bdc:	f7fe fbb2 	bl	8001344 <HAL_GetTick>
 8002be0:	0002      	movs	r2, r0
 8002be2:	69bb      	ldr	r3, [r7, #24]
 8002be4:	1ad3      	subs	r3, r2, r3
 8002be6:	4aa5      	ldr	r2, [pc, #660]	; (8002e7c <HAL_RCC_OscConfig+0x680>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d901      	bls.n	8002bf0 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8002bec:	2303      	movs	r3, #3
 8002bee:	e185      	b.n	8002efc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bf0:	4ba1      	ldr	r3, [pc, #644]	; (8002e78 <HAL_RCC_OscConfig+0x67c>)
 8002bf2:	6a1b      	ldr	r3, [r3, #32]
 8002bf4:	2202      	movs	r2, #2
 8002bf6:	4013      	ands	r3, r2
 8002bf8:	d1f0      	bne.n	8002bdc <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002bfa:	231f      	movs	r3, #31
 8002bfc:	18fb      	adds	r3, r7, r3
 8002bfe:	781b      	ldrb	r3, [r3, #0]
 8002c00:	2b01      	cmp	r3, #1
 8002c02:	d105      	bne.n	8002c10 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c04:	4b9c      	ldr	r3, [pc, #624]	; (8002e78 <HAL_RCC_OscConfig+0x67c>)
 8002c06:	69da      	ldr	r2, [r3, #28]
 8002c08:	4b9b      	ldr	r3, [pc, #620]	; (8002e78 <HAL_RCC_OscConfig+0x67c>)
 8002c0a:	499d      	ldr	r1, [pc, #628]	; (8002e80 <HAL_RCC_OscConfig+0x684>)
 8002c0c:	400a      	ands	r2, r1
 8002c0e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	2210      	movs	r2, #16
 8002c16:	4013      	ands	r3, r2
 8002c18:	d063      	beq.n	8002ce2 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	695b      	ldr	r3, [r3, #20]
 8002c1e:	2b01      	cmp	r3, #1
 8002c20:	d12a      	bne.n	8002c78 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002c22:	4b95      	ldr	r3, [pc, #596]	; (8002e78 <HAL_RCC_OscConfig+0x67c>)
 8002c24:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c26:	4b94      	ldr	r3, [pc, #592]	; (8002e78 <HAL_RCC_OscConfig+0x67c>)
 8002c28:	2104      	movs	r1, #4
 8002c2a:	430a      	orrs	r2, r1
 8002c2c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8002c2e:	4b92      	ldr	r3, [pc, #584]	; (8002e78 <HAL_RCC_OscConfig+0x67c>)
 8002c30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c32:	4b91      	ldr	r3, [pc, #580]	; (8002e78 <HAL_RCC_OscConfig+0x67c>)
 8002c34:	2101      	movs	r1, #1
 8002c36:	430a      	orrs	r2, r1
 8002c38:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c3a:	f7fe fb83 	bl	8001344 <HAL_GetTick>
 8002c3e:	0003      	movs	r3, r0
 8002c40:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002c42:	e008      	b.n	8002c56 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002c44:	f7fe fb7e 	bl	8001344 <HAL_GetTick>
 8002c48:	0002      	movs	r2, r0
 8002c4a:	69bb      	ldr	r3, [r7, #24]
 8002c4c:	1ad3      	subs	r3, r2, r3
 8002c4e:	2b02      	cmp	r3, #2
 8002c50:	d901      	bls.n	8002c56 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8002c52:	2303      	movs	r3, #3
 8002c54:	e152      	b.n	8002efc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002c56:	4b88      	ldr	r3, [pc, #544]	; (8002e78 <HAL_RCC_OscConfig+0x67c>)
 8002c58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c5a:	2202      	movs	r2, #2
 8002c5c:	4013      	ands	r3, r2
 8002c5e:	d0f1      	beq.n	8002c44 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002c60:	4b85      	ldr	r3, [pc, #532]	; (8002e78 <HAL_RCC_OscConfig+0x67c>)
 8002c62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c64:	22f8      	movs	r2, #248	; 0xf8
 8002c66:	4393      	bics	r3, r2
 8002c68:	0019      	movs	r1, r3
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	699b      	ldr	r3, [r3, #24]
 8002c6e:	00da      	lsls	r2, r3, #3
 8002c70:	4b81      	ldr	r3, [pc, #516]	; (8002e78 <HAL_RCC_OscConfig+0x67c>)
 8002c72:	430a      	orrs	r2, r1
 8002c74:	635a      	str	r2, [r3, #52]	; 0x34
 8002c76:	e034      	b.n	8002ce2 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	695b      	ldr	r3, [r3, #20]
 8002c7c:	3305      	adds	r3, #5
 8002c7e:	d111      	bne.n	8002ca4 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002c80:	4b7d      	ldr	r3, [pc, #500]	; (8002e78 <HAL_RCC_OscConfig+0x67c>)
 8002c82:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c84:	4b7c      	ldr	r3, [pc, #496]	; (8002e78 <HAL_RCC_OscConfig+0x67c>)
 8002c86:	2104      	movs	r1, #4
 8002c88:	438a      	bics	r2, r1
 8002c8a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002c8c:	4b7a      	ldr	r3, [pc, #488]	; (8002e78 <HAL_RCC_OscConfig+0x67c>)
 8002c8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c90:	22f8      	movs	r2, #248	; 0xf8
 8002c92:	4393      	bics	r3, r2
 8002c94:	0019      	movs	r1, r3
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	699b      	ldr	r3, [r3, #24]
 8002c9a:	00da      	lsls	r2, r3, #3
 8002c9c:	4b76      	ldr	r3, [pc, #472]	; (8002e78 <HAL_RCC_OscConfig+0x67c>)
 8002c9e:	430a      	orrs	r2, r1
 8002ca0:	635a      	str	r2, [r3, #52]	; 0x34
 8002ca2:	e01e      	b.n	8002ce2 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002ca4:	4b74      	ldr	r3, [pc, #464]	; (8002e78 <HAL_RCC_OscConfig+0x67c>)
 8002ca6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ca8:	4b73      	ldr	r3, [pc, #460]	; (8002e78 <HAL_RCC_OscConfig+0x67c>)
 8002caa:	2104      	movs	r1, #4
 8002cac:	430a      	orrs	r2, r1
 8002cae:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002cb0:	4b71      	ldr	r3, [pc, #452]	; (8002e78 <HAL_RCC_OscConfig+0x67c>)
 8002cb2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002cb4:	4b70      	ldr	r3, [pc, #448]	; (8002e78 <HAL_RCC_OscConfig+0x67c>)
 8002cb6:	2101      	movs	r1, #1
 8002cb8:	438a      	bics	r2, r1
 8002cba:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cbc:	f7fe fb42 	bl	8001344 <HAL_GetTick>
 8002cc0:	0003      	movs	r3, r0
 8002cc2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002cc4:	e008      	b.n	8002cd8 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002cc6:	f7fe fb3d 	bl	8001344 <HAL_GetTick>
 8002cca:	0002      	movs	r2, r0
 8002ccc:	69bb      	ldr	r3, [r7, #24]
 8002cce:	1ad3      	subs	r3, r2, r3
 8002cd0:	2b02      	cmp	r3, #2
 8002cd2:	d901      	bls.n	8002cd8 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8002cd4:	2303      	movs	r3, #3
 8002cd6:	e111      	b.n	8002efc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002cd8:	4b67      	ldr	r3, [pc, #412]	; (8002e78 <HAL_RCC_OscConfig+0x67c>)
 8002cda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cdc:	2202      	movs	r2, #2
 8002cde:	4013      	ands	r3, r2
 8002ce0:	d1f1      	bne.n	8002cc6 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	2220      	movs	r2, #32
 8002ce8:	4013      	ands	r3, r2
 8002cea:	d05c      	beq.n	8002da6 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002cec:	4b62      	ldr	r3, [pc, #392]	; (8002e78 <HAL_RCC_OscConfig+0x67c>)
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	220c      	movs	r2, #12
 8002cf2:	4013      	ands	r3, r2
 8002cf4:	2b0c      	cmp	r3, #12
 8002cf6:	d00e      	beq.n	8002d16 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002cf8:	4b5f      	ldr	r3, [pc, #380]	; (8002e78 <HAL_RCC_OscConfig+0x67c>)
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	220c      	movs	r2, #12
 8002cfe:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002d00:	2b08      	cmp	r3, #8
 8002d02:	d114      	bne.n	8002d2e <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002d04:	4b5c      	ldr	r3, [pc, #368]	; (8002e78 <HAL_RCC_OscConfig+0x67c>)
 8002d06:	685a      	ldr	r2, [r3, #4]
 8002d08:	23c0      	movs	r3, #192	; 0xc0
 8002d0a:	025b      	lsls	r3, r3, #9
 8002d0c:	401a      	ands	r2, r3
 8002d0e:	23c0      	movs	r3, #192	; 0xc0
 8002d10:	025b      	lsls	r3, r3, #9
 8002d12:	429a      	cmp	r2, r3
 8002d14:	d10b      	bne.n	8002d2e <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002d16:	4b58      	ldr	r3, [pc, #352]	; (8002e78 <HAL_RCC_OscConfig+0x67c>)
 8002d18:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d1a:	2380      	movs	r3, #128	; 0x80
 8002d1c:	025b      	lsls	r3, r3, #9
 8002d1e:	4013      	ands	r3, r2
 8002d20:	d040      	beq.n	8002da4 <HAL_RCC_OscConfig+0x5a8>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6a1b      	ldr	r3, [r3, #32]
 8002d26:	2b01      	cmp	r3, #1
 8002d28:	d03c      	beq.n	8002da4 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	e0e6      	b.n	8002efc <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6a1b      	ldr	r3, [r3, #32]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d01b      	beq.n	8002d6e <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8002d36:	4b50      	ldr	r3, [pc, #320]	; (8002e78 <HAL_RCC_OscConfig+0x67c>)
 8002d38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d3a:	4b4f      	ldr	r3, [pc, #316]	; (8002e78 <HAL_RCC_OscConfig+0x67c>)
 8002d3c:	2180      	movs	r1, #128	; 0x80
 8002d3e:	0249      	lsls	r1, r1, #9
 8002d40:	430a      	orrs	r2, r1
 8002d42:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d44:	f7fe fafe 	bl	8001344 <HAL_GetTick>
 8002d48:	0003      	movs	r3, r0
 8002d4a:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002d4c:	e008      	b.n	8002d60 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002d4e:	f7fe faf9 	bl	8001344 <HAL_GetTick>
 8002d52:	0002      	movs	r2, r0
 8002d54:	69bb      	ldr	r3, [r7, #24]
 8002d56:	1ad3      	subs	r3, r2, r3
 8002d58:	2b02      	cmp	r3, #2
 8002d5a:	d901      	bls.n	8002d60 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8002d5c:	2303      	movs	r3, #3
 8002d5e:	e0cd      	b.n	8002efc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002d60:	4b45      	ldr	r3, [pc, #276]	; (8002e78 <HAL_RCC_OscConfig+0x67c>)
 8002d62:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d64:	2380      	movs	r3, #128	; 0x80
 8002d66:	025b      	lsls	r3, r3, #9
 8002d68:	4013      	ands	r3, r2
 8002d6a:	d0f0      	beq.n	8002d4e <HAL_RCC_OscConfig+0x552>
 8002d6c:	e01b      	b.n	8002da6 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8002d6e:	4b42      	ldr	r3, [pc, #264]	; (8002e78 <HAL_RCC_OscConfig+0x67c>)
 8002d70:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d72:	4b41      	ldr	r3, [pc, #260]	; (8002e78 <HAL_RCC_OscConfig+0x67c>)
 8002d74:	4943      	ldr	r1, [pc, #268]	; (8002e84 <HAL_RCC_OscConfig+0x688>)
 8002d76:	400a      	ands	r2, r1
 8002d78:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d7a:	f7fe fae3 	bl	8001344 <HAL_GetTick>
 8002d7e:	0003      	movs	r3, r0
 8002d80:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002d82:	e008      	b.n	8002d96 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002d84:	f7fe fade 	bl	8001344 <HAL_GetTick>
 8002d88:	0002      	movs	r2, r0
 8002d8a:	69bb      	ldr	r3, [r7, #24]
 8002d8c:	1ad3      	subs	r3, r2, r3
 8002d8e:	2b02      	cmp	r3, #2
 8002d90:	d901      	bls.n	8002d96 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8002d92:	2303      	movs	r3, #3
 8002d94:	e0b2      	b.n	8002efc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002d96:	4b38      	ldr	r3, [pc, #224]	; (8002e78 <HAL_RCC_OscConfig+0x67c>)
 8002d98:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d9a:	2380      	movs	r3, #128	; 0x80
 8002d9c:	025b      	lsls	r3, r3, #9
 8002d9e:	4013      	ands	r3, r2
 8002da0:	d1f0      	bne.n	8002d84 <HAL_RCC_OscConfig+0x588>
 8002da2:	e000      	b.n	8002da6 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002da4:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d100      	bne.n	8002db0 <HAL_RCC_OscConfig+0x5b4>
 8002dae:	e0a4      	b.n	8002efa <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002db0:	4b31      	ldr	r3, [pc, #196]	; (8002e78 <HAL_RCC_OscConfig+0x67c>)
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	220c      	movs	r2, #12
 8002db6:	4013      	ands	r3, r2
 8002db8:	2b08      	cmp	r3, #8
 8002dba:	d100      	bne.n	8002dbe <HAL_RCC_OscConfig+0x5c2>
 8002dbc:	e078      	b.n	8002eb0 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc2:	2b02      	cmp	r3, #2
 8002dc4:	d14c      	bne.n	8002e60 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dc6:	4b2c      	ldr	r3, [pc, #176]	; (8002e78 <HAL_RCC_OscConfig+0x67c>)
 8002dc8:	681a      	ldr	r2, [r3, #0]
 8002dca:	4b2b      	ldr	r3, [pc, #172]	; (8002e78 <HAL_RCC_OscConfig+0x67c>)
 8002dcc:	492e      	ldr	r1, [pc, #184]	; (8002e88 <HAL_RCC_OscConfig+0x68c>)
 8002dce:	400a      	ands	r2, r1
 8002dd0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dd2:	f7fe fab7 	bl	8001344 <HAL_GetTick>
 8002dd6:	0003      	movs	r3, r0
 8002dd8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002dda:	e008      	b.n	8002dee <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ddc:	f7fe fab2 	bl	8001344 <HAL_GetTick>
 8002de0:	0002      	movs	r2, r0
 8002de2:	69bb      	ldr	r3, [r7, #24]
 8002de4:	1ad3      	subs	r3, r2, r3
 8002de6:	2b02      	cmp	r3, #2
 8002de8:	d901      	bls.n	8002dee <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8002dea:	2303      	movs	r3, #3
 8002dec:	e086      	b.n	8002efc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002dee:	4b22      	ldr	r3, [pc, #136]	; (8002e78 <HAL_RCC_OscConfig+0x67c>)
 8002df0:	681a      	ldr	r2, [r3, #0]
 8002df2:	2380      	movs	r3, #128	; 0x80
 8002df4:	049b      	lsls	r3, r3, #18
 8002df6:	4013      	ands	r3, r2
 8002df8:	d1f0      	bne.n	8002ddc <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002dfa:	4b1f      	ldr	r3, [pc, #124]	; (8002e78 <HAL_RCC_OscConfig+0x67c>)
 8002dfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dfe:	220f      	movs	r2, #15
 8002e00:	4393      	bics	r3, r2
 8002e02:	0019      	movs	r1, r3
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e08:	4b1b      	ldr	r3, [pc, #108]	; (8002e78 <HAL_RCC_OscConfig+0x67c>)
 8002e0a:	430a      	orrs	r2, r1
 8002e0c:	62da      	str	r2, [r3, #44]	; 0x2c
 8002e0e:	4b1a      	ldr	r3, [pc, #104]	; (8002e78 <HAL_RCC_OscConfig+0x67c>)
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	4a1e      	ldr	r2, [pc, #120]	; (8002e8c <HAL_RCC_OscConfig+0x690>)
 8002e14:	4013      	ands	r3, r2
 8002e16:	0019      	movs	r1, r3
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e20:	431a      	orrs	r2, r3
 8002e22:	4b15      	ldr	r3, [pc, #84]	; (8002e78 <HAL_RCC_OscConfig+0x67c>)
 8002e24:	430a      	orrs	r2, r1
 8002e26:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e28:	4b13      	ldr	r3, [pc, #76]	; (8002e78 <HAL_RCC_OscConfig+0x67c>)
 8002e2a:	681a      	ldr	r2, [r3, #0]
 8002e2c:	4b12      	ldr	r3, [pc, #72]	; (8002e78 <HAL_RCC_OscConfig+0x67c>)
 8002e2e:	2180      	movs	r1, #128	; 0x80
 8002e30:	0449      	lsls	r1, r1, #17
 8002e32:	430a      	orrs	r2, r1
 8002e34:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e36:	f7fe fa85 	bl	8001344 <HAL_GetTick>
 8002e3a:	0003      	movs	r3, r0
 8002e3c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e3e:	e008      	b.n	8002e52 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e40:	f7fe fa80 	bl	8001344 <HAL_GetTick>
 8002e44:	0002      	movs	r2, r0
 8002e46:	69bb      	ldr	r3, [r7, #24]
 8002e48:	1ad3      	subs	r3, r2, r3
 8002e4a:	2b02      	cmp	r3, #2
 8002e4c:	d901      	bls.n	8002e52 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8002e4e:	2303      	movs	r3, #3
 8002e50:	e054      	b.n	8002efc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e52:	4b09      	ldr	r3, [pc, #36]	; (8002e78 <HAL_RCC_OscConfig+0x67c>)
 8002e54:	681a      	ldr	r2, [r3, #0]
 8002e56:	2380      	movs	r3, #128	; 0x80
 8002e58:	049b      	lsls	r3, r3, #18
 8002e5a:	4013      	ands	r3, r2
 8002e5c:	d0f0      	beq.n	8002e40 <HAL_RCC_OscConfig+0x644>
 8002e5e:	e04c      	b.n	8002efa <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e60:	4b05      	ldr	r3, [pc, #20]	; (8002e78 <HAL_RCC_OscConfig+0x67c>)
 8002e62:	681a      	ldr	r2, [r3, #0]
 8002e64:	4b04      	ldr	r3, [pc, #16]	; (8002e78 <HAL_RCC_OscConfig+0x67c>)
 8002e66:	4908      	ldr	r1, [pc, #32]	; (8002e88 <HAL_RCC_OscConfig+0x68c>)
 8002e68:	400a      	ands	r2, r1
 8002e6a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e6c:	f7fe fa6a 	bl	8001344 <HAL_GetTick>
 8002e70:	0003      	movs	r3, r0
 8002e72:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e74:	e015      	b.n	8002ea2 <HAL_RCC_OscConfig+0x6a6>
 8002e76:	46c0      	nop			; (mov r8, r8)
 8002e78:	40021000 	.word	0x40021000
 8002e7c:	00001388 	.word	0x00001388
 8002e80:	efffffff 	.word	0xefffffff
 8002e84:	fffeffff 	.word	0xfffeffff
 8002e88:	feffffff 	.word	0xfeffffff
 8002e8c:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e90:	f7fe fa58 	bl	8001344 <HAL_GetTick>
 8002e94:	0002      	movs	r2, r0
 8002e96:	69bb      	ldr	r3, [r7, #24]
 8002e98:	1ad3      	subs	r3, r2, r3
 8002e9a:	2b02      	cmp	r3, #2
 8002e9c:	d901      	bls.n	8002ea2 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8002e9e:	2303      	movs	r3, #3
 8002ea0:	e02c      	b.n	8002efc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ea2:	4b18      	ldr	r3, [pc, #96]	; (8002f04 <HAL_RCC_OscConfig+0x708>)
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	2380      	movs	r3, #128	; 0x80
 8002ea8:	049b      	lsls	r3, r3, #18
 8002eaa:	4013      	ands	r3, r2
 8002eac:	d1f0      	bne.n	8002e90 <HAL_RCC_OscConfig+0x694>
 8002eae:	e024      	b.n	8002efa <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb4:	2b01      	cmp	r3, #1
 8002eb6:	d101      	bne.n	8002ebc <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	e01f      	b.n	8002efc <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002ebc:	4b11      	ldr	r3, [pc, #68]	; (8002f04 <HAL_RCC_OscConfig+0x708>)
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002ec2:	4b10      	ldr	r3, [pc, #64]	; (8002f04 <HAL_RCC_OscConfig+0x708>)
 8002ec4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ec6:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ec8:	697a      	ldr	r2, [r7, #20]
 8002eca:	23c0      	movs	r3, #192	; 0xc0
 8002ecc:	025b      	lsls	r3, r3, #9
 8002ece:	401a      	ands	r2, r3
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ed4:	429a      	cmp	r2, r3
 8002ed6:	d10e      	bne.n	8002ef6 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002ed8:	693b      	ldr	r3, [r7, #16]
 8002eda:	220f      	movs	r2, #15
 8002edc:	401a      	ands	r2, r3
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ee2:	429a      	cmp	r2, r3
 8002ee4:	d107      	bne.n	8002ef6 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002ee6:	697a      	ldr	r2, [r7, #20]
 8002ee8:	23f0      	movs	r3, #240	; 0xf0
 8002eea:	039b      	lsls	r3, r3, #14
 8002eec:	401a      	ands	r2, r3
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002ef2:	429a      	cmp	r2, r3
 8002ef4:	d001      	beq.n	8002efa <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e000      	b.n	8002efc <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8002efa:	2300      	movs	r3, #0
}
 8002efc:	0018      	movs	r0, r3
 8002efe:	46bd      	mov	sp, r7
 8002f00:	b008      	add	sp, #32
 8002f02:	bd80      	pop	{r7, pc}
 8002f04:	40021000 	.word	0x40021000

08002f08 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b084      	sub	sp, #16
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
 8002f10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d101      	bne.n	8002f1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	e0bf      	b.n	800309c <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f1c:	4b61      	ldr	r3, [pc, #388]	; (80030a4 <HAL_RCC_ClockConfig+0x19c>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	2201      	movs	r2, #1
 8002f22:	4013      	ands	r3, r2
 8002f24:	683a      	ldr	r2, [r7, #0]
 8002f26:	429a      	cmp	r2, r3
 8002f28:	d911      	bls.n	8002f4e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f2a:	4b5e      	ldr	r3, [pc, #376]	; (80030a4 <HAL_RCC_ClockConfig+0x19c>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	2201      	movs	r2, #1
 8002f30:	4393      	bics	r3, r2
 8002f32:	0019      	movs	r1, r3
 8002f34:	4b5b      	ldr	r3, [pc, #364]	; (80030a4 <HAL_RCC_ClockConfig+0x19c>)
 8002f36:	683a      	ldr	r2, [r7, #0]
 8002f38:	430a      	orrs	r2, r1
 8002f3a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f3c:	4b59      	ldr	r3, [pc, #356]	; (80030a4 <HAL_RCC_ClockConfig+0x19c>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	2201      	movs	r2, #1
 8002f42:	4013      	ands	r3, r2
 8002f44:	683a      	ldr	r2, [r7, #0]
 8002f46:	429a      	cmp	r2, r3
 8002f48:	d001      	beq.n	8002f4e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e0a6      	b.n	800309c <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	2202      	movs	r2, #2
 8002f54:	4013      	ands	r3, r2
 8002f56:	d015      	beq.n	8002f84 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	2204      	movs	r2, #4
 8002f5e:	4013      	ands	r3, r2
 8002f60:	d006      	beq.n	8002f70 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002f62:	4b51      	ldr	r3, [pc, #324]	; (80030a8 <HAL_RCC_ClockConfig+0x1a0>)
 8002f64:	685a      	ldr	r2, [r3, #4]
 8002f66:	4b50      	ldr	r3, [pc, #320]	; (80030a8 <HAL_RCC_ClockConfig+0x1a0>)
 8002f68:	21e0      	movs	r1, #224	; 0xe0
 8002f6a:	00c9      	lsls	r1, r1, #3
 8002f6c:	430a      	orrs	r2, r1
 8002f6e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f70:	4b4d      	ldr	r3, [pc, #308]	; (80030a8 <HAL_RCC_ClockConfig+0x1a0>)
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	22f0      	movs	r2, #240	; 0xf0
 8002f76:	4393      	bics	r3, r2
 8002f78:	0019      	movs	r1, r3
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	689a      	ldr	r2, [r3, #8]
 8002f7e:	4b4a      	ldr	r3, [pc, #296]	; (80030a8 <HAL_RCC_ClockConfig+0x1a0>)
 8002f80:	430a      	orrs	r2, r1
 8002f82:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	2201      	movs	r2, #1
 8002f8a:	4013      	ands	r3, r2
 8002f8c:	d04c      	beq.n	8003028 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	2b01      	cmp	r3, #1
 8002f94:	d107      	bne.n	8002fa6 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f96:	4b44      	ldr	r3, [pc, #272]	; (80030a8 <HAL_RCC_ClockConfig+0x1a0>)
 8002f98:	681a      	ldr	r2, [r3, #0]
 8002f9a:	2380      	movs	r3, #128	; 0x80
 8002f9c:	029b      	lsls	r3, r3, #10
 8002f9e:	4013      	ands	r3, r2
 8002fa0:	d120      	bne.n	8002fe4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e07a      	b.n	800309c <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	2b02      	cmp	r3, #2
 8002fac:	d107      	bne.n	8002fbe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fae:	4b3e      	ldr	r3, [pc, #248]	; (80030a8 <HAL_RCC_ClockConfig+0x1a0>)
 8002fb0:	681a      	ldr	r2, [r3, #0]
 8002fb2:	2380      	movs	r3, #128	; 0x80
 8002fb4:	049b      	lsls	r3, r3, #18
 8002fb6:	4013      	ands	r3, r2
 8002fb8:	d114      	bne.n	8002fe4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e06e      	b.n	800309c <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	2b03      	cmp	r3, #3
 8002fc4:	d107      	bne.n	8002fd6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002fc6:	4b38      	ldr	r3, [pc, #224]	; (80030a8 <HAL_RCC_ClockConfig+0x1a0>)
 8002fc8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002fca:	2380      	movs	r3, #128	; 0x80
 8002fcc:	025b      	lsls	r3, r3, #9
 8002fce:	4013      	ands	r3, r2
 8002fd0:	d108      	bne.n	8002fe4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e062      	b.n	800309c <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fd6:	4b34      	ldr	r3, [pc, #208]	; (80030a8 <HAL_RCC_ClockConfig+0x1a0>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	2202      	movs	r2, #2
 8002fdc:	4013      	ands	r3, r2
 8002fde:	d101      	bne.n	8002fe4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	e05b      	b.n	800309c <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002fe4:	4b30      	ldr	r3, [pc, #192]	; (80030a8 <HAL_RCC_ClockConfig+0x1a0>)
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	2203      	movs	r2, #3
 8002fea:	4393      	bics	r3, r2
 8002fec:	0019      	movs	r1, r3
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	685a      	ldr	r2, [r3, #4]
 8002ff2:	4b2d      	ldr	r3, [pc, #180]	; (80030a8 <HAL_RCC_ClockConfig+0x1a0>)
 8002ff4:	430a      	orrs	r2, r1
 8002ff6:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ff8:	f7fe f9a4 	bl	8001344 <HAL_GetTick>
 8002ffc:	0003      	movs	r3, r0
 8002ffe:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003000:	e009      	b.n	8003016 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003002:	f7fe f99f 	bl	8001344 <HAL_GetTick>
 8003006:	0002      	movs	r2, r0
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	1ad3      	subs	r3, r2, r3
 800300c:	4a27      	ldr	r2, [pc, #156]	; (80030ac <HAL_RCC_ClockConfig+0x1a4>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d901      	bls.n	8003016 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003012:	2303      	movs	r3, #3
 8003014:	e042      	b.n	800309c <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003016:	4b24      	ldr	r3, [pc, #144]	; (80030a8 <HAL_RCC_ClockConfig+0x1a0>)
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	220c      	movs	r2, #12
 800301c:	401a      	ands	r2, r3
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	009b      	lsls	r3, r3, #2
 8003024:	429a      	cmp	r2, r3
 8003026:	d1ec      	bne.n	8003002 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003028:	4b1e      	ldr	r3, [pc, #120]	; (80030a4 <HAL_RCC_ClockConfig+0x19c>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	2201      	movs	r2, #1
 800302e:	4013      	ands	r3, r2
 8003030:	683a      	ldr	r2, [r7, #0]
 8003032:	429a      	cmp	r2, r3
 8003034:	d211      	bcs.n	800305a <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003036:	4b1b      	ldr	r3, [pc, #108]	; (80030a4 <HAL_RCC_ClockConfig+0x19c>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	2201      	movs	r2, #1
 800303c:	4393      	bics	r3, r2
 800303e:	0019      	movs	r1, r3
 8003040:	4b18      	ldr	r3, [pc, #96]	; (80030a4 <HAL_RCC_ClockConfig+0x19c>)
 8003042:	683a      	ldr	r2, [r7, #0]
 8003044:	430a      	orrs	r2, r1
 8003046:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003048:	4b16      	ldr	r3, [pc, #88]	; (80030a4 <HAL_RCC_ClockConfig+0x19c>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	2201      	movs	r2, #1
 800304e:	4013      	ands	r3, r2
 8003050:	683a      	ldr	r2, [r7, #0]
 8003052:	429a      	cmp	r2, r3
 8003054:	d001      	beq.n	800305a <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8003056:	2301      	movs	r3, #1
 8003058:	e020      	b.n	800309c <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	2204      	movs	r2, #4
 8003060:	4013      	ands	r3, r2
 8003062:	d009      	beq.n	8003078 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003064:	4b10      	ldr	r3, [pc, #64]	; (80030a8 <HAL_RCC_ClockConfig+0x1a0>)
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	4a11      	ldr	r2, [pc, #68]	; (80030b0 <HAL_RCC_ClockConfig+0x1a8>)
 800306a:	4013      	ands	r3, r2
 800306c:	0019      	movs	r1, r3
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	68da      	ldr	r2, [r3, #12]
 8003072:	4b0d      	ldr	r3, [pc, #52]	; (80030a8 <HAL_RCC_ClockConfig+0x1a0>)
 8003074:	430a      	orrs	r2, r1
 8003076:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003078:	f000 f82e 	bl	80030d8 <HAL_RCC_GetSysClockFreq>
 800307c:	0001      	movs	r1, r0
 800307e:	4b0a      	ldr	r3, [pc, #40]	; (80030a8 <HAL_RCC_ClockConfig+0x1a0>)
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	091b      	lsrs	r3, r3, #4
 8003084:	220f      	movs	r2, #15
 8003086:	4013      	ands	r3, r2
 8003088:	4a0a      	ldr	r2, [pc, #40]	; (80030b4 <HAL_RCC_ClockConfig+0x1ac>)
 800308a:	5cd3      	ldrb	r3, [r2, r3]
 800308c:	000a      	movs	r2, r1
 800308e:	40da      	lsrs	r2, r3
 8003090:	4b09      	ldr	r3, [pc, #36]	; (80030b8 <HAL_RCC_ClockConfig+0x1b0>)
 8003092:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8003094:	2000      	movs	r0, #0
 8003096:	f7fe f90f 	bl	80012b8 <HAL_InitTick>
  
  return HAL_OK;
 800309a:	2300      	movs	r3, #0
}
 800309c:	0018      	movs	r0, r3
 800309e:	46bd      	mov	sp, r7
 80030a0:	b004      	add	sp, #16
 80030a2:	bd80      	pop	{r7, pc}
 80030a4:	40022000 	.word	0x40022000
 80030a8:	40021000 	.word	0x40021000
 80030ac:	00001388 	.word	0x00001388
 80030b0:	fffff8ff 	.word	0xfffff8ff
 80030b4:	080045b8 	.word	0x080045b8
 80030b8:	20000004 	.word	0x20000004

080030bc <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to 
  *         the Cortex-M0 NMI (Non-Maskable Interrupt) exception vector.  
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSON) ;
 80030c0:	4b04      	ldr	r3, [pc, #16]	; (80030d4 <HAL_RCC_EnableCSS+0x18>)
 80030c2:	681a      	ldr	r2, [r3, #0]
 80030c4:	4b03      	ldr	r3, [pc, #12]	; (80030d4 <HAL_RCC_EnableCSS+0x18>)
 80030c6:	2180      	movs	r1, #128	; 0x80
 80030c8:	0309      	lsls	r1, r1, #12
 80030ca:	430a      	orrs	r2, r1
 80030cc:	601a      	str	r2, [r3, #0]
}
 80030ce:	46c0      	nop			; (mov r8, r8)
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bd80      	pop	{r7, pc}
 80030d4:	40021000 	.word	0x40021000

080030d8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030d8:	b590      	push	{r4, r7, lr}
 80030da:	b08f      	sub	sp, #60	; 0x3c
 80030dc:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80030de:	2314      	movs	r3, #20
 80030e0:	18fb      	adds	r3, r7, r3
 80030e2:	4a38      	ldr	r2, [pc, #224]	; (80031c4 <HAL_RCC_GetSysClockFreq+0xec>)
 80030e4:	ca13      	ldmia	r2!, {r0, r1, r4}
 80030e6:	c313      	stmia	r3!, {r0, r1, r4}
 80030e8:	6812      	ldr	r2, [r2, #0]
 80030ea:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80030ec:	1d3b      	adds	r3, r7, #4
 80030ee:	4a36      	ldr	r2, [pc, #216]	; (80031c8 <HAL_RCC_GetSysClockFreq+0xf0>)
 80030f0:	ca13      	ldmia	r2!, {r0, r1, r4}
 80030f2:	c313      	stmia	r3!, {r0, r1, r4}
 80030f4:	6812      	ldr	r2, [r2, #0]
 80030f6:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80030f8:	2300      	movs	r3, #0
 80030fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80030fc:	2300      	movs	r3, #0
 80030fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8003100:	2300      	movs	r3, #0
 8003102:	637b      	str	r3, [r7, #52]	; 0x34
 8003104:	2300      	movs	r3, #0
 8003106:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8003108:	2300      	movs	r3, #0
 800310a:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 800310c:	4b2f      	ldr	r3, [pc, #188]	; (80031cc <HAL_RCC_GetSysClockFreq+0xf4>)
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003114:	220c      	movs	r2, #12
 8003116:	4013      	ands	r3, r2
 8003118:	2b0c      	cmp	r3, #12
 800311a:	d047      	beq.n	80031ac <HAL_RCC_GetSysClockFreq+0xd4>
 800311c:	d849      	bhi.n	80031b2 <HAL_RCC_GetSysClockFreq+0xda>
 800311e:	2b04      	cmp	r3, #4
 8003120:	d002      	beq.n	8003128 <HAL_RCC_GetSysClockFreq+0x50>
 8003122:	2b08      	cmp	r3, #8
 8003124:	d003      	beq.n	800312e <HAL_RCC_GetSysClockFreq+0x56>
 8003126:	e044      	b.n	80031b2 <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003128:	4b29      	ldr	r3, [pc, #164]	; (80031d0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800312a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800312c:	e044      	b.n	80031b8 <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800312e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003130:	0c9b      	lsrs	r3, r3, #18
 8003132:	220f      	movs	r2, #15
 8003134:	4013      	ands	r3, r2
 8003136:	2214      	movs	r2, #20
 8003138:	18ba      	adds	r2, r7, r2
 800313a:	5cd3      	ldrb	r3, [r2, r3]
 800313c:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800313e:	4b23      	ldr	r3, [pc, #140]	; (80031cc <HAL_RCC_GetSysClockFreq+0xf4>)
 8003140:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003142:	220f      	movs	r2, #15
 8003144:	4013      	ands	r3, r2
 8003146:	1d3a      	adds	r2, r7, #4
 8003148:	5cd3      	ldrb	r3, [r2, r3]
 800314a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800314c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800314e:	23c0      	movs	r3, #192	; 0xc0
 8003150:	025b      	lsls	r3, r3, #9
 8003152:	401a      	ands	r2, r3
 8003154:	2380      	movs	r3, #128	; 0x80
 8003156:	025b      	lsls	r3, r3, #9
 8003158:	429a      	cmp	r2, r3
 800315a:	d109      	bne.n	8003170 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800315c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800315e:	481c      	ldr	r0, [pc, #112]	; (80031d0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003160:	f7fc ffd2 	bl	8000108 <__udivsi3>
 8003164:	0003      	movs	r3, r0
 8003166:	001a      	movs	r2, r3
 8003168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800316a:	4353      	muls	r3, r2
 800316c:	637b      	str	r3, [r7, #52]	; 0x34
 800316e:	e01a      	b.n	80031a6 <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8003170:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003172:	23c0      	movs	r3, #192	; 0xc0
 8003174:	025b      	lsls	r3, r3, #9
 8003176:	401a      	ands	r2, r3
 8003178:	23c0      	movs	r3, #192	; 0xc0
 800317a:	025b      	lsls	r3, r3, #9
 800317c:	429a      	cmp	r2, r3
 800317e:	d109      	bne.n	8003194 <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003180:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003182:	4814      	ldr	r0, [pc, #80]	; (80031d4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003184:	f7fc ffc0 	bl	8000108 <__udivsi3>
 8003188:	0003      	movs	r3, r0
 800318a:	001a      	movs	r2, r3
 800318c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800318e:	4353      	muls	r3, r2
 8003190:	637b      	str	r3, [r7, #52]	; 0x34
 8003192:	e008      	b.n	80031a6 <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003194:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003196:	480e      	ldr	r0, [pc, #56]	; (80031d0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003198:	f7fc ffb6 	bl	8000108 <__udivsi3>
 800319c:	0003      	movs	r3, r0
 800319e:	001a      	movs	r2, r3
 80031a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031a2:	4353      	muls	r3, r2
 80031a4:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 80031a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031a8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80031aa:	e005      	b.n	80031b8 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 80031ac:	4b09      	ldr	r3, [pc, #36]	; (80031d4 <HAL_RCC_GetSysClockFreq+0xfc>)
 80031ae:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80031b0:	e002      	b.n	80031b8 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80031b2:	4b07      	ldr	r3, [pc, #28]	; (80031d0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80031b4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80031b6:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80031b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80031ba:	0018      	movs	r0, r3
 80031bc:	46bd      	mov	sp, r7
 80031be:	b00f      	add	sp, #60	; 0x3c
 80031c0:	bd90      	pop	{r4, r7, pc}
 80031c2:	46c0      	nop			; (mov r8, r8)
 80031c4:	08004598 	.word	0x08004598
 80031c8:	080045a8 	.word	0x080045a8
 80031cc:	40021000 	.word	0x40021000
 80031d0:	007a1200 	.word	0x007a1200
 80031d4:	02dc6c00 	.word	0x02dc6c00

080031d8 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 80031dc:	4b06      	ldr	r3, [pc, #24]	; (80031f8 <HAL_RCC_NMI_IRQHandler+0x20>)
 80031de:	689b      	ldr	r3, [r3, #8]
 80031e0:	2280      	movs	r2, #128	; 0x80
 80031e2:	4013      	ands	r3, r2
 80031e4:	2b80      	cmp	r3, #128	; 0x80
 80031e6:	d104      	bne.n	80031f2 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 80031e8:	f000 f80a 	bl	8003200 <HAL_RCC_CSSCallback>
    
    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 80031ec:	4b03      	ldr	r3, [pc, #12]	; (80031fc <HAL_RCC_NMI_IRQHandler+0x24>)
 80031ee:	2280      	movs	r2, #128	; 0x80
 80031f0:	701a      	strb	r2, [r3, #0]
  }
}
 80031f2:	46c0      	nop			; (mov r8, r8)
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bd80      	pop	{r7, pc}
 80031f8:	40021000 	.word	0x40021000
 80031fc:	4002100a 	.word	0x4002100a

08003200 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
    the HAL_RCC_CSSCallback could be implemented in the user file
    */ 
}
 8003204:	46c0      	nop			; (mov r8, r8)
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}
	...

0800320c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b086      	sub	sp, #24
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003214:	2300      	movs	r3, #0
 8003216:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8003218:	2300      	movs	r3, #0
 800321a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681a      	ldr	r2, [r3, #0]
 8003220:	2380      	movs	r3, #128	; 0x80
 8003222:	025b      	lsls	r3, r3, #9
 8003224:	4013      	ands	r3, r2
 8003226:	d100      	bne.n	800322a <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8003228:	e08e      	b.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800322a:	2017      	movs	r0, #23
 800322c:	183b      	adds	r3, r7, r0
 800322e:	2200      	movs	r2, #0
 8003230:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003232:	4b67      	ldr	r3, [pc, #412]	; (80033d0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003234:	69da      	ldr	r2, [r3, #28]
 8003236:	2380      	movs	r3, #128	; 0x80
 8003238:	055b      	lsls	r3, r3, #21
 800323a:	4013      	ands	r3, r2
 800323c:	d110      	bne.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800323e:	4b64      	ldr	r3, [pc, #400]	; (80033d0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003240:	69da      	ldr	r2, [r3, #28]
 8003242:	4b63      	ldr	r3, [pc, #396]	; (80033d0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003244:	2180      	movs	r1, #128	; 0x80
 8003246:	0549      	lsls	r1, r1, #21
 8003248:	430a      	orrs	r2, r1
 800324a:	61da      	str	r2, [r3, #28]
 800324c:	4b60      	ldr	r3, [pc, #384]	; (80033d0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800324e:	69da      	ldr	r2, [r3, #28]
 8003250:	2380      	movs	r3, #128	; 0x80
 8003252:	055b      	lsls	r3, r3, #21
 8003254:	4013      	ands	r3, r2
 8003256:	60bb      	str	r3, [r7, #8]
 8003258:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800325a:	183b      	adds	r3, r7, r0
 800325c:	2201      	movs	r2, #1
 800325e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003260:	4b5c      	ldr	r3, [pc, #368]	; (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8003262:	681a      	ldr	r2, [r3, #0]
 8003264:	2380      	movs	r3, #128	; 0x80
 8003266:	005b      	lsls	r3, r3, #1
 8003268:	4013      	ands	r3, r2
 800326a:	d11a      	bne.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800326c:	4b59      	ldr	r3, [pc, #356]	; (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800326e:	681a      	ldr	r2, [r3, #0]
 8003270:	4b58      	ldr	r3, [pc, #352]	; (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8003272:	2180      	movs	r1, #128	; 0x80
 8003274:	0049      	lsls	r1, r1, #1
 8003276:	430a      	orrs	r2, r1
 8003278:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800327a:	f7fe f863 	bl	8001344 <HAL_GetTick>
 800327e:	0003      	movs	r3, r0
 8003280:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003282:	e008      	b.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003284:	f7fe f85e 	bl	8001344 <HAL_GetTick>
 8003288:	0002      	movs	r2, r0
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	1ad3      	subs	r3, r2, r3
 800328e:	2b64      	cmp	r3, #100	; 0x64
 8003290:	d901      	bls.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8003292:	2303      	movs	r3, #3
 8003294:	e097      	b.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003296:	4b4f      	ldr	r3, [pc, #316]	; (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8003298:	681a      	ldr	r2, [r3, #0]
 800329a:	2380      	movs	r3, #128	; 0x80
 800329c:	005b      	lsls	r3, r3, #1
 800329e:	4013      	ands	r3, r2
 80032a0:	d0f0      	beq.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80032a2:	4b4b      	ldr	r3, [pc, #300]	; (80033d0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80032a4:	6a1a      	ldr	r2, [r3, #32]
 80032a6:	23c0      	movs	r3, #192	; 0xc0
 80032a8:	009b      	lsls	r3, r3, #2
 80032aa:	4013      	ands	r3, r2
 80032ac:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d034      	beq.n	800331e <HAL_RCCEx_PeriphCLKConfig+0x112>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	685a      	ldr	r2, [r3, #4]
 80032b8:	23c0      	movs	r3, #192	; 0xc0
 80032ba:	009b      	lsls	r3, r3, #2
 80032bc:	4013      	ands	r3, r2
 80032be:	68fa      	ldr	r2, [r7, #12]
 80032c0:	429a      	cmp	r2, r3
 80032c2:	d02c      	beq.n	800331e <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80032c4:	4b42      	ldr	r3, [pc, #264]	; (80033d0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80032c6:	6a1b      	ldr	r3, [r3, #32]
 80032c8:	4a43      	ldr	r2, [pc, #268]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80032ca:	4013      	ands	r3, r2
 80032cc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80032ce:	4b40      	ldr	r3, [pc, #256]	; (80033d0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80032d0:	6a1a      	ldr	r2, [r3, #32]
 80032d2:	4b3f      	ldr	r3, [pc, #252]	; (80033d0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80032d4:	2180      	movs	r1, #128	; 0x80
 80032d6:	0249      	lsls	r1, r1, #9
 80032d8:	430a      	orrs	r2, r1
 80032da:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80032dc:	4b3c      	ldr	r3, [pc, #240]	; (80033d0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80032de:	6a1a      	ldr	r2, [r3, #32]
 80032e0:	4b3b      	ldr	r3, [pc, #236]	; (80033d0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80032e2:	493e      	ldr	r1, [pc, #248]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032e4:	400a      	ands	r2, r1
 80032e6:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80032e8:	4b39      	ldr	r3, [pc, #228]	; (80033d0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80032ea:	68fa      	ldr	r2, [r7, #12]
 80032ec:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	2201      	movs	r2, #1
 80032f2:	4013      	ands	r3, r2
 80032f4:	d013      	beq.n	800331e <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032f6:	f7fe f825 	bl	8001344 <HAL_GetTick>
 80032fa:	0003      	movs	r3, r0
 80032fc:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032fe:	e009      	b.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003300:	f7fe f820 	bl	8001344 <HAL_GetTick>
 8003304:	0002      	movs	r2, r0
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	1ad3      	subs	r3, r2, r3
 800330a:	4a35      	ldr	r2, [pc, #212]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d901      	bls.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003310:	2303      	movs	r3, #3
 8003312:	e058      	b.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003314:	4b2e      	ldr	r3, [pc, #184]	; (80033d0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003316:	6a1b      	ldr	r3, [r3, #32]
 8003318:	2202      	movs	r2, #2
 800331a:	4013      	ands	r3, r2
 800331c:	d0f0      	beq.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800331e:	4b2c      	ldr	r3, [pc, #176]	; (80033d0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003320:	6a1b      	ldr	r3, [r3, #32]
 8003322:	4a2d      	ldr	r2, [pc, #180]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003324:	4013      	ands	r3, r2
 8003326:	0019      	movs	r1, r3
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	685a      	ldr	r2, [r3, #4]
 800332c:	4b28      	ldr	r3, [pc, #160]	; (80033d0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800332e:	430a      	orrs	r2, r1
 8003330:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003332:	2317      	movs	r3, #23
 8003334:	18fb      	adds	r3, r7, r3
 8003336:	781b      	ldrb	r3, [r3, #0]
 8003338:	2b01      	cmp	r3, #1
 800333a:	d105      	bne.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800333c:	4b24      	ldr	r3, [pc, #144]	; (80033d0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800333e:	69da      	ldr	r2, [r3, #28]
 8003340:	4b23      	ldr	r3, [pc, #140]	; (80033d0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003342:	4928      	ldr	r1, [pc, #160]	; (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003344:	400a      	ands	r2, r1
 8003346:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	2201      	movs	r2, #1
 800334e:	4013      	ands	r3, r2
 8003350:	d009      	beq.n	8003366 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003352:	4b1f      	ldr	r3, [pc, #124]	; (80033d0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003356:	2203      	movs	r2, #3
 8003358:	4393      	bics	r3, r2
 800335a:	0019      	movs	r1, r3
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	689a      	ldr	r2, [r3, #8]
 8003360:	4b1b      	ldr	r3, [pc, #108]	; (80033d0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003362:	430a      	orrs	r2, r1
 8003364:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	2220      	movs	r2, #32
 800336c:	4013      	ands	r3, r2
 800336e:	d009      	beq.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003370:	4b17      	ldr	r3, [pc, #92]	; (80033d0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003372:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003374:	2210      	movs	r2, #16
 8003376:	4393      	bics	r3, r2
 8003378:	0019      	movs	r1, r3
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	68da      	ldr	r2, [r3, #12]
 800337e:	4b14      	ldr	r3, [pc, #80]	; (80033d0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003380:	430a      	orrs	r2, r1
 8003382:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681a      	ldr	r2, [r3, #0]
 8003388:	2380      	movs	r3, #128	; 0x80
 800338a:	029b      	lsls	r3, r3, #10
 800338c:	4013      	ands	r3, r2
 800338e:	d009      	beq.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003390:	4b0f      	ldr	r3, [pc, #60]	; (80033d0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003394:	2280      	movs	r2, #128	; 0x80
 8003396:	4393      	bics	r3, r2
 8003398:	0019      	movs	r1, r3
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	695a      	ldr	r2, [r3, #20]
 800339e:	4b0c      	ldr	r3, [pc, #48]	; (80033d0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80033a0:	430a      	orrs	r2, r1
 80033a2:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681a      	ldr	r2, [r3, #0]
 80033a8:	2380      	movs	r3, #128	; 0x80
 80033aa:	00db      	lsls	r3, r3, #3
 80033ac:	4013      	ands	r3, r2
 80033ae:	d009      	beq.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80033b0:	4b07      	ldr	r3, [pc, #28]	; (80033d0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80033b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033b4:	2240      	movs	r2, #64	; 0x40
 80033b6:	4393      	bics	r3, r2
 80033b8:	0019      	movs	r1, r3
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	691a      	ldr	r2, [r3, #16]
 80033be:	4b04      	ldr	r3, [pc, #16]	; (80033d0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80033c0:	430a      	orrs	r2, r1
 80033c2:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80033c4:	2300      	movs	r3, #0
}
 80033c6:	0018      	movs	r0, r3
 80033c8:	46bd      	mov	sp, r7
 80033ca:	b006      	add	sp, #24
 80033cc:	bd80      	pop	{r7, pc}
 80033ce:	46c0      	nop			; (mov r8, r8)
 80033d0:	40021000 	.word	0x40021000
 80033d4:	40007000 	.word	0x40007000
 80033d8:	fffffcff 	.word	0xfffffcff
 80033dc:	fffeffff 	.word	0xfffeffff
 80033e0:	00001388 	.word	0x00001388
 80033e4:	efffffff 	.word	0xefffffff

080033e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b082      	sub	sp, #8
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d101      	bne.n	80033fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
 80033f8:	e042      	b.n	8003480 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	223d      	movs	r2, #61	; 0x3d
 80033fe:	5c9b      	ldrb	r3, [r3, r2]
 8003400:	b2db      	uxtb	r3, r3
 8003402:	2b00      	cmp	r3, #0
 8003404:	d107      	bne.n	8003416 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	223c      	movs	r2, #60	; 0x3c
 800340a:	2100      	movs	r1, #0
 800340c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	0018      	movs	r0, r3
 8003412:	f7fd fddd 	bl	8000fd0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	223d      	movs	r2, #61	; 0x3d
 800341a:	2102      	movs	r1, #2
 800341c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681a      	ldr	r2, [r3, #0]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	3304      	adds	r3, #4
 8003426:	0019      	movs	r1, r3
 8003428:	0010      	movs	r0, r2
 800342a:	f000 fc99 	bl	8003d60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2246      	movs	r2, #70	; 0x46
 8003432:	2101      	movs	r1, #1
 8003434:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	223e      	movs	r2, #62	; 0x3e
 800343a:	2101      	movs	r1, #1
 800343c:	5499      	strb	r1, [r3, r2]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	223f      	movs	r2, #63	; 0x3f
 8003442:	2101      	movs	r1, #1
 8003444:	5499      	strb	r1, [r3, r2]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2240      	movs	r2, #64	; 0x40
 800344a:	2101      	movs	r1, #1
 800344c:	5499      	strb	r1, [r3, r2]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2241      	movs	r2, #65	; 0x41
 8003452:	2101      	movs	r1, #1
 8003454:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2242      	movs	r2, #66	; 0x42
 800345a:	2101      	movs	r1, #1
 800345c:	5499      	strb	r1, [r3, r2]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2243      	movs	r2, #67	; 0x43
 8003462:	2101      	movs	r1, #1
 8003464:	5499      	strb	r1, [r3, r2]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2244      	movs	r2, #68	; 0x44
 800346a:	2101      	movs	r1, #1
 800346c:	5499      	strb	r1, [r3, r2]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2245      	movs	r2, #69	; 0x45
 8003472:	2101      	movs	r1, #1
 8003474:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	223d      	movs	r2, #61	; 0x3d
 800347a:	2101      	movs	r1, #1
 800347c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800347e:	2300      	movs	r3, #0
}
 8003480:	0018      	movs	r0, r3
 8003482:	46bd      	mov	sp, r7
 8003484:	b002      	add	sp, #8
 8003486:	bd80      	pop	{r7, pc}

08003488 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b084      	sub	sp, #16
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	223d      	movs	r2, #61	; 0x3d
 8003494:	5c9b      	ldrb	r3, [r3, r2]
 8003496:	b2db      	uxtb	r3, r3
 8003498:	2b01      	cmp	r3, #1
 800349a:	d001      	beq.n	80034a0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800349c:	2301      	movs	r3, #1
 800349e:	e02e      	b.n	80034fe <HAL_TIM_Base_Start+0x76>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	223d      	movs	r2, #61	; 0x3d
 80034a4:	2102      	movs	r1, #2
 80034a6:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a16      	ldr	r2, [pc, #88]	; (8003508 <HAL_TIM_Base_Start+0x80>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d00a      	beq.n	80034c8 <HAL_TIM_Base_Start+0x40>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681a      	ldr	r2, [r3, #0]
 80034b6:	2380      	movs	r3, #128	; 0x80
 80034b8:	05db      	lsls	r3, r3, #23
 80034ba:	429a      	cmp	r2, r3
 80034bc:	d004      	beq.n	80034c8 <HAL_TIM_Base_Start+0x40>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a12      	ldr	r2, [pc, #72]	; (800350c <HAL_TIM_Base_Start+0x84>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d111      	bne.n	80034ec <HAL_TIM_Base_Start+0x64>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	689b      	ldr	r3, [r3, #8]
 80034ce:	2207      	movs	r2, #7
 80034d0:	4013      	ands	r3, r2
 80034d2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	2b06      	cmp	r3, #6
 80034d8:	d010      	beq.n	80034fc <HAL_TIM_Base_Start+0x74>
    {
      __HAL_TIM_ENABLE(htim);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	681a      	ldr	r2, [r3, #0]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	2101      	movs	r1, #1
 80034e6:	430a      	orrs	r2, r1
 80034e8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034ea:	e007      	b.n	80034fc <HAL_TIM_Base_Start+0x74>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	681a      	ldr	r2, [r3, #0]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	2101      	movs	r1, #1
 80034f8:	430a      	orrs	r2, r1
 80034fa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80034fc:	2300      	movs	r3, #0
}
 80034fe:	0018      	movs	r0, r3
 8003500:	46bd      	mov	sp, r7
 8003502:	b004      	add	sp, #16
 8003504:	bd80      	pop	{r7, pc}
 8003506:	46c0      	nop			; (mov r8, r8)
 8003508:	40012c00 	.word	0x40012c00
 800350c:	40000400 	.word	0x40000400

08003510 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b084      	sub	sp, #16
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	223d      	movs	r2, #61	; 0x3d
 800351c:	5c9b      	ldrb	r3, [r3, r2]
 800351e:	b2db      	uxtb	r3, r3
 8003520:	2b01      	cmp	r3, #1
 8003522:	d001      	beq.n	8003528 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003524:	2301      	movs	r3, #1
 8003526:	e036      	b.n	8003596 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	223d      	movs	r2, #61	; 0x3d
 800352c:	2102      	movs	r1, #2
 800352e:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	68da      	ldr	r2, [r3, #12]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	2101      	movs	r1, #1
 800353c:	430a      	orrs	r2, r1
 800353e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a16      	ldr	r2, [pc, #88]	; (80035a0 <HAL_TIM_Base_Start_IT+0x90>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d00a      	beq.n	8003560 <HAL_TIM_Base_Start_IT+0x50>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681a      	ldr	r2, [r3, #0]
 800354e:	2380      	movs	r3, #128	; 0x80
 8003550:	05db      	lsls	r3, r3, #23
 8003552:	429a      	cmp	r2, r3
 8003554:	d004      	beq.n	8003560 <HAL_TIM_Base_Start_IT+0x50>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a12      	ldr	r2, [pc, #72]	; (80035a4 <HAL_TIM_Base_Start_IT+0x94>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d111      	bne.n	8003584 <HAL_TIM_Base_Start_IT+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	689b      	ldr	r3, [r3, #8]
 8003566:	2207      	movs	r2, #7
 8003568:	4013      	ands	r3, r2
 800356a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	2b06      	cmp	r3, #6
 8003570:	d010      	beq.n	8003594 <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	681a      	ldr	r2, [r3, #0]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	2101      	movs	r1, #1
 800357e:	430a      	orrs	r2, r1
 8003580:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003582:	e007      	b.n	8003594 <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	681a      	ldr	r2, [r3, #0]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	2101      	movs	r1, #1
 8003590:	430a      	orrs	r2, r1
 8003592:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003594:	2300      	movs	r3, #0
}
 8003596:	0018      	movs	r0, r3
 8003598:	46bd      	mov	sp, r7
 800359a:	b004      	add	sp, #16
 800359c:	bd80      	pop	{r7, pc}
 800359e:	46c0      	nop			; (mov r8, r8)
 80035a0:	40012c00 	.word	0x40012c00
 80035a4:	40000400 	.word	0x40000400

080035a8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b082      	sub	sp, #8
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d101      	bne.n	80035ba <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80035b6:	2301      	movs	r3, #1
 80035b8:	e042      	b.n	8003640 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	223d      	movs	r2, #61	; 0x3d
 80035be:	5c9b      	ldrb	r3, [r3, r2]
 80035c0:	b2db      	uxtb	r3, r3
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d107      	bne.n	80035d6 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	223c      	movs	r2, #60	; 0x3c
 80035ca:	2100      	movs	r1, #0
 80035cc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	0018      	movs	r0, r3
 80035d2:	f000 f839 	bl	8003648 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	223d      	movs	r2, #61	; 0x3d
 80035da:	2102      	movs	r1, #2
 80035dc:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681a      	ldr	r2, [r3, #0]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	3304      	adds	r3, #4
 80035e6:	0019      	movs	r1, r3
 80035e8:	0010      	movs	r0, r2
 80035ea:	f000 fbb9 	bl	8003d60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2246      	movs	r2, #70	; 0x46
 80035f2:	2101      	movs	r1, #1
 80035f4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	223e      	movs	r2, #62	; 0x3e
 80035fa:	2101      	movs	r1, #1
 80035fc:	5499      	strb	r1, [r3, r2]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	223f      	movs	r2, #63	; 0x3f
 8003602:	2101      	movs	r1, #1
 8003604:	5499      	strb	r1, [r3, r2]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2240      	movs	r2, #64	; 0x40
 800360a:	2101      	movs	r1, #1
 800360c:	5499      	strb	r1, [r3, r2]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2241      	movs	r2, #65	; 0x41
 8003612:	2101      	movs	r1, #1
 8003614:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2242      	movs	r2, #66	; 0x42
 800361a:	2101      	movs	r1, #1
 800361c:	5499      	strb	r1, [r3, r2]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2243      	movs	r2, #67	; 0x43
 8003622:	2101      	movs	r1, #1
 8003624:	5499      	strb	r1, [r3, r2]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2244      	movs	r2, #68	; 0x44
 800362a:	2101      	movs	r1, #1
 800362c:	5499      	strb	r1, [r3, r2]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2245      	movs	r2, #69	; 0x45
 8003632:	2101      	movs	r1, #1
 8003634:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	223d      	movs	r2, #61	; 0x3d
 800363a:	2101      	movs	r1, #1
 800363c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800363e:	2300      	movs	r3, #0
}
 8003640:	0018      	movs	r0, r3
 8003642:	46bd      	mov	sp, r7
 8003644:	b002      	add	sp, #8
 8003646:	bd80      	pop	{r7, pc}

08003648 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b082      	sub	sp, #8
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003650:	46c0      	nop			; (mov r8, r8)
 8003652:	46bd      	mov	sp, r7
 8003654:	b002      	add	sp, #8
 8003656:	bd80      	pop	{r7, pc}

08003658 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b084      	sub	sp, #16
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
 8003660:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d108      	bne.n	800367a <HAL_TIM_PWM_Start+0x22>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	223e      	movs	r2, #62	; 0x3e
 800366c:	5c9b      	ldrb	r3, [r3, r2]
 800366e:	b2db      	uxtb	r3, r3
 8003670:	3b01      	subs	r3, #1
 8003672:	1e5a      	subs	r2, r3, #1
 8003674:	4193      	sbcs	r3, r2
 8003676:	b2db      	uxtb	r3, r3
 8003678:	e01f      	b.n	80036ba <HAL_TIM_PWM_Start+0x62>
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	2b04      	cmp	r3, #4
 800367e:	d108      	bne.n	8003692 <HAL_TIM_PWM_Start+0x3a>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	223f      	movs	r2, #63	; 0x3f
 8003684:	5c9b      	ldrb	r3, [r3, r2]
 8003686:	b2db      	uxtb	r3, r3
 8003688:	3b01      	subs	r3, #1
 800368a:	1e5a      	subs	r2, r3, #1
 800368c:	4193      	sbcs	r3, r2
 800368e:	b2db      	uxtb	r3, r3
 8003690:	e013      	b.n	80036ba <HAL_TIM_PWM_Start+0x62>
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	2b08      	cmp	r3, #8
 8003696:	d108      	bne.n	80036aa <HAL_TIM_PWM_Start+0x52>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2240      	movs	r2, #64	; 0x40
 800369c:	5c9b      	ldrb	r3, [r3, r2]
 800369e:	b2db      	uxtb	r3, r3
 80036a0:	3b01      	subs	r3, #1
 80036a2:	1e5a      	subs	r2, r3, #1
 80036a4:	4193      	sbcs	r3, r2
 80036a6:	b2db      	uxtb	r3, r3
 80036a8:	e007      	b.n	80036ba <HAL_TIM_PWM_Start+0x62>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2241      	movs	r2, #65	; 0x41
 80036ae:	5c9b      	ldrb	r3, [r3, r2]
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	3b01      	subs	r3, #1
 80036b4:	1e5a      	subs	r2, r3, #1
 80036b6:	4193      	sbcs	r3, r2
 80036b8:	b2db      	uxtb	r3, r3
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d001      	beq.n	80036c2 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 80036be:	2301      	movs	r3, #1
 80036c0:	e06a      	b.n	8003798 <HAL_TIM_PWM_Start+0x140>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d104      	bne.n	80036d2 <HAL_TIM_PWM_Start+0x7a>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	223e      	movs	r2, #62	; 0x3e
 80036cc:	2102      	movs	r1, #2
 80036ce:	5499      	strb	r1, [r3, r2]
 80036d0:	e013      	b.n	80036fa <HAL_TIM_PWM_Start+0xa2>
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	2b04      	cmp	r3, #4
 80036d6:	d104      	bne.n	80036e2 <HAL_TIM_PWM_Start+0x8a>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	223f      	movs	r2, #63	; 0x3f
 80036dc:	2102      	movs	r1, #2
 80036de:	5499      	strb	r1, [r3, r2]
 80036e0:	e00b      	b.n	80036fa <HAL_TIM_PWM_Start+0xa2>
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	2b08      	cmp	r3, #8
 80036e6:	d104      	bne.n	80036f2 <HAL_TIM_PWM_Start+0x9a>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2240      	movs	r2, #64	; 0x40
 80036ec:	2102      	movs	r1, #2
 80036ee:	5499      	strb	r1, [r3, r2]
 80036f0:	e003      	b.n	80036fa <HAL_TIM_PWM_Start+0xa2>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2241      	movs	r2, #65	; 0x41
 80036f6:	2102      	movs	r1, #2
 80036f8:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	6839      	ldr	r1, [r7, #0]
 8003700:	2201      	movs	r2, #1
 8003702:	0018      	movs	r0, r3
 8003704:	f000 fe1c 	bl	8004340 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a24      	ldr	r2, [pc, #144]	; (80037a0 <HAL_TIM_PWM_Start+0x148>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d009      	beq.n	8003726 <HAL_TIM_PWM_Start+0xce>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4a23      	ldr	r2, [pc, #140]	; (80037a4 <HAL_TIM_PWM_Start+0x14c>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d004      	beq.n	8003726 <HAL_TIM_PWM_Start+0xce>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a21      	ldr	r2, [pc, #132]	; (80037a8 <HAL_TIM_PWM_Start+0x150>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d101      	bne.n	800372a <HAL_TIM_PWM_Start+0xd2>
 8003726:	2301      	movs	r3, #1
 8003728:	e000      	b.n	800372c <HAL_TIM_PWM_Start+0xd4>
 800372a:	2300      	movs	r3, #0
 800372c:	2b00      	cmp	r3, #0
 800372e:	d008      	beq.n	8003742 <HAL_TIM_PWM_Start+0xea>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	2180      	movs	r1, #128	; 0x80
 800373c:	0209      	lsls	r1, r1, #8
 800373e:	430a      	orrs	r2, r1
 8003740:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a16      	ldr	r2, [pc, #88]	; (80037a0 <HAL_TIM_PWM_Start+0x148>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d00a      	beq.n	8003762 <HAL_TIM_PWM_Start+0x10a>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681a      	ldr	r2, [r3, #0]
 8003750:	2380      	movs	r3, #128	; 0x80
 8003752:	05db      	lsls	r3, r3, #23
 8003754:	429a      	cmp	r2, r3
 8003756:	d004      	beq.n	8003762 <HAL_TIM_PWM_Start+0x10a>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a13      	ldr	r2, [pc, #76]	; (80037ac <HAL_TIM_PWM_Start+0x154>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d111      	bne.n	8003786 <HAL_TIM_PWM_Start+0x12e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	689b      	ldr	r3, [r3, #8]
 8003768:	2207      	movs	r2, #7
 800376a:	4013      	ands	r3, r2
 800376c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	2b06      	cmp	r3, #6
 8003772:	d010      	beq.n	8003796 <HAL_TIM_PWM_Start+0x13e>
    {
      __HAL_TIM_ENABLE(htim);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	681a      	ldr	r2, [r3, #0]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	2101      	movs	r1, #1
 8003780:	430a      	orrs	r2, r1
 8003782:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003784:	e007      	b.n	8003796 <HAL_TIM_PWM_Start+0x13e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	681a      	ldr	r2, [r3, #0]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	2101      	movs	r1, #1
 8003792:	430a      	orrs	r2, r1
 8003794:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003796:	2300      	movs	r3, #0
}
 8003798:	0018      	movs	r0, r3
 800379a:	46bd      	mov	sp, r7
 800379c:	b004      	add	sp, #16
 800379e:	bd80      	pop	{r7, pc}
 80037a0:	40012c00 	.word	0x40012c00
 80037a4:	40014400 	.word	0x40014400
 80037a8:	40014800 	.word	0x40014800
 80037ac:	40000400 	.word	0x40000400

080037b0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b082      	sub	sp, #8
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	691b      	ldr	r3, [r3, #16]
 80037be:	2202      	movs	r2, #2
 80037c0:	4013      	ands	r3, r2
 80037c2:	2b02      	cmp	r3, #2
 80037c4:	d124      	bne.n	8003810 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	68db      	ldr	r3, [r3, #12]
 80037cc:	2202      	movs	r2, #2
 80037ce:	4013      	ands	r3, r2
 80037d0:	2b02      	cmp	r3, #2
 80037d2:	d11d      	bne.n	8003810 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	2203      	movs	r2, #3
 80037da:	4252      	negs	r2, r2
 80037dc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2201      	movs	r2, #1
 80037e2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	699b      	ldr	r3, [r3, #24]
 80037ea:	2203      	movs	r2, #3
 80037ec:	4013      	ands	r3, r2
 80037ee:	d004      	beq.n	80037fa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	0018      	movs	r0, r3
 80037f4:	f000 fa9c 	bl	8003d30 <HAL_TIM_IC_CaptureCallback>
 80037f8:	e007      	b.n	800380a <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	0018      	movs	r0, r3
 80037fe:	f000 fa8f 	bl	8003d20 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	0018      	movs	r0, r3
 8003806:	f000 fa9b 	bl	8003d40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2200      	movs	r2, #0
 800380e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	691b      	ldr	r3, [r3, #16]
 8003816:	2204      	movs	r2, #4
 8003818:	4013      	ands	r3, r2
 800381a:	2b04      	cmp	r3, #4
 800381c:	d125      	bne.n	800386a <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	68db      	ldr	r3, [r3, #12]
 8003824:	2204      	movs	r2, #4
 8003826:	4013      	ands	r3, r2
 8003828:	2b04      	cmp	r3, #4
 800382a:	d11e      	bne.n	800386a <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	2205      	movs	r2, #5
 8003832:	4252      	negs	r2, r2
 8003834:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2202      	movs	r2, #2
 800383a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	699a      	ldr	r2, [r3, #24]
 8003842:	23c0      	movs	r3, #192	; 0xc0
 8003844:	009b      	lsls	r3, r3, #2
 8003846:	4013      	ands	r3, r2
 8003848:	d004      	beq.n	8003854 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	0018      	movs	r0, r3
 800384e:	f000 fa6f 	bl	8003d30 <HAL_TIM_IC_CaptureCallback>
 8003852:	e007      	b.n	8003864 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	0018      	movs	r0, r3
 8003858:	f000 fa62 	bl	8003d20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	0018      	movs	r0, r3
 8003860:	f000 fa6e 	bl	8003d40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2200      	movs	r2, #0
 8003868:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	691b      	ldr	r3, [r3, #16]
 8003870:	2208      	movs	r2, #8
 8003872:	4013      	ands	r3, r2
 8003874:	2b08      	cmp	r3, #8
 8003876:	d124      	bne.n	80038c2 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	68db      	ldr	r3, [r3, #12]
 800387e:	2208      	movs	r2, #8
 8003880:	4013      	ands	r3, r2
 8003882:	2b08      	cmp	r3, #8
 8003884:	d11d      	bne.n	80038c2 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	2209      	movs	r2, #9
 800388c:	4252      	negs	r2, r2
 800388e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2204      	movs	r2, #4
 8003894:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	69db      	ldr	r3, [r3, #28]
 800389c:	2203      	movs	r2, #3
 800389e:	4013      	ands	r3, r2
 80038a0:	d004      	beq.n	80038ac <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	0018      	movs	r0, r3
 80038a6:	f000 fa43 	bl	8003d30 <HAL_TIM_IC_CaptureCallback>
 80038aa:	e007      	b.n	80038bc <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	0018      	movs	r0, r3
 80038b0:	f000 fa36 	bl	8003d20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	0018      	movs	r0, r3
 80038b8:	f000 fa42 	bl	8003d40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2200      	movs	r2, #0
 80038c0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	691b      	ldr	r3, [r3, #16]
 80038c8:	2210      	movs	r2, #16
 80038ca:	4013      	ands	r3, r2
 80038cc:	2b10      	cmp	r3, #16
 80038ce:	d125      	bne.n	800391c <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	68db      	ldr	r3, [r3, #12]
 80038d6:	2210      	movs	r2, #16
 80038d8:	4013      	ands	r3, r2
 80038da:	2b10      	cmp	r3, #16
 80038dc:	d11e      	bne.n	800391c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	2211      	movs	r2, #17
 80038e4:	4252      	negs	r2, r2
 80038e6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2208      	movs	r2, #8
 80038ec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	69da      	ldr	r2, [r3, #28]
 80038f4:	23c0      	movs	r3, #192	; 0xc0
 80038f6:	009b      	lsls	r3, r3, #2
 80038f8:	4013      	ands	r3, r2
 80038fa:	d004      	beq.n	8003906 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	0018      	movs	r0, r3
 8003900:	f000 fa16 	bl	8003d30 <HAL_TIM_IC_CaptureCallback>
 8003904:	e007      	b.n	8003916 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	0018      	movs	r0, r3
 800390a:	f000 fa09 	bl	8003d20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	0018      	movs	r0, r3
 8003912:	f000 fa15 	bl	8003d40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2200      	movs	r2, #0
 800391a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	691b      	ldr	r3, [r3, #16]
 8003922:	2201      	movs	r2, #1
 8003924:	4013      	ands	r3, r2
 8003926:	2b01      	cmp	r3, #1
 8003928:	d10f      	bne.n	800394a <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	68db      	ldr	r3, [r3, #12]
 8003930:	2201      	movs	r2, #1
 8003932:	4013      	ands	r3, r2
 8003934:	2b01      	cmp	r3, #1
 8003936:	d108      	bne.n	800394a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	2202      	movs	r2, #2
 800393e:	4252      	negs	r2, r2
 8003940:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	0018      	movs	r0, r3
 8003946:	f000 f9e3 	bl	8003d10 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	691b      	ldr	r3, [r3, #16]
 8003950:	2280      	movs	r2, #128	; 0x80
 8003952:	4013      	ands	r3, r2
 8003954:	2b80      	cmp	r3, #128	; 0x80
 8003956:	d10f      	bne.n	8003978 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	68db      	ldr	r3, [r3, #12]
 800395e:	2280      	movs	r2, #128	; 0x80
 8003960:	4013      	ands	r3, r2
 8003962:	2b80      	cmp	r3, #128	; 0x80
 8003964:	d108      	bne.n	8003978 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	2281      	movs	r2, #129	; 0x81
 800396c:	4252      	negs	r2, r2
 800396e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	0018      	movs	r0, r3
 8003974:	f000 fdc6 	bl	8004504 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	691b      	ldr	r3, [r3, #16]
 800397e:	2240      	movs	r2, #64	; 0x40
 8003980:	4013      	ands	r3, r2
 8003982:	2b40      	cmp	r3, #64	; 0x40
 8003984:	d10f      	bne.n	80039a6 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	68db      	ldr	r3, [r3, #12]
 800398c:	2240      	movs	r2, #64	; 0x40
 800398e:	4013      	ands	r3, r2
 8003990:	2b40      	cmp	r3, #64	; 0x40
 8003992:	d108      	bne.n	80039a6 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	2241      	movs	r2, #65	; 0x41
 800399a:	4252      	negs	r2, r2
 800399c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	0018      	movs	r0, r3
 80039a2:	f000 f9d5 	bl	8003d50 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	691b      	ldr	r3, [r3, #16]
 80039ac:	2220      	movs	r2, #32
 80039ae:	4013      	ands	r3, r2
 80039b0:	2b20      	cmp	r3, #32
 80039b2:	d10f      	bne.n	80039d4 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	68db      	ldr	r3, [r3, #12]
 80039ba:	2220      	movs	r2, #32
 80039bc:	4013      	ands	r3, r2
 80039be:	2b20      	cmp	r3, #32
 80039c0:	d108      	bne.n	80039d4 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	2221      	movs	r2, #33	; 0x21
 80039c8:	4252      	negs	r2, r2
 80039ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	0018      	movs	r0, r3
 80039d0:	f000 fd90 	bl	80044f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80039d4:	46c0      	nop			; (mov r8, r8)
 80039d6:	46bd      	mov	sp, r7
 80039d8:	b002      	add	sp, #8
 80039da:	bd80      	pop	{r7, pc}

080039dc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b086      	sub	sp, #24
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	60f8      	str	r0, [r7, #12]
 80039e4:	60b9      	str	r1, [r7, #8]
 80039e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039e8:	2317      	movs	r3, #23
 80039ea:	18fb      	adds	r3, r7, r3
 80039ec:	2200      	movs	r2, #0
 80039ee:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	223c      	movs	r2, #60	; 0x3c
 80039f4:	5c9b      	ldrb	r3, [r3, r2]
 80039f6:	2b01      	cmp	r3, #1
 80039f8:	d101      	bne.n	80039fe <HAL_TIM_PWM_ConfigChannel+0x22>
 80039fa:	2302      	movs	r3, #2
 80039fc:	e0ad      	b.n	8003b5a <HAL_TIM_PWM_ConfigChannel+0x17e>
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	223c      	movs	r2, #60	; 0x3c
 8003a02:	2101      	movs	r1, #1
 8003a04:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2b0c      	cmp	r3, #12
 8003a0a:	d100      	bne.n	8003a0e <HAL_TIM_PWM_ConfigChannel+0x32>
 8003a0c:	e076      	b.n	8003afc <HAL_TIM_PWM_ConfigChannel+0x120>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2b0c      	cmp	r3, #12
 8003a12:	d900      	bls.n	8003a16 <HAL_TIM_PWM_ConfigChannel+0x3a>
 8003a14:	e095      	b.n	8003b42 <HAL_TIM_PWM_ConfigChannel+0x166>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2b08      	cmp	r3, #8
 8003a1a:	d04e      	beq.n	8003aba <HAL_TIM_PWM_ConfigChannel+0xde>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2b08      	cmp	r3, #8
 8003a20:	d900      	bls.n	8003a24 <HAL_TIM_PWM_ConfigChannel+0x48>
 8003a22:	e08e      	b.n	8003b42 <HAL_TIM_PWM_ConfigChannel+0x166>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d003      	beq.n	8003a32 <HAL_TIM_PWM_ConfigChannel+0x56>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2b04      	cmp	r3, #4
 8003a2e:	d021      	beq.n	8003a74 <HAL_TIM_PWM_ConfigChannel+0x98>
 8003a30:	e087      	b.n	8003b42 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	68ba      	ldr	r2, [r7, #8]
 8003a38:	0011      	movs	r1, r2
 8003a3a:	0018      	movs	r0, r3
 8003a3c:	f000 fa06 	bl	8003e4c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	699a      	ldr	r2, [r3, #24]
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	2108      	movs	r1, #8
 8003a4c:	430a      	orrs	r2, r1
 8003a4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	699a      	ldr	r2, [r3, #24]
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	2104      	movs	r1, #4
 8003a5c:	438a      	bics	r2, r1
 8003a5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	6999      	ldr	r1, [r3, #24]
 8003a66:	68bb      	ldr	r3, [r7, #8]
 8003a68:	691a      	ldr	r2, [r3, #16]
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	430a      	orrs	r2, r1
 8003a70:	619a      	str	r2, [r3, #24]
      break;
 8003a72:	e06b      	b.n	8003b4c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	68ba      	ldr	r2, [r7, #8]
 8003a7a:	0011      	movs	r1, r2
 8003a7c:	0018      	movs	r0, r3
 8003a7e:	f000 fa63 	bl	8003f48 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	699a      	ldr	r2, [r3, #24]
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	2180      	movs	r1, #128	; 0x80
 8003a8e:	0109      	lsls	r1, r1, #4
 8003a90:	430a      	orrs	r2, r1
 8003a92:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	699a      	ldr	r2, [r3, #24]
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4931      	ldr	r1, [pc, #196]	; (8003b64 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8003aa0:	400a      	ands	r2, r1
 8003aa2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	6999      	ldr	r1, [r3, #24]
 8003aaa:	68bb      	ldr	r3, [r7, #8]
 8003aac:	691b      	ldr	r3, [r3, #16]
 8003aae:	021a      	lsls	r2, r3, #8
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	430a      	orrs	r2, r1
 8003ab6:	619a      	str	r2, [r3, #24]
      break;
 8003ab8:	e048      	b.n	8003b4c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	68ba      	ldr	r2, [r7, #8]
 8003ac0:	0011      	movs	r1, r2
 8003ac2:	0018      	movs	r0, r3
 8003ac4:	f000 fabe 	bl	8004044 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	69da      	ldr	r2, [r3, #28]
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	2108      	movs	r1, #8
 8003ad4:	430a      	orrs	r2, r1
 8003ad6:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	69da      	ldr	r2, [r3, #28]
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	2104      	movs	r1, #4
 8003ae4:	438a      	bics	r2, r1
 8003ae6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	69d9      	ldr	r1, [r3, #28]
 8003aee:	68bb      	ldr	r3, [r7, #8]
 8003af0:	691a      	ldr	r2, [r3, #16]
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	430a      	orrs	r2, r1
 8003af8:	61da      	str	r2, [r3, #28]
      break;
 8003afa:	e027      	b.n	8003b4c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	68ba      	ldr	r2, [r7, #8]
 8003b02:	0011      	movs	r1, r2
 8003b04:	0018      	movs	r0, r3
 8003b06:	f000 fb1d 	bl	8004144 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	69da      	ldr	r2, [r3, #28]
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	2180      	movs	r1, #128	; 0x80
 8003b16:	0109      	lsls	r1, r1, #4
 8003b18:	430a      	orrs	r2, r1
 8003b1a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	69da      	ldr	r2, [r3, #28]
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	490f      	ldr	r1, [pc, #60]	; (8003b64 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8003b28:	400a      	ands	r2, r1
 8003b2a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	69d9      	ldr	r1, [r3, #28]
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	691b      	ldr	r3, [r3, #16]
 8003b36:	021a      	lsls	r2, r3, #8
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	430a      	orrs	r2, r1
 8003b3e:	61da      	str	r2, [r3, #28]
      break;
 8003b40:	e004      	b.n	8003b4c <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8003b42:	2317      	movs	r3, #23
 8003b44:	18fb      	adds	r3, r7, r3
 8003b46:	2201      	movs	r2, #1
 8003b48:	701a      	strb	r2, [r3, #0]
      break;
 8003b4a:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	223c      	movs	r2, #60	; 0x3c
 8003b50:	2100      	movs	r1, #0
 8003b52:	5499      	strb	r1, [r3, r2]

  return status;
 8003b54:	2317      	movs	r3, #23
 8003b56:	18fb      	adds	r3, r7, r3
 8003b58:	781b      	ldrb	r3, [r3, #0]
}
 8003b5a:	0018      	movs	r0, r3
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	b006      	add	sp, #24
 8003b60:	bd80      	pop	{r7, pc}
 8003b62:	46c0      	nop			; (mov r8, r8)
 8003b64:	fffffbff 	.word	0xfffffbff

08003b68 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b084      	sub	sp, #16
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
 8003b70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b72:	230f      	movs	r3, #15
 8003b74:	18fb      	adds	r3, r7, r3
 8003b76:	2200      	movs	r2, #0
 8003b78:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	223c      	movs	r2, #60	; 0x3c
 8003b7e:	5c9b      	ldrb	r3, [r3, r2]
 8003b80:	2b01      	cmp	r3, #1
 8003b82:	d101      	bne.n	8003b88 <HAL_TIM_ConfigClockSource+0x20>
 8003b84:	2302      	movs	r3, #2
 8003b86:	e0bc      	b.n	8003d02 <HAL_TIM_ConfigClockSource+0x19a>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	223c      	movs	r2, #60	; 0x3c
 8003b8c:	2101      	movs	r1, #1
 8003b8e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	223d      	movs	r2, #61	; 0x3d
 8003b94:	2102      	movs	r1, #2
 8003b96:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	689b      	ldr	r3, [r3, #8]
 8003b9e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	2277      	movs	r2, #119	; 0x77
 8003ba4:	4393      	bics	r3, r2
 8003ba6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	4a58      	ldr	r2, [pc, #352]	; (8003d0c <HAL_TIM_ConfigClockSource+0x1a4>)
 8003bac:	4013      	ands	r3, r2
 8003bae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	68ba      	ldr	r2, [r7, #8]
 8003bb6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	2280      	movs	r2, #128	; 0x80
 8003bbe:	0192      	lsls	r2, r2, #6
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d040      	beq.n	8003c46 <HAL_TIM_ConfigClockSource+0xde>
 8003bc4:	2280      	movs	r2, #128	; 0x80
 8003bc6:	0192      	lsls	r2, r2, #6
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d900      	bls.n	8003bce <HAL_TIM_ConfigClockSource+0x66>
 8003bcc:	e088      	b.n	8003ce0 <HAL_TIM_ConfigClockSource+0x178>
 8003bce:	2280      	movs	r2, #128	; 0x80
 8003bd0:	0152      	lsls	r2, r2, #5
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d100      	bne.n	8003bd8 <HAL_TIM_ConfigClockSource+0x70>
 8003bd6:	e088      	b.n	8003cea <HAL_TIM_ConfigClockSource+0x182>
 8003bd8:	2280      	movs	r2, #128	; 0x80
 8003bda:	0152      	lsls	r2, r2, #5
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d900      	bls.n	8003be2 <HAL_TIM_ConfigClockSource+0x7a>
 8003be0:	e07e      	b.n	8003ce0 <HAL_TIM_ConfigClockSource+0x178>
 8003be2:	2b70      	cmp	r3, #112	; 0x70
 8003be4:	d018      	beq.n	8003c18 <HAL_TIM_ConfigClockSource+0xb0>
 8003be6:	d900      	bls.n	8003bea <HAL_TIM_ConfigClockSource+0x82>
 8003be8:	e07a      	b.n	8003ce0 <HAL_TIM_ConfigClockSource+0x178>
 8003bea:	2b60      	cmp	r3, #96	; 0x60
 8003bec:	d04f      	beq.n	8003c8e <HAL_TIM_ConfigClockSource+0x126>
 8003bee:	d900      	bls.n	8003bf2 <HAL_TIM_ConfigClockSource+0x8a>
 8003bf0:	e076      	b.n	8003ce0 <HAL_TIM_ConfigClockSource+0x178>
 8003bf2:	2b50      	cmp	r3, #80	; 0x50
 8003bf4:	d03b      	beq.n	8003c6e <HAL_TIM_ConfigClockSource+0x106>
 8003bf6:	d900      	bls.n	8003bfa <HAL_TIM_ConfigClockSource+0x92>
 8003bf8:	e072      	b.n	8003ce0 <HAL_TIM_ConfigClockSource+0x178>
 8003bfa:	2b40      	cmp	r3, #64	; 0x40
 8003bfc:	d057      	beq.n	8003cae <HAL_TIM_ConfigClockSource+0x146>
 8003bfe:	d900      	bls.n	8003c02 <HAL_TIM_ConfigClockSource+0x9a>
 8003c00:	e06e      	b.n	8003ce0 <HAL_TIM_ConfigClockSource+0x178>
 8003c02:	2b30      	cmp	r3, #48	; 0x30
 8003c04:	d063      	beq.n	8003cce <HAL_TIM_ConfigClockSource+0x166>
 8003c06:	d86b      	bhi.n	8003ce0 <HAL_TIM_ConfigClockSource+0x178>
 8003c08:	2b20      	cmp	r3, #32
 8003c0a:	d060      	beq.n	8003cce <HAL_TIM_ConfigClockSource+0x166>
 8003c0c:	d868      	bhi.n	8003ce0 <HAL_TIM_ConfigClockSource+0x178>
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d05d      	beq.n	8003cce <HAL_TIM_ConfigClockSource+0x166>
 8003c12:	2b10      	cmp	r3, #16
 8003c14:	d05b      	beq.n	8003cce <HAL_TIM_ConfigClockSource+0x166>
 8003c16:	e063      	b.n	8003ce0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6818      	ldr	r0, [r3, #0]
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	6899      	ldr	r1, [r3, #8]
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	685a      	ldr	r2, [r3, #4]
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	68db      	ldr	r3, [r3, #12]
 8003c28:	f000 fb6a 	bl	8004300 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	689b      	ldr	r3, [r3, #8]
 8003c32:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003c34:	68bb      	ldr	r3, [r7, #8]
 8003c36:	2277      	movs	r2, #119	; 0x77
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	68ba      	ldr	r2, [r7, #8]
 8003c42:	609a      	str	r2, [r3, #8]
      break;
 8003c44:	e052      	b.n	8003cec <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6818      	ldr	r0, [r3, #0]
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	6899      	ldr	r1, [r3, #8]
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	685a      	ldr	r2, [r3, #4]
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	68db      	ldr	r3, [r3, #12]
 8003c56:	f000 fb53 	bl	8004300 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	689a      	ldr	r2, [r3, #8]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	2180      	movs	r1, #128	; 0x80
 8003c66:	01c9      	lsls	r1, r1, #7
 8003c68:	430a      	orrs	r2, r1
 8003c6a:	609a      	str	r2, [r3, #8]
      break;
 8003c6c:	e03e      	b.n	8003cec <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6818      	ldr	r0, [r3, #0]
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	6859      	ldr	r1, [r3, #4]
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	68db      	ldr	r3, [r3, #12]
 8003c7a:	001a      	movs	r2, r3
 8003c7c:	f000 fac6 	bl	800420c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	2150      	movs	r1, #80	; 0x50
 8003c86:	0018      	movs	r0, r3
 8003c88:	f000 fb20 	bl	80042cc <TIM_ITRx_SetConfig>
      break;
 8003c8c:	e02e      	b.n	8003cec <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6818      	ldr	r0, [r3, #0]
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	6859      	ldr	r1, [r3, #4]
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	68db      	ldr	r3, [r3, #12]
 8003c9a:	001a      	movs	r2, r3
 8003c9c:	f000 fae4 	bl	8004268 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	2160      	movs	r1, #96	; 0x60
 8003ca6:	0018      	movs	r0, r3
 8003ca8:	f000 fb10 	bl	80042cc <TIM_ITRx_SetConfig>
      break;
 8003cac:	e01e      	b.n	8003cec <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6818      	ldr	r0, [r3, #0]
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	6859      	ldr	r1, [r3, #4]
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	68db      	ldr	r3, [r3, #12]
 8003cba:	001a      	movs	r2, r3
 8003cbc:	f000 faa6 	bl	800420c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	2140      	movs	r1, #64	; 0x40
 8003cc6:	0018      	movs	r0, r3
 8003cc8:	f000 fb00 	bl	80042cc <TIM_ITRx_SetConfig>
      break;
 8003ccc:	e00e      	b.n	8003cec <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681a      	ldr	r2, [r3, #0]
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	0019      	movs	r1, r3
 8003cd8:	0010      	movs	r0, r2
 8003cda:	f000 faf7 	bl	80042cc <TIM_ITRx_SetConfig>
      break;
 8003cde:	e005      	b.n	8003cec <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8003ce0:	230f      	movs	r3, #15
 8003ce2:	18fb      	adds	r3, r7, r3
 8003ce4:	2201      	movs	r2, #1
 8003ce6:	701a      	strb	r2, [r3, #0]
      break;
 8003ce8:	e000      	b.n	8003cec <HAL_TIM_ConfigClockSource+0x184>
      break;
 8003cea:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	223d      	movs	r2, #61	; 0x3d
 8003cf0:	2101      	movs	r1, #1
 8003cf2:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	223c      	movs	r2, #60	; 0x3c
 8003cf8:	2100      	movs	r1, #0
 8003cfa:	5499      	strb	r1, [r3, r2]

  return status;
 8003cfc:	230f      	movs	r3, #15
 8003cfe:	18fb      	adds	r3, r7, r3
 8003d00:	781b      	ldrb	r3, [r3, #0]
}
 8003d02:	0018      	movs	r0, r3
 8003d04:	46bd      	mov	sp, r7
 8003d06:	b004      	add	sp, #16
 8003d08:	bd80      	pop	{r7, pc}
 8003d0a:	46c0      	nop			; (mov r8, r8)
 8003d0c:	ffff00ff 	.word	0xffff00ff

08003d10 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b082      	sub	sp, #8
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003d18:	46c0      	nop			; (mov r8, r8)
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	b002      	add	sp, #8
 8003d1e:	bd80      	pop	{r7, pc}

08003d20 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b082      	sub	sp, #8
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003d28:	46c0      	nop			; (mov r8, r8)
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	b002      	add	sp, #8
 8003d2e:	bd80      	pop	{r7, pc}

08003d30 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b082      	sub	sp, #8
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003d38:	46c0      	nop			; (mov r8, r8)
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	b002      	add	sp, #8
 8003d3e:	bd80      	pop	{r7, pc}

08003d40 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b082      	sub	sp, #8
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003d48:	46c0      	nop			; (mov r8, r8)
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	b002      	add	sp, #8
 8003d4e:	bd80      	pop	{r7, pc}

08003d50 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b082      	sub	sp, #8
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003d58:	46c0      	nop			; (mov r8, r8)
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	b002      	add	sp, #8
 8003d5e:	bd80      	pop	{r7, pc}

08003d60 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b084      	sub	sp, #16
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
 8003d68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	4a30      	ldr	r2, [pc, #192]	; (8003e34 <TIM_Base_SetConfig+0xd4>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d008      	beq.n	8003d8a <TIM_Base_SetConfig+0x2a>
 8003d78:	687a      	ldr	r2, [r7, #4]
 8003d7a:	2380      	movs	r3, #128	; 0x80
 8003d7c:	05db      	lsls	r3, r3, #23
 8003d7e:	429a      	cmp	r2, r3
 8003d80:	d003      	beq.n	8003d8a <TIM_Base_SetConfig+0x2a>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	4a2c      	ldr	r2, [pc, #176]	; (8003e38 <TIM_Base_SetConfig+0xd8>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d108      	bne.n	8003d9c <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	2270      	movs	r2, #112	; 0x70
 8003d8e:	4393      	bics	r3, r2
 8003d90:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	68fa      	ldr	r2, [r7, #12]
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	4a25      	ldr	r2, [pc, #148]	; (8003e34 <TIM_Base_SetConfig+0xd4>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d014      	beq.n	8003dce <TIM_Base_SetConfig+0x6e>
 8003da4:	687a      	ldr	r2, [r7, #4]
 8003da6:	2380      	movs	r3, #128	; 0x80
 8003da8:	05db      	lsls	r3, r3, #23
 8003daa:	429a      	cmp	r2, r3
 8003dac:	d00f      	beq.n	8003dce <TIM_Base_SetConfig+0x6e>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	4a21      	ldr	r2, [pc, #132]	; (8003e38 <TIM_Base_SetConfig+0xd8>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d00b      	beq.n	8003dce <TIM_Base_SetConfig+0x6e>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	4a20      	ldr	r2, [pc, #128]	; (8003e3c <TIM_Base_SetConfig+0xdc>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d007      	beq.n	8003dce <TIM_Base_SetConfig+0x6e>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	4a1f      	ldr	r2, [pc, #124]	; (8003e40 <TIM_Base_SetConfig+0xe0>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d003      	beq.n	8003dce <TIM_Base_SetConfig+0x6e>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	4a1e      	ldr	r2, [pc, #120]	; (8003e44 <TIM_Base_SetConfig+0xe4>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d108      	bne.n	8003de0 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	4a1d      	ldr	r2, [pc, #116]	; (8003e48 <TIM_Base_SetConfig+0xe8>)
 8003dd2:	4013      	ands	r3, r2
 8003dd4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	68db      	ldr	r3, [r3, #12]
 8003dda:	68fa      	ldr	r2, [r7, #12]
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	2280      	movs	r2, #128	; 0x80
 8003de4:	4393      	bics	r3, r2
 8003de6:	001a      	movs	r2, r3
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	695b      	ldr	r3, [r3, #20]
 8003dec:	4313      	orrs	r3, r2
 8003dee:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	68fa      	ldr	r2, [r7, #12]
 8003df4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	689a      	ldr	r2, [r3, #8]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	681a      	ldr	r2, [r3, #0]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	4a0a      	ldr	r2, [pc, #40]	; (8003e34 <TIM_Base_SetConfig+0xd4>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d007      	beq.n	8003e1e <TIM_Base_SetConfig+0xbe>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	4a0b      	ldr	r2, [pc, #44]	; (8003e40 <TIM_Base_SetConfig+0xe0>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d003      	beq.n	8003e1e <TIM_Base_SetConfig+0xbe>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	4a0a      	ldr	r2, [pc, #40]	; (8003e44 <TIM_Base_SetConfig+0xe4>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d103      	bne.n	8003e26 <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	691a      	ldr	r2, [r3, #16]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2201      	movs	r2, #1
 8003e2a:	615a      	str	r2, [r3, #20]
}
 8003e2c:	46c0      	nop			; (mov r8, r8)
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	b004      	add	sp, #16
 8003e32:	bd80      	pop	{r7, pc}
 8003e34:	40012c00 	.word	0x40012c00
 8003e38:	40000400 	.word	0x40000400
 8003e3c:	40002000 	.word	0x40002000
 8003e40:	40014400 	.word	0x40014400
 8003e44:	40014800 	.word	0x40014800
 8003e48:	fffffcff 	.word	0xfffffcff

08003e4c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b086      	sub	sp, #24
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
 8003e54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6a1b      	ldr	r3, [r3, #32]
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	4393      	bics	r3, r2
 8003e5e:	001a      	movs	r2, r3
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6a1b      	ldr	r3, [r3, #32]
 8003e68:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	699b      	ldr	r3, [r3, #24]
 8003e74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	2270      	movs	r2, #112	; 0x70
 8003e7a:	4393      	bics	r3, r2
 8003e7c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	2203      	movs	r2, #3
 8003e82:	4393      	bics	r3, r2
 8003e84:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	68fa      	ldr	r2, [r7, #12]
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	2202      	movs	r2, #2
 8003e94:	4393      	bics	r3, r2
 8003e96:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	689b      	ldr	r3, [r3, #8]
 8003e9c:	697a      	ldr	r2, [r7, #20]
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	4a23      	ldr	r2, [pc, #140]	; (8003f34 <TIM_OC1_SetConfig+0xe8>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d007      	beq.n	8003eba <TIM_OC1_SetConfig+0x6e>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	4a22      	ldr	r2, [pc, #136]	; (8003f38 <TIM_OC1_SetConfig+0xec>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d003      	beq.n	8003eba <TIM_OC1_SetConfig+0x6e>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	4a21      	ldr	r2, [pc, #132]	; (8003f3c <TIM_OC1_SetConfig+0xf0>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d10c      	bne.n	8003ed4 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003eba:	697b      	ldr	r3, [r7, #20]
 8003ebc:	2208      	movs	r2, #8
 8003ebe:	4393      	bics	r3, r2
 8003ec0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	68db      	ldr	r3, [r3, #12]
 8003ec6:	697a      	ldr	r2, [r7, #20]
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003ecc:	697b      	ldr	r3, [r7, #20]
 8003ece:	2204      	movs	r2, #4
 8003ed0:	4393      	bics	r3, r2
 8003ed2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	4a17      	ldr	r2, [pc, #92]	; (8003f34 <TIM_OC1_SetConfig+0xe8>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d007      	beq.n	8003eec <TIM_OC1_SetConfig+0xa0>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	4a16      	ldr	r2, [pc, #88]	; (8003f38 <TIM_OC1_SetConfig+0xec>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d003      	beq.n	8003eec <TIM_OC1_SetConfig+0xa0>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	4a15      	ldr	r2, [pc, #84]	; (8003f3c <TIM_OC1_SetConfig+0xf0>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d111      	bne.n	8003f10 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003eec:	693b      	ldr	r3, [r7, #16]
 8003eee:	4a14      	ldr	r2, [pc, #80]	; (8003f40 <TIM_OC1_SetConfig+0xf4>)
 8003ef0:	4013      	ands	r3, r2
 8003ef2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003ef4:	693b      	ldr	r3, [r7, #16]
 8003ef6:	4a13      	ldr	r2, [pc, #76]	; (8003f44 <TIM_OC1_SetConfig+0xf8>)
 8003ef8:	4013      	ands	r3, r2
 8003efa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	695b      	ldr	r3, [r3, #20]
 8003f00:	693a      	ldr	r2, [r7, #16]
 8003f02:	4313      	orrs	r3, r2
 8003f04:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	699b      	ldr	r3, [r3, #24]
 8003f0a:	693a      	ldr	r2, [r7, #16]
 8003f0c:	4313      	orrs	r3, r2
 8003f0e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	693a      	ldr	r2, [r7, #16]
 8003f14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	68fa      	ldr	r2, [r7, #12]
 8003f1a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	685a      	ldr	r2, [r3, #4]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	697a      	ldr	r2, [r7, #20]
 8003f28:	621a      	str	r2, [r3, #32]
}
 8003f2a:	46c0      	nop			; (mov r8, r8)
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	b006      	add	sp, #24
 8003f30:	bd80      	pop	{r7, pc}
 8003f32:	46c0      	nop			; (mov r8, r8)
 8003f34:	40012c00 	.word	0x40012c00
 8003f38:	40014400 	.word	0x40014400
 8003f3c:	40014800 	.word	0x40014800
 8003f40:	fffffeff 	.word	0xfffffeff
 8003f44:	fffffdff 	.word	0xfffffdff

08003f48 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b086      	sub	sp, #24
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
 8003f50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6a1b      	ldr	r3, [r3, #32]
 8003f56:	2210      	movs	r2, #16
 8003f58:	4393      	bics	r3, r2
 8003f5a:	001a      	movs	r2, r3
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6a1b      	ldr	r3, [r3, #32]
 8003f64:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	699b      	ldr	r3, [r3, #24]
 8003f70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	4a2c      	ldr	r2, [pc, #176]	; (8004028 <TIM_OC2_SetConfig+0xe0>)
 8003f76:	4013      	ands	r3, r2
 8003f78:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	4a2b      	ldr	r2, [pc, #172]	; (800402c <TIM_OC2_SetConfig+0xe4>)
 8003f7e:	4013      	ands	r3, r2
 8003f80:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	021b      	lsls	r3, r3, #8
 8003f88:	68fa      	ldr	r2, [r7, #12]
 8003f8a:	4313      	orrs	r3, r2
 8003f8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003f8e:	697b      	ldr	r3, [r7, #20]
 8003f90:	2220      	movs	r2, #32
 8003f92:	4393      	bics	r3, r2
 8003f94:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	689b      	ldr	r3, [r3, #8]
 8003f9a:	011b      	lsls	r3, r3, #4
 8003f9c:	697a      	ldr	r2, [r7, #20]
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	4a22      	ldr	r2, [pc, #136]	; (8004030 <TIM_OC2_SetConfig+0xe8>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d10d      	bne.n	8003fc6 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003faa:	697b      	ldr	r3, [r7, #20]
 8003fac:	2280      	movs	r2, #128	; 0x80
 8003fae:	4393      	bics	r3, r2
 8003fb0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	68db      	ldr	r3, [r3, #12]
 8003fb6:	011b      	lsls	r3, r3, #4
 8003fb8:	697a      	ldr	r2, [r7, #20]
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	2240      	movs	r2, #64	; 0x40
 8003fc2:	4393      	bics	r3, r2
 8003fc4:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	4a19      	ldr	r2, [pc, #100]	; (8004030 <TIM_OC2_SetConfig+0xe8>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d007      	beq.n	8003fde <TIM_OC2_SetConfig+0x96>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	4a18      	ldr	r2, [pc, #96]	; (8004034 <TIM_OC2_SetConfig+0xec>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d003      	beq.n	8003fde <TIM_OC2_SetConfig+0x96>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	4a17      	ldr	r2, [pc, #92]	; (8004038 <TIM_OC2_SetConfig+0xf0>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d113      	bne.n	8004006 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003fde:	693b      	ldr	r3, [r7, #16]
 8003fe0:	4a16      	ldr	r2, [pc, #88]	; (800403c <TIM_OC2_SetConfig+0xf4>)
 8003fe2:	4013      	ands	r3, r2
 8003fe4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003fe6:	693b      	ldr	r3, [r7, #16]
 8003fe8:	4a15      	ldr	r2, [pc, #84]	; (8004040 <TIM_OC2_SetConfig+0xf8>)
 8003fea:	4013      	ands	r3, r2
 8003fec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	695b      	ldr	r3, [r3, #20]
 8003ff2:	009b      	lsls	r3, r3, #2
 8003ff4:	693a      	ldr	r2, [r7, #16]
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	699b      	ldr	r3, [r3, #24]
 8003ffe:	009b      	lsls	r3, r3, #2
 8004000:	693a      	ldr	r2, [r7, #16]
 8004002:	4313      	orrs	r3, r2
 8004004:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	693a      	ldr	r2, [r7, #16]
 800400a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	68fa      	ldr	r2, [r7, #12]
 8004010:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	685a      	ldr	r2, [r3, #4]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	697a      	ldr	r2, [r7, #20]
 800401e:	621a      	str	r2, [r3, #32]
}
 8004020:	46c0      	nop			; (mov r8, r8)
 8004022:	46bd      	mov	sp, r7
 8004024:	b006      	add	sp, #24
 8004026:	bd80      	pop	{r7, pc}
 8004028:	ffff8fff 	.word	0xffff8fff
 800402c:	fffffcff 	.word	0xfffffcff
 8004030:	40012c00 	.word	0x40012c00
 8004034:	40014400 	.word	0x40014400
 8004038:	40014800 	.word	0x40014800
 800403c:	fffffbff 	.word	0xfffffbff
 8004040:	fffff7ff 	.word	0xfffff7ff

08004044 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b086      	sub	sp, #24
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
 800404c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6a1b      	ldr	r3, [r3, #32]
 8004052:	4a33      	ldr	r2, [pc, #204]	; (8004120 <TIM_OC3_SetConfig+0xdc>)
 8004054:	401a      	ands	r2, r3
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6a1b      	ldr	r3, [r3, #32]
 800405e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	69db      	ldr	r3, [r3, #28]
 800406a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	2270      	movs	r2, #112	; 0x70
 8004070:	4393      	bics	r3, r2
 8004072:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	2203      	movs	r2, #3
 8004078:	4393      	bics	r3, r2
 800407a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	68fa      	ldr	r2, [r7, #12]
 8004082:	4313      	orrs	r3, r2
 8004084:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	4a26      	ldr	r2, [pc, #152]	; (8004124 <TIM_OC3_SetConfig+0xe0>)
 800408a:	4013      	ands	r3, r2
 800408c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	689b      	ldr	r3, [r3, #8]
 8004092:	021b      	lsls	r3, r3, #8
 8004094:	697a      	ldr	r2, [r7, #20]
 8004096:	4313      	orrs	r3, r2
 8004098:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	4a22      	ldr	r2, [pc, #136]	; (8004128 <TIM_OC3_SetConfig+0xe4>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d10d      	bne.n	80040be <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80040a2:	697b      	ldr	r3, [r7, #20]
 80040a4:	4a21      	ldr	r2, [pc, #132]	; (800412c <TIM_OC3_SetConfig+0xe8>)
 80040a6:	4013      	ands	r3, r2
 80040a8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	68db      	ldr	r3, [r3, #12]
 80040ae:	021b      	lsls	r3, r3, #8
 80040b0:	697a      	ldr	r2, [r7, #20]
 80040b2:	4313      	orrs	r3, r2
 80040b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80040b6:	697b      	ldr	r3, [r7, #20]
 80040b8:	4a1d      	ldr	r2, [pc, #116]	; (8004130 <TIM_OC3_SetConfig+0xec>)
 80040ba:	4013      	ands	r3, r2
 80040bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	4a19      	ldr	r2, [pc, #100]	; (8004128 <TIM_OC3_SetConfig+0xe4>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d007      	beq.n	80040d6 <TIM_OC3_SetConfig+0x92>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	4a1a      	ldr	r2, [pc, #104]	; (8004134 <TIM_OC3_SetConfig+0xf0>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d003      	beq.n	80040d6 <TIM_OC3_SetConfig+0x92>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	4a19      	ldr	r2, [pc, #100]	; (8004138 <TIM_OC3_SetConfig+0xf4>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d113      	bne.n	80040fe <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80040d6:	693b      	ldr	r3, [r7, #16]
 80040d8:	4a18      	ldr	r2, [pc, #96]	; (800413c <TIM_OC3_SetConfig+0xf8>)
 80040da:	4013      	ands	r3, r2
 80040dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80040de:	693b      	ldr	r3, [r7, #16]
 80040e0:	4a17      	ldr	r2, [pc, #92]	; (8004140 <TIM_OC3_SetConfig+0xfc>)
 80040e2:	4013      	ands	r3, r2
 80040e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	695b      	ldr	r3, [r3, #20]
 80040ea:	011b      	lsls	r3, r3, #4
 80040ec:	693a      	ldr	r2, [r7, #16]
 80040ee:	4313      	orrs	r3, r2
 80040f0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	699b      	ldr	r3, [r3, #24]
 80040f6:	011b      	lsls	r3, r3, #4
 80040f8:	693a      	ldr	r2, [r7, #16]
 80040fa:	4313      	orrs	r3, r2
 80040fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	693a      	ldr	r2, [r7, #16]
 8004102:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	68fa      	ldr	r2, [r7, #12]
 8004108:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	685a      	ldr	r2, [r3, #4]
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	697a      	ldr	r2, [r7, #20]
 8004116:	621a      	str	r2, [r3, #32]
}
 8004118:	46c0      	nop			; (mov r8, r8)
 800411a:	46bd      	mov	sp, r7
 800411c:	b006      	add	sp, #24
 800411e:	bd80      	pop	{r7, pc}
 8004120:	fffffeff 	.word	0xfffffeff
 8004124:	fffffdff 	.word	0xfffffdff
 8004128:	40012c00 	.word	0x40012c00
 800412c:	fffff7ff 	.word	0xfffff7ff
 8004130:	fffffbff 	.word	0xfffffbff
 8004134:	40014400 	.word	0x40014400
 8004138:	40014800 	.word	0x40014800
 800413c:	ffffefff 	.word	0xffffefff
 8004140:	ffffdfff 	.word	0xffffdfff

08004144 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b086      	sub	sp, #24
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
 800414c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6a1b      	ldr	r3, [r3, #32]
 8004152:	4a26      	ldr	r2, [pc, #152]	; (80041ec <TIM_OC4_SetConfig+0xa8>)
 8004154:	401a      	ands	r2, r3
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6a1b      	ldr	r3, [r3, #32]
 800415e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	69db      	ldr	r3, [r3, #28]
 800416a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	4a20      	ldr	r2, [pc, #128]	; (80041f0 <TIM_OC4_SetConfig+0xac>)
 8004170:	4013      	ands	r3, r2
 8004172:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	4a1f      	ldr	r2, [pc, #124]	; (80041f4 <TIM_OC4_SetConfig+0xb0>)
 8004178:	4013      	ands	r3, r2
 800417a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	021b      	lsls	r3, r3, #8
 8004182:	68fa      	ldr	r2, [r7, #12]
 8004184:	4313      	orrs	r3, r2
 8004186:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004188:	693b      	ldr	r3, [r7, #16]
 800418a:	4a1b      	ldr	r2, [pc, #108]	; (80041f8 <TIM_OC4_SetConfig+0xb4>)
 800418c:	4013      	ands	r3, r2
 800418e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	689b      	ldr	r3, [r3, #8]
 8004194:	031b      	lsls	r3, r3, #12
 8004196:	693a      	ldr	r2, [r7, #16]
 8004198:	4313      	orrs	r3, r2
 800419a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	4a17      	ldr	r2, [pc, #92]	; (80041fc <TIM_OC4_SetConfig+0xb8>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d007      	beq.n	80041b4 <TIM_OC4_SetConfig+0x70>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	4a16      	ldr	r2, [pc, #88]	; (8004200 <TIM_OC4_SetConfig+0xbc>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d003      	beq.n	80041b4 <TIM_OC4_SetConfig+0x70>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	4a15      	ldr	r2, [pc, #84]	; (8004204 <TIM_OC4_SetConfig+0xc0>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d109      	bne.n	80041c8 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80041b4:	697b      	ldr	r3, [r7, #20]
 80041b6:	4a14      	ldr	r2, [pc, #80]	; (8004208 <TIM_OC4_SetConfig+0xc4>)
 80041b8:	4013      	ands	r3, r2
 80041ba:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	695b      	ldr	r3, [r3, #20]
 80041c0:	019b      	lsls	r3, r3, #6
 80041c2:	697a      	ldr	r2, [r7, #20]
 80041c4:	4313      	orrs	r3, r2
 80041c6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	697a      	ldr	r2, [r7, #20]
 80041cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	68fa      	ldr	r2, [r7, #12]
 80041d2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	685a      	ldr	r2, [r3, #4]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	693a      	ldr	r2, [r7, #16]
 80041e0:	621a      	str	r2, [r3, #32]
}
 80041e2:	46c0      	nop			; (mov r8, r8)
 80041e4:	46bd      	mov	sp, r7
 80041e6:	b006      	add	sp, #24
 80041e8:	bd80      	pop	{r7, pc}
 80041ea:	46c0      	nop			; (mov r8, r8)
 80041ec:	ffffefff 	.word	0xffffefff
 80041f0:	ffff8fff 	.word	0xffff8fff
 80041f4:	fffffcff 	.word	0xfffffcff
 80041f8:	ffffdfff 	.word	0xffffdfff
 80041fc:	40012c00 	.word	0x40012c00
 8004200:	40014400 	.word	0x40014400
 8004204:	40014800 	.word	0x40014800
 8004208:	ffffbfff 	.word	0xffffbfff

0800420c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b086      	sub	sp, #24
 8004210:	af00      	add	r7, sp, #0
 8004212:	60f8      	str	r0, [r7, #12]
 8004214:	60b9      	str	r1, [r7, #8]
 8004216:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	6a1b      	ldr	r3, [r3, #32]
 800421c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	6a1b      	ldr	r3, [r3, #32]
 8004222:	2201      	movs	r2, #1
 8004224:	4393      	bics	r3, r2
 8004226:	001a      	movs	r2, r3
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	699b      	ldr	r3, [r3, #24]
 8004230:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	22f0      	movs	r2, #240	; 0xf0
 8004236:	4393      	bics	r3, r2
 8004238:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	011b      	lsls	r3, r3, #4
 800423e:	693a      	ldr	r2, [r7, #16]
 8004240:	4313      	orrs	r3, r2
 8004242:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004244:	697b      	ldr	r3, [r7, #20]
 8004246:	220a      	movs	r2, #10
 8004248:	4393      	bics	r3, r2
 800424a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800424c:	697a      	ldr	r2, [r7, #20]
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	4313      	orrs	r3, r2
 8004252:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	693a      	ldr	r2, [r7, #16]
 8004258:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	697a      	ldr	r2, [r7, #20]
 800425e:	621a      	str	r2, [r3, #32]
}
 8004260:	46c0      	nop			; (mov r8, r8)
 8004262:	46bd      	mov	sp, r7
 8004264:	b006      	add	sp, #24
 8004266:	bd80      	pop	{r7, pc}

08004268 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b086      	sub	sp, #24
 800426c:	af00      	add	r7, sp, #0
 800426e:	60f8      	str	r0, [r7, #12]
 8004270:	60b9      	str	r1, [r7, #8]
 8004272:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	6a1b      	ldr	r3, [r3, #32]
 8004278:	2210      	movs	r2, #16
 800427a:	4393      	bics	r3, r2
 800427c:	001a      	movs	r2, r3
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	699b      	ldr	r3, [r3, #24]
 8004286:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	6a1b      	ldr	r3, [r3, #32]
 800428c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800428e:	697b      	ldr	r3, [r7, #20]
 8004290:	4a0d      	ldr	r2, [pc, #52]	; (80042c8 <TIM_TI2_ConfigInputStage+0x60>)
 8004292:	4013      	ands	r3, r2
 8004294:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	031b      	lsls	r3, r3, #12
 800429a:	697a      	ldr	r2, [r7, #20]
 800429c:	4313      	orrs	r3, r2
 800429e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80042a0:	693b      	ldr	r3, [r7, #16]
 80042a2:	22a0      	movs	r2, #160	; 0xa0
 80042a4:	4393      	bics	r3, r2
 80042a6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	011b      	lsls	r3, r3, #4
 80042ac:	693a      	ldr	r2, [r7, #16]
 80042ae:	4313      	orrs	r3, r2
 80042b0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	697a      	ldr	r2, [r7, #20]
 80042b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	693a      	ldr	r2, [r7, #16]
 80042bc:	621a      	str	r2, [r3, #32]
}
 80042be:	46c0      	nop			; (mov r8, r8)
 80042c0:	46bd      	mov	sp, r7
 80042c2:	b006      	add	sp, #24
 80042c4:	bd80      	pop	{r7, pc}
 80042c6:	46c0      	nop			; (mov r8, r8)
 80042c8:	ffff0fff 	.word	0xffff0fff

080042cc <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b084      	sub	sp, #16
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
 80042d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	689b      	ldr	r3, [r3, #8]
 80042da:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	2270      	movs	r2, #112	; 0x70
 80042e0:	4393      	bics	r3, r2
 80042e2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80042e4:	683a      	ldr	r2, [r7, #0]
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	4313      	orrs	r3, r2
 80042ea:	2207      	movs	r2, #7
 80042ec:	4313      	orrs	r3, r2
 80042ee:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	68fa      	ldr	r2, [r7, #12]
 80042f4:	609a      	str	r2, [r3, #8]
}
 80042f6:	46c0      	nop			; (mov r8, r8)
 80042f8:	46bd      	mov	sp, r7
 80042fa:	b004      	add	sp, #16
 80042fc:	bd80      	pop	{r7, pc}
	...

08004300 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b086      	sub	sp, #24
 8004304:	af00      	add	r7, sp, #0
 8004306:	60f8      	str	r0, [r7, #12]
 8004308:	60b9      	str	r1, [r7, #8]
 800430a:	607a      	str	r2, [r7, #4]
 800430c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	689b      	ldr	r3, [r3, #8]
 8004312:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004314:	697b      	ldr	r3, [r7, #20]
 8004316:	4a09      	ldr	r2, [pc, #36]	; (800433c <TIM_ETR_SetConfig+0x3c>)
 8004318:	4013      	ands	r3, r2
 800431a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	021a      	lsls	r2, r3, #8
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	431a      	orrs	r2, r3
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	4313      	orrs	r3, r2
 8004328:	697a      	ldr	r2, [r7, #20]
 800432a:	4313      	orrs	r3, r2
 800432c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	697a      	ldr	r2, [r7, #20]
 8004332:	609a      	str	r2, [r3, #8]
}
 8004334:	46c0      	nop			; (mov r8, r8)
 8004336:	46bd      	mov	sp, r7
 8004338:	b006      	add	sp, #24
 800433a:	bd80      	pop	{r7, pc}
 800433c:	ffff00ff 	.word	0xffff00ff

08004340 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b086      	sub	sp, #24
 8004344:	af00      	add	r7, sp, #0
 8004346:	60f8      	str	r0, [r7, #12]
 8004348:	60b9      	str	r1, [r7, #8]
 800434a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	221f      	movs	r2, #31
 8004350:	4013      	ands	r3, r2
 8004352:	2201      	movs	r2, #1
 8004354:	409a      	lsls	r2, r3
 8004356:	0013      	movs	r3, r2
 8004358:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	6a1b      	ldr	r3, [r3, #32]
 800435e:	697a      	ldr	r2, [r7, #20]
 8004360:	43d2      	mvns	r2, r2
 8004362:	401a      	ands	r2, r3
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	6a1a      	ldr	r2, [r3, #32]
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	211f      	movs	r1, #31
 8004370:	400b      	ands	r3, r1
 8004372:	6879      	ldr	r1, [r7, #4]
 8004374:	4099      	lsls	r1, r3
 8004376:	000b      	movs	r3, r1
 8004378:	431a      	orrs	r2, r3
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	621a      	str	r2, [r3, #32]
}
 800437e:	46c0      	nop			; (mov r8, r8)
 8004380:	46bd      	mov	sp, r7
 8004382:	b006      	add	sp, #24
 8004384:	bd80      	pop	{r7, pc}
	...

08004388 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b084      	sub	sp, #16
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
 8004390:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	223c      	movs	r2, #60	; 0x3c
 8004396:	5c9b      	ldrb	r3, [r3, r2]
 8004398:	2b01      	cmp	r3, #1
 800439a:	d101      	bne.n	80043a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800439c:	2302      	movs	r3, #2
 800439e:	e042      	b.n	8004426 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	223c      	movs	r2, #60	; 0x3c
 80043a4:	2101      	movs	r1, #1
 80043a6:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	223d      	movs	r2, #61	; 0x3d
 80043ac:	2102      	movs	r1, #2
 80043ae:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	689b      	ldr	r3, [r3, #8]
 80043be:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	2270      	movs	r2, #112	; 0x70
 80043c4:	4393      	bics	r3, r2
 80043c6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	68fa      	ldr	r2, [r7, #12]
 80043ce:	4313      	orrs	r3, r2
 80043d0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	68fa      	ldr	r2, [r7, #12]
 80043d8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a14      	ldr	r2, [pc, #80]	; (8004430 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d00a      	beq.n	80043fa <HAL_TIMEx_MasterConfigSynchronization+0x72>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681a      	ldr	r2, [r3, #0]
 80043e8:	2380      	movs	r3, #128	; 0x80
 80043ea:	05db      	lsls	r3, r3, #23
 80043ec:	429a      	cmp	r2, r3
 80043ee:	d004      	beq.n	80043fa <HAL_TIMEx_MasterConfigSynchronization+0x72>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a0f      	ldr	r2, [pc, #60]	; (8004434 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d10c      	bne.n	8004414 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	2280      	movs	r2, #128	; 0x80
 80043fe:	4393      	bics	r3, r2
 8004400:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	68ba      	ldr	r2, [r7, #8]
 8004408:	4313      	orrs	r3, r2
 800440a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	68ba      	ldr	r2, [r7, #8]
 8004412:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	223d      	movs	r2, #61	; 0x3d
 8004418:	2101      	movs	r1, #1
 800441a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	223c      	movs	r2, #60	; 0x3c
 8004420:	2100      	movs	r1, #0
 8004422:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004424:	2300      	movs	r3, #0
}
 8004426:	0018      	movs	r0, r3
 8004428:	46bd      	mov	sp, r7
 800442a:	b004      	add	sp, #16
 800442c:	bd80      	pop	{r7, pc}
 800442e:	46c0      	nop			; (mov r8, r8)
 8004430:	40012c00 	.word	0x40012c00
 8004434:	40000400 	.word	0x40000400

08004438 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b084      	sub	sp, #16
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
 8004440:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004442:	2300      	movs	r3, #0
 8004444:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	223c      	movs	r2, #60	; 0x3c
 800444a:	5c9b      	ldrb	r3, [r3, r2]
 800444c:	2b01      	cmp	r3, #1
 800444e:	d101      	bne.n	8004454 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004450:	2302      	movs	r3, #2
 8004452:	e03e      	b.n	80044d2 <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	223c      	movs	r2, #60	; 0x3c
 8004458:	2101      	movs	r1, #1
 800445a:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	22ff      	movs	r2, #255	; 0xff
 8004460:	4393      	bics	r3, r2
 8004462:	001a      	movs	r2, r3
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	68db      	ldr	r3, [r3, #12]
 8004468:	4313      	orrs	r3, r2
 800446a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	4a1b      	ldr	r2, [pc, #108]	; (80044dc <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 8004470:	401a      	ands	r2, r3
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	689b      	ldr	r3, [r3, #8]
 8004476:	4313      	orrs	r3, r2
 8004478:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	4a18      	ldr	r2, [pc, #96]	; (80044e0 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 800447e:	401a      	ands	r2, r3
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	4313      	orrs	r3, r2
 8004486:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	4a16      	ldr	r2, [pc, #88]	; (80044e4 <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 800448c:	401a      	ands	r2, r3
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4313      	orrs	r3, r2
 8004494:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	4a13      	ldr	r2, [pc, #76]	; (80044e8 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 800449a:	401a      	ands	r2, r3
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	691b      	ldr	r3, [r3, #16]
 80044a0:	4313      	orrs	r3, r2
 80044a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	4a11      	ldr	r2, [pc, #68]	; (80044ec <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 80044a8:	401a      	ands	r2, r3
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	695b      	ldr	r3, [r3, #20]
 80044ae:	4313      	orrs	r3, r2
 80044b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	4a0e      	ldr	r2, [pc, #56]	; (80044f0 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 80044b6:	401a      	ands	r2, r3
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	69db      	ldr	r3, [r3, #28]
 80044bc:	4313      	orrs	r3, r2
 80044be:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	68fa      	ldr	r2, [r7, #12]
 80044c6:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	223c      	movs	r2, #60	; 0x3c
 80044cc:	2100      	movs	r1, #0
 80044ce:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80044d0:	2300      	movs	r3, #0
}
 80044d2:	0018      	movs	r0, r3
 80044d4:	46bd      	mov	sp, r7
 80044d6:	b004      	add	sp, #16
 80044d8:	bd80      	pop	{r7, pc}
 80044da:	46c0      	nop			; (mov r8, r8)
 80044dc:	fffffcff 	.word	0xfffffcff
 80044e0:	fffffbff 	.word	0xfffffbff
 80044e4:	fffff7ff 	.word	0xfffff7ff
 80044e8:	ffffefff 	.word	0xffffefff
 80044ec:	ffffdfff 	.word	0xffffdfff
 80044f0:	ffffbfff 	.word	0xffffbfff

080044f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b082      	sub	sp, #8
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80044fc:	46c0      	nop			; (mov r8, r8)
 80044fe:	46bd      	mov	sp, r7
 8004500:	b002      	add	sp, #8
 8004502:	bd80      	pop	{r7, pc}

08004504 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b082      	sub	sp, #8
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800450c:	46c0      	nop			; (mov r8, r8)
 800450e:	46bd      	mov	sp, r7
 8004510:	b002      	add	sp, #8
 8004512:	bd80      	pop	{r7, pc}

08004514 <__libc_init_array>:
 8004514:	b570      	push	{r4, r5, r6, lr}
 8004516:	2600      	movs	r6, #0
 8004518:	4d0c      	ldr	r5, [pc, #48]	; (800454c <__libc_init_array+0x38>)
 800451a:	4c0d      	ldr	r4, [pc, #52]	; (8004550 <__libc_init_array+0x3c>)
 800451c:	1b64      	subs	r4, r4, r5
 800451e:	10a4      	asrs	r4, r4, #2
 8004520:	42a6      	cmp	r6, r4
 8004522:	d109      	bne.n	8004538 <__libc_init_array+0x24>
 8004524:	2600      	movs	r6, #0
 8004526:	f000 f82b 	bl	8004580 <_init>
 800452a:	4d0a      	ldr	r5, [pc, #40]	; (8004554 <__libc_init_array+0x40>)
 800452c:	4c0a      	ldr	r4, [pc, #40]	; (8004558 <__libc_init_array+0x44>)
 800452e:	1b64      	subs	r4, r4, r5
 8004530:	10a4      	asrs	r4, r4, #2
 8004532:	42a6      	cmp	r6, r4
 8004534:	d105      	bne.n	8004542 <__libc_init_array+0x2e>
 8004536:	bd70      	pop	{r4, r5, r6, pc}
 8004538:	00b3      	lsls	r3, r6, #2
 800453a:	58eb      	ldr	r3, [r5, r3]
 800453c:	4798      	blx	r3
 800453e:	3601      	adds	r6, #1
 8004540:	e7ee      	b.n	8004520 <__libc_init_array+0xc>
 8004542:	00b3      	lsls	r3, r6, #2
 8004544:	58eb      	ldr	r3, [r5, r3]
 8004546:	4798      	blx	r3
 8004548:	3601      	adds	r6, #1
 800454a:	e7f2      	b.n	8004532 <__libc_init_array+0x1e>
 800454c:	080045c8 	.word	0x080045c8
 8004550:	080045c8 	.word	0x080045c8
 8004554:	080045c8 	.word	0x080045c8
 8004558:	080045cc 	.word	0x080045cc

0800455c <memcpy>:
 800455c:	2300      	movs	r3, #0
 800455e:	b510      	push	{r4, lr}
 8004560:	429a      	cmp	r2, r3
 8004562:	d100      	bne.n	8004566 <memcpy+0xa>
 8004564:	bd10      	pop	{r4, pc}
 8004566:	5ccc      	ldrb	r4, [r1, r3]
 8004568:	54c4      	strb	r4, [r0, r3]
 800456a:	3301      	adds	r3, #1
 800456c:	e7f8      	b.n	8004560 <memcpy+0x4>

0800456e <memset>:
 800456e:	0003      	movs	r3, r0
 8004570:	1882      	adds	r2, r0, r2
 8004572:	4293      	cmp	r3, r2
 8004574:	d100      	bne.n	8004578 <memset+0xa>
 8004576:	4770      	bx	lr
 8004578:	7019      	strb	r1, [r3, #0]
 800457a:	3301      	adds	r3, #1
 800457c:	e7f9      	b.n	8004572 <memset+0x4>
	...

08004580 <_init>:
 8004580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004582:	46c0      	nop			; (mov r8, r8)
 8004584:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004586:	bc08      	pop	{r3}
 8004588:	469e      	mov	lr, r3
 800458a:	4770      	bx	lr

0800458c <_fini>:
 800458c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800458e:	46c0      	nop			; (mov r8, r8)
 8004590:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004592:	bc08      	pop	{r3}
 8004594:	469e      	mov	lr, r3
 8004596:	4770      	bx	lr
